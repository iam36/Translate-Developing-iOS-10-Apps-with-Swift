1
00:00:00,401 --> 00:00:04,336
[MUSIC]
(音乐)

2
00:00:04,404 --> 00:00:10,575
Stanford University, >> Welcome to Stanford CS193P,
斯坦福大学,斯坦福CS193P > >欢迎光临

3
00:00:10,644 --> 00:00:15,414
Developing Applications for iOS, winter of 2017,
iOS应用程序开发,2017年冬天,

4
00:00:15,482 --> 00:00:19,318
This is Lecture number 7, and today we're going to talk
这是讲座7号,今天我们要谈的

5
00:00:19,386 --> 00:00:23,688
a little bit more about Swift, And once we do that,
更迅速,一旦我们这样做,

6
00:00:23,757 --> 00:00:27,159
we can introduce some technology that we need
我们可以介绍一些我们需要的技术

7
00:00:27,227 --> 00:00:31,129
to do more sophisticated UIKit objects like,
做更复杂的UIKit对象,

8
00:00:31,198 --> 00:00:34,899
scroll views can be our first examples of that today's web
滚动视图可以是我们第一次的例子,今天的网络

9
00:00:34,968 --> 00:00:38,603
demo at the end where we show you how to use scroll view,
演示结束后,我们向您展示如何使用滚动视图,

10
00:00:38,672 --> 00:00:42,708
First thing I wanna talk about in Swift is error handling, So
首先我想谈谈在斯威夫特是错误处理,

11
00:00:42,777 --> 00:00:46,778
far, we have not called any methods that
到目前为止,我们还没有任何方法调用

12
00:00:46,847 --> 00:00:51,749
can generate an error, or what we call throwing an error, And
可以生成一个错误,或者我们称之为抛出错误,然后呢

13
00:00:51,818 --> 00:00:55,020
we can always tell these methods though really clearly
我们总是可以告诉这些方法虽然很清楚

14
00:00:55,089 --> 00:00:58,323
in any API, Because when they're declared,
在任何API,因为当他们宣布,

15
00:00:58,392 --> 00:01:01,059
they'll have the word throws after it, And
他们会把这个词后,

16
00:01:01,128 --> 00:01:04,329
throws means that somewhere in the processing of this method,
将意味着在该方法的处理,

17
00:01:04,398 --> 00:01:07,866
it's possible, but not guaranteed, that it will throw
这是有可能的,但不能保证,它将抛出

18
00:01:07,934 --> 00:01:11,803
an error, So when it throws that error at us,
一个错误,所以当它抛出错误在我们,

19
00:01:11,871 --> 00:01:16,040
we have to catch the error, And the way we catch it is,
我们必须抓住错误,我们抓住它的方式,

20
00:01:16,109 --> 00:01:18,677
well, first of all, every time we call a method
嗯,首先,我们每次调用一个方法

21
00:01:18,745 --> 00:01:21,813
that can throw an error, we have to use the word try, So
可以抛出一个错误,我们必须使用这个词

22
00:01:21,882 --> 00:01:24,949
we have to try that method because it might fail,
我们有尝试这个方法,因为它可能会失败,

23
00:01:25,018 --> 00:01:27,152
So that's why we use the word try, But
这就是为什么我们使用这个词,但是

24
00:01:27,220 --> 00:01:29,020
if we wanna catch the error that comes back,
如果我们想赶上回来的错误,

25
00:01:29,089 --> 00:01:32,390
we actually have to do that little try inside what's
我们要做那个小尝试里面是什么

26
00:01:32,459 --> 00:01:37,729
called a do construct, So we have to say do{, and
称为构造,所以我们不得不说做{,

27
00:01:37,798 --> 00:01:42,800
then some code that has some tries in it, And then} catch,
然后一些代码有一些尝试,然后},

28
00:01:42,869 --> 00:01:47,338
then let error is going to allow us to grab the thrown
然后让错误会让我们抓住扔

29
00:01:47,407 --> 00:01:50,242
error into a variable, in this case called error,
错误到一个变量,在这种情况下叫错误,

30
00:01:50,310 --> 00:01:53,311
We could say, let any variable name we want,
我们可以说,让任何我们想要的变量名,

31
00:01:53,380 --> 00:01:55,880
That's gonna be the variable that has the error in it,
这是会有错误的变量,

32
00:01:55,949 --> 00:01:59,017
And then in that curly brace, we handle the error, And
然后在花括号,我们处理错误的,

33
00:01:59,085 --> 00:02:01,853
then after we've handled it, our code continues, So
之后我们处理它,继续我们的代码,所以

34
00:02:01,922 --> 00:02:04,957
we caught the error, we deal with it, we keep going,
我们发现错误,我们应对它,我们继续,

35
00:02:05,025 --> 00:02:08,760
It did, if we want to, and if our function throws,
,如果我们想,如果我们的函数抛出,

36
00:02:08,829 --> 00:02:12,531
we could re-throw the error by using the keyword throw there,
我们可以抛出收到的错误通过使用关键字扔在那里,

37
00:02:12,599 --> 00:02:17,636
in our second, little curly brace space, Now this error
在我们的第二个,小空间花括号,现在这个错误

38
00:02:17,704 --> 00:02:21,439
that gets thrown to you, it does have to be of a certain
扔到你,它确实有一定的

39
00:02:21,508 --> 00:02:25,744
type, The type is called error, It's a protocol,
类型,被称为类型错误,这是一个协议,

40
00:02:25,813 --> 00:02:28,981
which I'm gonna talk about later in this lecture, but
稍后我要讲这节课,但是

41
00:02:29,049 --> 00:02:31,082
it's a pretty simple little type,
这是一个非常简单的类型,

42
00:02:31,151 --> 00:02:34,720
And in UIKit, when UIKit methods throw an error,
在UIKit,当UIKit方法抛出一个错误,

43
00:02:34,788 --> 00:02:37,889
they throw an error of this type NSError, So
他们这种类型的抛出一个错误NSError,所以

44
00:02:37,958 --> 00:02:42,226
you can go take a look in the documentation for NSError and
你可以去看一看NSError和文档

45
00:02:42,295 --> 00:02:46,498
see what an NSError is, It has an error code, it has an error
看到一个NSError是什么,它有一个错误代码,它有一个错误

46
00:02:46,567 --> 00:02:50,335
domain, like where the error occurred, And it,
域,如发生错误的位置,和,

47
00:02:50,404 --> 00:02:54,038
even has some things like a description of what happened,
甚至有一些类似的描述发生了什么,

48
00:02:54,107 --> 00:02:57,342
why it failed, things like that,
为什么它失败了,,

49
00:02:57,411 --> 00:03:00,812
Now, sometimes we call a function that throws,
现在,有时我们调用一个函数抛出,

50
00:03:00,881 --> 00:03:05,383
and we know for sure it's not going to fail, This is
我们确定它不会失败,这是

51
00:03:05,452 --> 00:03:10,155
rare that we know this, but if we're certain about it,
罕见的,我们知道这一点,但如果我们确定,

52
00:03:10,224 --> 00:03:14,926
we can use another version of try, which is try! And just
我们可以使用另一个版本的试试,试试!

53
00:03:14,994 --> 00:03:18,630
like exclamation point means to force it in an optional,
像感叹号意味着迫使它在一个可选的,

54
00:03:18,699 --> 00:03:22,267
exclamation point here means to force it essentially,
感叹号意味着迫使它从本质上讲,

55
00:03:22,336 --> 00:03:25,303
And if we call context,save() right here,
如果我们调用上下文,保存(),

56
00:03:25,372 --> 00:03:28,974
whatever that function is, if we call it and it throws,
不管这个函数是什么,如果我们叫它抛出,

57
00:03:29,043 --> 00:03:32,043
our app will crash, okay, That's what the try!
我们的应用程序会崩溃,好吧,这就是试试!

58
00:03:32,111 --> 00:03:35,913
means, It means try, I know this is not going to throw,
意味着,这意味着尝试,我知道这是不会扔,

59
00:03:35,982 --> 00:03:39,217
If it does, crash my app, There's yet
如果是这样,撞击我的应用程序,然而

60
00:03:39,286 --> 00:03:44,189
another try though, which is try?, Try?
另一个试试,试试?

61
00:03:44,258 --> 00:03:48,994
means try to call this method that throws, and
意味着试图调用这个方法抛出,

62
00:03:49,063 --> 00:03:51,763
if it does throw, just give me back nil,
如果它抛出,就给我回零,

63
00:03:52,832 --> 00:03:53,665
Well, for
嗯,对

64
00:03:53,734 --> 00:03:56,534
that to work of course, the variable that we're
当然,这工作我们的变量

65
00:03:56,603 --> 00:04:00,838
assigning the result of this method, I called this one,
分配的结果,这种方法,我叫这个,

66
00:04:00,907 --> 00:04:04,509
errorProneFunctionThatReturns- AnInt, Whatever that returns,
errorProneFunctionThatReturns AnInt,不管返回,

67
00:04:04,577 --> 00:04:07,145
it's now gonna return an optional version of that,
现在要返回一个可选的版本,

68
00:04:07,213 --> 00:04:09,247
So error prone function that returns an int,
所以容易出错的函数,它返回一个int,

69
00:04:09,316 --> 00:04:11,483
returns an int obviously, But x,
返回一个int很明显,但x,

70
00:04:11,552 --> 00:04:15,720
this let x =, that x is gonna be an optional int for
这让x = x是一个可选的整型

71
00:04:15,789 --> 00:04:18,589
obvious reasons because if error prone function return
显而易见的原因,因为如果出错函数返回

72
00:04:18,658 --> 00:04:23,428
an int throws, it has to throw nil back at us, okay? So
int抛出,它必须把零回到美国,好吗?

73
00:04:23,496 --> 00:04:28,200
that's what try? is, Try? is give it a try, if it fails,
这就是试试吗?

74
00:04:28,268 --> 00:04:31,169
just give me back nil, If I do this try, I don't get to
给我回零,如果我这样做,我不去

75
00:04:31,238 --> 00:04:33,271
look at the error, I don't know what it is,
看这个错误,我不知道那是什么,

76
00:04:33,340 --> 00:04:37,642
I'm ignoring the error here, I know there was an error, but
我忽略这个错误,我知道有一个错误,但是

77
00:04:37,711 --> 00:04:42,213
that's all I know in the try? case, So it's a very simple
这就是我知道的尝试吗?

78
00:04:42,282 --> 00:04:45,049
error mechanism that works quite well,
错误的工作机制很好,

79
00:04:45,118 --> 00:04:48,786
In Swift they really learned the lessons of some other
在斯威夫特他们真的了解了一些其他的课程

80
00:04:48,855 --> 00:04:52,891
languages that have more overwrought, over complicated
语言有更多的工作过度,太过复杂了

81
00:04:52,959 --> 00:04:56,728
throwing of errors that are throwing up call stacks and
把错误的调用堆栈和呕吐

82
00:04:56,796 --> 00:05:00,398
all these things, Swift is very straight forward,
所有这些事情,斯威夫特是非常直接的,

83
00:05:00,467 --> 00:05:04,335
sees the entirety of the error processing, all right?
看到整个错误处理,好吗?

84
00:05:04,404 --> 00:05:07,572
Now, another completely different topic, extensions,
现在,另一个完全不同的话题,扩展,

85
00:05:07,641 --> 00:05:12,109
So, an extension allows you to add a method or a var,
所以,扩展允许您添加一个方法或者一个var,

86
00:05:12,178 --> 00:05:16,180
even, to another class or structure enum, that you may
甚至,到另一个类或结构枚举,你可能

87
00:05:16,249 --> 00:05:19,750
not even have the code to, okay, it's called extension
没有代码,它叫做扩展

88
00:05:19,819 --> 00:05:23,822
because it extends that class, So, here's a concrete example,
因为它扩展类,所以,这是一个具体的例子,

89
00:05:23,891 --> 00:05:26,524
I hope you understand why we might use an extension,
我希望你理解为什么我们可能使用一个扩展,

90
00:05:26,593 --> 00:05:29,360
Remember when we did our app last time and
还记得我们上次我们的程序

91
00:05:29,429 --> 00:05:33,064
we went to our Storyboard and we wrapped the detail of
我们去了我们的故事板,我们包装的细节

92
00:05:33,133 --> 00:05:36,267
the split view in a navigation controller and
分割在导航控制器和视图

93
00:05:36,336 --> 00:05:39,037
it broke our code, Right, it broke our code and
它打破了我们的代码,它打破了我们的代码

94
00:05:39,106 --> 00:05:41,572
prepare for segue because that code was looking for
准备segue因为代码是寻找

95
00:05:41,641 --> 00:05:44,509
a Face View controller and it found a navigation controller
一张脸视图控制器,它找到了一个导航控制器

96
00:05:44,578 --> 00:05:47,745
instead, And the way we fix that is we just look to see if
相反,我们解决这个问题的方式是我们看看,看看

97
00:05:47,814 --> 00:05:50,348
it was navigation controller first, And if it was, we look
这是导航控制器首先,如果是,我们看

98
00:05:50,417 --> 00:05:53,150
at the visible view controller of the navigation controller,
可见视图控制器的导航控制器,

99
00:05:53,219 --> 00:05:56,654
now we have our Face View controller back again, Now,
现在我们面临视图控制器回来,现在,

100
00:05:56,723 --> 00:06:01,092
we could put that code into an extension of UIViewController
我们可以把这段代码到ui的延伸

101
00:06:01,161 --> 00:06:04,228
by creating a new var, you can see it right here
通过创建一个新的变量,你可以看到它在这里

102
00:06:04,297 --> 00:06:06,832
called contentViewController, we can call the new var
叫contentViewController,我们可以称之为新var

103
00:06:06,900 --> 00:06:09,701
anything we want, I like contentViewController cuz
任何我们想要的,我喜欢contentViewController因为

104
00:06:09,769 --> 00:06:12,136
if it's a navigation controller, it's the content,
如果它是一个导航控制器,它的内容,

105
00:06:12,205 --> 00:06:14,338
If it's not a navigation controller, it's just self,
如果它不是一个导航控制器,它只是自我,

106
00:06:14,407 --> 00:06:15,606
It's the view controller itself,
视图控制器本身,

107
00:06:15,675 --> 00:06:19,744
It's its own content, And so I can add this, so
这是自己的内容,所以我可以添加这个,所以

108
00:06:19,812 --> 00:06:23,448
I'm adding this var actually to UIViewController, So now
我添加这实际上var ui,因此现在

109
00:06:23,517 --> 00:06:28,085
UIViewController understands this var, it has this new var,
理解这个var ui,这个新的var,

110
00:06:28,154 --> 00:06:31,022
Now I didn't subclass UIViewController to do it,
现在我没有子类ui,

111
00:06:31,091 --> 00:06:33,291
I just extended UIViewController, So
我只是扩展ui

112
00:06:33,360 --> 00:06:36,961
you UIViewController and all subclasses of UIViewController
你和所有ui界面控制器的子类

113
00:06:37,030 --> 00:06:40,298
will now have this var, And it makes that code that we had in
现在将有一个var,它使代码,我们有在吗

114
00:06:40,367 --> 00:06:42,867
prepare, which looks something like this,
看起来像这样的准备,

115
00:06:42,936 --> 00:06:45,470
the green part is the same in both places,
绿色部分是一样的在这两个地方,

116
00:06:45,539 --> 00:06:47,838
It changes that code with all that to
代码和所有它改变

117
00:06:47,907 --> 00:06:53,278
just this simple line of code, The segue's destination,
只是这个简单的代码行,segue的目的地,

118
00:06:53,346 --> 00:06:58,717
contentViewController as my MVC, I think that slide says
contentViewController作为我的MVC,我认为幻灯片说

119
00:06:58,786 --> 00:07:00,985
destinationViewController- that should be
destinationViewController——这应该是

120
00:07:01,054 --> 00:07:05,423
segue,destination,contentView- Controller there, So,
segue,目的地,contentView -控制器,因此,

121
00:07:05,492 --> 00:07:08,893
it just cleans up our code and prepare for segue, But
它只是清理我们的代码和准备segue,但是

122
00:07:08,962 --> 00:07:10,995
the extension that we have UIViewControllers,
扩展uiviewcontroller我们,

123
00:07:11,064 --> 00:07:12,731
purely a UIViewController thing,
一个单纯的ui的事情,

124
00:07:12,799 --> 00:07:15,500
It has nothing to do with our emotions view controller,
它与我们的情感视图控制器,

125
00:07:15,569 --> 00:07:18,269
anything like that, We purely extended UIViewController to
类似的,我们纯粹的扩展ui

126
00:07:18,338 --> 00:07:23,575
have new functionality, Now, extensions inside their code,
现在有新功能,扩展他们的代码内部,

127
00:07:23,644 --> 00:07:26,644
they can refer to self, And when they refer to self,
他们可以引用自我,当他们把自我,

128
00:07:26,713 --> 00:07:29,381
they mean the class they're in, And so in this case,
他们的意思是类,所以在这种情况下,

129
00:07:29,450 --> 00:07:31,549
the self means the UIViewController that
自我的ui

130
00:07:31,618 --> 00:07:33,718
is executing this var which makes sense,
执行这个var是有意义的,

131
00:07:33,786 --> 00:07:37,989
right? There's some restrictions though with these
对吧?

132
00:07:38,057 --> 00:07:41,960
extensions, So extensions are not a substitute for
扩展,扩展是不能代替

133
00:07:42,029 --> 00:07:44,696
everything object oriented like subclassing and
面向对象的子类化和一切

134
00:07:44,765 --> 00:07:48,132
things like that, One thing is that you can't re-implement
类似这样的事情,有一件事是你不能重新实现

135
00:07:48,201 --> 00:07:51,903
something that already is in there, So, you can't override
东西已经在那里,所以,你不能覆盖

136
00:07:51,971 --> 00:07:55,707
or subclass with extensions, You can only add new things
或子类扩展,您只能添加新的东西

137
00:07:55,775 --> 00:07:58,610
that aren't there, And in fact, if UIViewController were
没有,事实上,如果ui

138
00:07:58,678 --> 00:08:01,479
to have implemented this var contentViewController,
实现这个var contentViewController,

139
00:08:01,547 --> 00:08:04,181
its version would win- the extension with not win,
它的版本会赢——扩展与不赢,

140
00:08:04,250 --> 00:08:06,751
In fact, it might even get an error when you try to add
事实上,它甚至可能会得到一个错误当你试图添加

141
00:08:06,820 --> 00:08:08,853
an extension to something already there,
扩展已有的东西,

142
00:08:08,922 --> 00:08:10,621
So its not our replacing or overriding or
所以它不是我们取代或覆盖

143
00:08:10,690 --> 00:08:13,658
anything like that, it's for adding new things, And a huge
类似的东西,它是用于添加新事物,和一个巨大的

144
00:08:13,727 --> 00:08:18,763
restriction to extensions is they cannot have any storage,
他们不能有任何存储限制扩展,

145
00:08:21,234 --> 00:08:25,403
The only vars an extension can have have to be computed vars,
唯一var扩展可以计算var,

146
00:08:25,472 --> 00:08:27,705
They can't have any stored vars, okay,
他们不能有任何存储var,好吧,

147
00:08:27,774 --> 00:08:30,975
extensions have no storage, They are purely for
扩展没有存储,它们是纯粹的

148
00:08:31,044 --> 00:08:35,880
adding code, all right, Now, this feature of extensions is
添加代码,好了,现在,这个功能的扩展

149
00:08:35,949 --> 00:08:39,450
easily abused especially by beginners to Swift,
很容易滥用特别是初学者迅速、

150
00:08:39,519 --> 00:08:42,019
They start saying, cool, I'll just add this code and
他们开始说,酷,我就添加此代码和

151
00:08:42,088 --> 00:08:43,521
extension here, I'll add new code and
扩展在这里,我将添加新代码和

152
00:08:43,590 --> 00:08:45,657
an extension there and I'll add it over there,
一个扩展那边,我会将它添加,

153
00:08:45,725 --> 00:08:48,359
And you start getting this kind of messy situation where
和你开始这种混乱的情况

154
00:08:48,428 --> 00:08:50,194
the extensions don't really make sense for
扩展并不真正意义

155
00:08:50,263 --> 00:08:53,264
the class you added them to, So I'm gonna suggest that you
你加入他们的课,所以我要建议你

156
00:08:53,332 --> 00:08:56,134
be kind of go slow and steady with the extensions,
是一种缓慢而稳定的扩展,

157
00:08:56,202 --> 00:08:59,904
Don't use them too much, Now having said that, extensions
不要使用太多,现在已经说过,扩展

158
00:08:59,973 --> 00:09:04,075
can be super powerful for architecting your code well,
代码可以是超级强大的架构,

159
00:09:04,144 --> 00:09:06,611
Okay, especially when I start talking about protocols,
好,尤其是当我开始讨论协议,

160
00:09:06,679 --> 00:09:09,280
They can be a fundamental aspect of building
他们可以建立一个基本的方面

161
00:09:09,349 --> 00:09:12,350
like a functional programming approach to building your app,
像一个函数式编程方法来构建您的应用程序,

162
00:09:12,418 --> 00:09:15,052
But I don't have time to teach all that to you, So
但是我没有时间教所有的给你,所以

163
00:09:15,121 --> 00:09:17,088
you're only gonna know enough
你只会知道足够了

164
00:09:17,156 --> 00:09:18,489
about extensions to get yourself in
关于扩展自己

165
00:09:18,558 --> 00:09:21,459
a little bit of trouble, So be careful with extensions, okay?
有点麻烦,所以要小心与扩展,好吗?

166
00:09:21,527 --> 00:09:23,695
Use them lightly, But in the future when you start
使用它们,但是在未来当你开始

167
00:09:23,764 --> 00:09:26,631
a becoming serious iOS developer someday you're gonna
一个iOS开发者有一天你会变得严重

168
00:09:26,699 --> 00:09:28,966
wanna learn how and you can use extensions to your
想学习,你可以使用扩展

169
00:09:29,035 --> 00:09:34,238
advantage without abusing them, all right? Next topic,
优势没有虐待他们,好吗?

170
00:09:34,307 --> 00:09:38,910
protocols, super, duper important topic here,
协议、超级欺骗者重要的话题,

171
00:09:38,978 --> 00:09:41,545
How many people have encountered protocols in
有多少人遇到协议

172
00:09:41,614 --> 00:09:46,384
other languages? Nobody, see? Well, one or two people,
其他语言吗?

173
00:09:46,453 --> 00:09:50,121
So it surprises me a little bit, but, protocols,
所以我有点惊奇,但是,协议,

174
00:09:50,190 --> 00:09:54,325
while very simple, are also incredibly powerful, So,
虽然非常简单,也非常强大,所以,

175
00:09:54,394 --> 00:09:58,296
a protocol is a way to declare a type
协议是一种声明一个类型

176
00:09:58,365 --> 00:10:02,233
that really just means these methods and vars with no
这只是意味着这些方法和增值没有

177
00:10:02,302 --> 00:10:06,937
implementation generally, That's what a protocol is,
实现一般来说,这就是一个协议,

178
00:10:07,006 --> 00:10:10,742
A protocol, as you'll see, is a type, But you're essentially
一个协议,您将看到,你本质上是一个类型,但

179
00:10:10,811 --> 00:10:14,712
just defining a few methods, Or even some vars,
只定义一些方法,甚至一些增值,

180
00:10:14,781 --> 00:10:17,982
that are part of this protocol, Then we're gonna use
这个协议的一部分,那么我们会使用

181
00:10:18,051 --> 00:10:21,052
the protocol, as you'll see, to define our APIs better,
协议,您将看到,定义api更好,

182
00:10:21,120 --> 00:10:26,557
It allows you to create an API that lets the callers pass
它允许您创建一个API,允许调用者通过

183
00:10:26,626 --> 00:10:30,628
anything they want- any class, or struct, or enum even,
任何他们想要的——任何类或结构,或枚举,

184
00:10:30,696 --> 00:10:34,866
they want to this API that you create, But it allows you,
他们想这个API创建的,但它允许您,

185
00:10:34,934 --> 00:10:38,970
who's receiving it, to ensure that that class, or
谁是接收它,以确保类,还是

186
00:10:39,039 --> 00:10:41,405
enum, or struct, implements certain methods or
枚举、结构、实现特定的方法或

187
00:10:41,474 --> 00:10:45,176
vars that you need, So that's what this is all about,
var需要,这都是什么,

188
00:10:45,245 --> 00:10:47,912
It's about API design, We want to build API so
关于API设计,我们希望构建API

189
00:10:47,980 --> 00:10:51,282
we can express in our API exactly what we want and
我们在API可以表达我们所想要的

190
00:10:51,351 --> 00:10:54,318
no more, Okay, just the methods and vars we need to do
没有更多的,只是我们需要做和增值的方法

191
00:10:54,387 --> 00:10:57,288
whatever this function is going to do or whatever, and
无论这个函数是要做什么的,和

192
00:10:57,357 --> 00:11:01,292
not extra stuff, So, a protocol is just a collection
没有额外的东西,所以,一个协议只是一个集合

193
00:11:01,361 --> 00:11:04,062
of method and property declarations,
的方法和属性声明,

194
00:11:04,130 --> 00:11:07,798
That's what a protocol is, But a protocol is a type, It's
这就是一个协议,但协议是一个类型,它是

195
00:11:07,867 --> 00:11:11,202
a full fledged type, It serves any place you can use a type,
一个完整的类型,它任何地方您可以使用一个类型,

196
00:11:11,271 --> 00:11:15,506
like a float, You can use a type that's a protocol,
像一个浮点数,您可以使用这种类型的一个协议,

197
00:11:15,574 --> 00:11:19,243
Protocols are first-class types, Absolutely first-class
协议是一流的类型,绝对一流的

198
00:11:19,312 --> 00:11:23,781
types, The implementation of the methods and vars under
类型,方法的实现和增值

199
00:11:23,850 --> 00:11:26,851
protocol, since a protocol is just the declaration of them,
协议,自协议只是宣言,

200
00:11:26,919 --> 00:11:29,554
where does the implementation happen? Well, mostly
实现发生在哪里?

201
00:11:29,622 --> 00:11:33,557
it happens in classes and structs and enum that claim to
它发生在类和结构体和enum宣称

202
00:11:33,626 --> 00:11:36,827
implement that protocol, or conform to that protocol,
实现这个协议,或遵守协议,

203
00:11:36,896 --> 00:11:39,897
we say, So if I'm a struct, and I wanna say yes,
我们说,如果我是一个结构体,我想说是的,

204
00:11:39,966 --> 00:11:43,467
I wanna conform to protocol x, then I have to implement
我想符合协议x,然后我必须执行

205
00:11:43,536 --> 00:11:46,938
all the methods in vars that are in protocol x, right?
协议中的所有的var方法x,对吧?

206
00:11:47,006 --> 00:11:48,672
Cuz protocol x is just a declaration of them,
因为x协议只是一个声明,

207
00:11:48,741 --> 00:11:50,708
it's not an implementation, Now,
这不是一个实现,现在,

208
00:11:50,777 --> 00:11:54,778
you can also do implementation on a protocol in an extension,
你还可以实现在一个扩展的一个协议,

209
00:11:54,847 --> 00:11:56,714
but I'm going to put that on the shelf for second and
但是我要把第二和架子上

210
00:11:56,783 --> 00:11:59,016
talk about that in a few more slides, But
讲到一些幻灯片,但是

211
00:11:59,085 --> 00:12:02,353
primarily protocols, implementation happens in
发生在主要协议,实现

212
00:12:02,422 --> 00:12:05,155
conforming or implementing classes,
符合或实现类,

213
00:12:05,224 --> 00:12:10,127
structs and enums, Now, the three parts to a protocol,
结构体和枚举,现在,一个协议的三个部分,

214
00:12:10,196 --> 00:12:12,029
One is the declaration of the protocol,
一个是协议的声明,

215
00:12:12,098 --> 00:12:14,332
That's really simple, It looks just like declaring a class,
这是很简单的,它看起来就像声明一个类,

216
00:12:14,400 --> 00:12:16,868
a struct or an enum, But there's no implementation,
一个结构或一个枚举,但没有实现,

217
00:12:16,936 --> 00:12:20,271
okay, The second part is the class or structure or
第二部分是类或结构

218
00:12:20,340 --> 00:12:23,608
enum that claims to conform to that protocol,
enum声称符合协议,

219
00:12:23,676 --> 00:12:25,943
That claims that it implements that protocol, And
声称,它实现了协议,

220
00:12:26,012 --> 00:12:28,646
then of course there's the actual code that that class,
当然有这个类的代码,

221
00:12:28,715 --> 00:12:31,883
struct, or enum, that claims to implement the protocol,
结构体或枚举,声称执行协议,

222
00:12:31,952 --> 00:12:33,785
actually does implement the protocol, So that's it,
确实执行协议,所以,

223
00:12:33,853 --> 00:12:35,819
those are the three part of using a protocol,
这些都是使用协议的三个部分,

224
00:12:35,888 --> 00:12:40,458
Both the declaration and then the implementation, Now,
声明和实现,现在,

225
00:12:40,527 --> 00:12:42,994
I'm gonna talk about a feature with protocols,
我要讲一个特性与协议,

226
00:12:43,063 --> 00:12:45,563
called optional methods, This is not optional,
可选的方法,这不是可选的,

227
00:12:45,632 --> 00:12:47,966
like the optional type, This is different optional,
可选的类型,这是不同的可选,

228
00:12:48,034 --> 00:12:51,502
It means that the methods in the protocol, are optional,
这意味着协议的方法,是可选的,

229
00:12:51,571 --> 00:12:53,071
you don't have to implement them, and
你不必实现它们

230
00:12:53,139 --> 00:12:55,906
you can still say that you implement this protocol,
你还能说你实现这个协议,

231
00:12:55,975 --> 00:12:58,910
Now this is an Objective-C thing, This is not a really
现在这是一个objective - c的事情,这不是真的

232
00:12:58,979 --> 00:13:01,946
a Swift thing, In swift when you have a protocol and
迅速的,在迅速,当你有一个协议

233
00:13:02,015 --> 00:13:04,315
it has a bunch of methods in it, if you're struct or
它有很多方法,如果你是结构或

234
00:13:04,384 --> 00:13:06,784
class and you wanna say you implemented that protocol,
类和你想说你那个协议实现的,

235
00:13:06,852 --> 00:13:09,287
you have to implement all of them,
你必须实现所有这些,

236
00:13:09,355 --> 00:13:13,925
all right, In Objective-C though that's not true,
在objective - c中,虽然这不是真的,

237
00:13:13,993 --> 00:13:16,827
in Objective-C some of the methods might be optional and
在objective - c的一些方法可能是可选的,

238
00:13:16,896 --> 00:13:20,164
in which case you can claim to implement the protocol and
在这种情况下,你可以要求执行协议

239
00:13:20,233 --> 00:13:23,868
not implement those, So, if we have a protocol that has these
没有实现这些,所以,如果我们有一个协议,这些

240
00:13:23,937 --> 00:13:26,437
optional things in it, it has to be marked objc,
可选的东西,它必须是objc,

241
00:13:26,506 --> 00:13:30,408
So you put this little @objc before the word protocol, and
所以你把这个小@objc之前协议,这个词

242
00:13:30,477 --> 00:13:32,743
that says this is an Objective-C protocol, And
说这是一个objective - c协议,

243
00:13:32,812 --> 00:13:35,346
then inside the declaration you can put the word
你可以把这个词然后在声明

244
00:13:35,414 --> 00:13:39,283
"optional" in front of any funcs or var that you want to
前面的“可选的”任何你想要的函数或变量

245
00:13:39,351 --> 00:13:44,154
make optional, So this is going to be used for something
使可选,所以这将是用于什么

246
00:13:44,223 --> 00:13:46,090
called delegation which I'm gonna talk about in a few
叫代表团在一些我要讲

247
00:13:46,159 --> 00:13:49,860
slides which is an Objective-C thing that is brought forward,
幻灯片是一个objective - c提出了,

248
00:13:49,929 --> 00:13:52,931
Because it's in UIKit so extensively it's brought
因为它在UIKit广泛了

249
00:13:52,999 --> 00:13:57,334
forward into Swift using this @objc protocol, okay?
在迅速使用这个@objc协议,好吗?

250
00:13:57,403 --> 00:13:59,971
But back to protocols in general, So let's take a look
但协议一般,让我们来看一看

251
00:14:00,040 --> 00:14:01,705
at what a protocol looks like to declare,
协议是什么样子的申报,

252
00:14:01,774 --> 00:14:05,710
So here's the declaration of a protocol called SomeProtocol,
这是协议称为SomeProtocol宣言,

253
00:14:05,779 --> 00:14:07,612
And you can see it looks just like declaring a class,
你可以看到它看起来就像声明一个类,

254
00:14:07,681 --> 00:14:09,279
a struct, or an enum, right,
结构体或枚举,

255
00:14:09,348 --> 00:14:11,582
You got the keyword which is protocol instead of class,
你有协议的关键字,而不是类,

256
00:14:11,651 --> 00:14:14,551
struct, or enum, Then you got the name,
结构体或枚举,然后你得到了这个名字,

257
00:14:14,620 --> 00:14:19,991
Now after that though there's a colon, and other protocols,
现在,虽然有一个冒号后,和其他协议,

258
00:14:20,060 --> 00:14:23,227
These protocols are called inherited protocols,
这些协议被称为继承协议,

259
00:14:23,296 --> 00:14:26,331
Some protocol inherits these two protocols, And
一些协议继承这两个协议,

260
00:14:26,399 --> 00:14:28,532
what it means is that anyone who wants to say yeah,
这意味着,任何人想说,

261
00:14:28,601 --> 00:14:29,800
I implement some protocol,
我实现一些协议,

262
00:14:29,869 --> 00:14:31,235
they have to implement those too,
他们必须实现这些,

263
00:14:31,303 --> 00:14:33,704
Okay, they're doing all three of these protocols,
好的,他们做所有这三个协议,

264
00:14:33,773 --> 00:14:37,074
Some protocol, and its two inherited protocols,
一些协议,它的两个继承协议,

265
00:14:37,143 --> 00:14:41,879
So protocols essentially have multiple inheritance, How many
所以协议本质上有多重继承,有多少

266
00:14:41,947 --> 00:14:45,482
people know what multiple inheritance is in object
人知道什么是多重继承的对象

267
00:14:45,551 --> 00:14:47,785
oriented? So only a few of you, So multiple inheritance
面向?

268
00:14:47,854 --> 00:14:49,753
just means like you could have two super classes, or
就意味着你可以有两个父类,或

269
00:14:49,822 --> 00:14:52,923
three super classes, Some languages support that,
三个超类,有些语言支持,

270
00:14:52,992 --> 00:14:56,460
Swift does not, But Swift does support multiple
斯威夫特没有,但迅速并支持多个

271
00:14:56,529 --> 00:15:00,764
protocols that you can inherit from, okay?
协议,你可以继承?

272
00:15:00,833 --> 00:15:04,768
Now, the protocol inside, you can have properties and
协议里面,现在你可以有属性和

273
00:15:04,837 --> 00:15:09,440
you can have funcs, And if you have a var, a property,
你可以有函数,如果你有一个var,一个属性,

274
00:15:09,508 --> 00:15:12,376
you have to say whether it's a get set property or
你不得不说这是一个是否得到或设置属性

275
00:15:12,445 --> 00:15:15,112
there's just get only and you do that in a curly brace get
只有只有你用花括号

276
00:15:15,181 --> 00:15:18,582
set, Curly brace get, So you have to put that curly
集,花括号,所以你必须把卷曲的

277
00:15:18,651 --> 00:15:21,752
brace something in there that says whether you're gonna be
撑在那里,你是否会说

278
00:15:21,821 --> 00:15:27,224
a get set var or whether you're just a get-only var,
一组得到var还是你只是一个只有get var,

279
00:15:27,293 --> 00:15:32,496
Any function that the protocol expects would mutate the thing
任何函数,该协议预计会发生变异

280
00:15:32,565 --> 00:15:35,966
implementing it, like if a struct were implementing it,
实现它,就像如果一个结构体实现它,

281
00:15:36,035 --> 00:15:39,904
you have to mark it mutating, Now if a class were to
你必须马克现在变异,如果一个类

282
00:15:39,972 --> 00:15:41,905
implement this protocol, it wouldn't matter,
实现这个协议,它不重要,

283
00:15:41,974 --> 00:15:44,775
classes don't have to mark themselves mutating,
类不需要马克自己变异,

284
00:15:44,844 --> 00:15:46,877
And in fact it's even possible to say,
事实上,它甚至可能说,

285
00:15:46,946 --> 00:15:49,847
I want this protocol only to be implemented by classes,
我只希望这个协议实现的类,

286
00:15:49,916 --> 00:15:52,583
And you do that by putting the word class right after
和你用这个词之后

287
00:15:52,651 --> 00:15:55,719
the colon, See the yellow class right there SomeProtocol
冒号,看到黄色类SomeProtocol

288
00:15:55,788 --> 00:15:58,256
: class- that means this SomeProtocol can only be
:类——这意味着这个SomeProtocol只能

289
00:15:58,324 --> 00:15:59,756
implemented by reference types, And
实现的引用类型

290
00:15:59,825 --> 00:16:02,426
in that case you don't have to put any mutatin's in there,
在这种情况下你不需要放任何mutatin,

291
00:16:02,495 --> 00:16:04,428
But if you are gonna allow your protocol to
但如果你要让你的协议

292
00:16:04,497 --> 00:16:07,097
be implemented by an enum, or especially by a struct,
实现由一个枚举,或者特别结构,

293
00:16:07,166 --> 00:16:09,934
obviously you're gonna have to put mutating in there,
很明显你需要把变异,

294
00:16:11,871 --> 00:16:15,973
You can also specify in a protocol initializers,
您还可以指定在一个协议的初始化,

295
00:16:16,042 --> 00:16:16,940
You're basically saying,
你基本上说,

296
00:16:17,009 --> 00:16:19,410
anyone who wants to implement this SomeProtocol has to be be
任何人想要实现这个SomeProtocol必须是

297
00:16:19,478 --> 00:16:23,814
able to be initialized with these arguments, all right?
能够与这些参数初始化,对吧?

298
00:16:23,883 --> 00:16:27,451
If you do that, by the way, and you're a class,
顺便说一下,如果你这样做,你是一个类,

299
00:16:27,520 --> 00:16:32,456
okay, then you have to mark the initializer required, I'll
好吧,那么你必须马克所需的初始化,我会

300
00:16:32,525 --> 00:16:37,895
show you that in a second, All right, so how does a class or
告诉你,,好吧,那么一个类或

301
00:16:37,964 --> 00:16:42,733
a struct or an enum say yes, I implement SomeProtocol?
一个结构或一个枚举说,是的,我实现SomeProtocol吗?

302
00:16:42,802 --> 00:16:46,336
It does it this way, A class, right after its superclass,
这样,一个类,其超类之后,

303
00:16:46,405 --> 00:16:48,639
just puts a comma and the protocols'll do this,
只是把一个逗号和协议将会这样做,

304
00:16:48,708 --> 00:16:51,208
And you can implement any number of protocols there,
你可以实现任意数量的协议,

305
00:16:51,277 --> 00:16:54,244
So this class called SomeClass has a SuperClass,
这类被称为SomeClass有一个超类,

306
00:16:54,313 --> 00:16:57,247
it's called SuperClass of some class, and it also implements
它叫做一些类的超类,它还实现了

307
00:16:57,316 --> 00:17:00,984
two protocols, SomeProtocol and AnotherProtocol,
两个协议,SomeProtocol AnotherProtocol,

308
00:17:01,053 --> 00:17:03,721
Now inside of SomeClass' implementations it must
它必须现在SomeClass的内部实现

309
00:17:03,790 --> 00:17:07,357
implement all the methods and vars in those two protocols
实现和增值的所有方法在这两个协议

310
00:17:07,426 --> 00:17:10,027
unless it's an Objective-C protocol and they're marked
除非是一个objective - c协议和标记

311
00:17:10,096 --> 00:17:12,163
optional, Okay, the methods in there are marked optional,
可选的,在有可选的方法,

312
00:17:12,231 --> 00:17:16,600
That's the only exception to that, All right, Structs or
这是唯一的例外,结构或

313
00:17:16,669 --> 00:17:19,937
enums, Exactly the same, it's just they have no superclass,
枚举,一模一样的,只是他们没有父类,

314
00:17:20,006 --> 00:17:22,439
So here's an enum saying, that it implements those two
这是enum说,它实现了这两个

315
00:17:22,508 --> 00:17:24,975
protocols, okay? And here is a struct saying that it
协议,好吗?

316
00:17:25,044 --> 00:17:27,678
implements those two protocols, Now,
实现这两个协议,现在,

317
00:17:27,747 --> 00:17:32,482
you can have any number of protocols implemented, And
你可以拥有任意数量的协议实现

318
00:17:32,551 --> 00:17:35,420
as I said, inits have to be required, The reason that
就像我说的,init必须需要的原因

319
00:17:35,488 --> 00:17:38,322
these inits have to be required here is that,
初始化必须要求是,

320
00:17:38,391 --> 00:17:42,159
what if a subclass, subclass is SomeClass right there, and
如果一个子类,子类SomeClass,和

321
00:17:42,228 --> 00:17:45,095
it does all the initial exation games such as,
它所有的初始exation游戏,比如,

322
00:17:45,164 --> 00:17:47,698
this is no longer a good intializer,
这不再是一个好的intializer,

323
00:17:47,767 --> 00:17:48,665
Because maybe this was required,
因为也许这是必需的,

324
00:17:48,734 --> 00:17:50,468
You need an initializer, you need an override, so
你需要一个初始化程序,您需要一个覆盖,所以

325
00:17:50,536 --> 00:17:52,569
now you have your own new designated initializer,
现在你有了自己的新的指定初始化,

326
00:17:52,638 --> 00:17:55,072
et cetera, Well, that would be bad, because that would mean
等等,这将是糟糕的,因为这意味着

327
00:17:55,141 --> 00:17:58,075
the subclass of SomeClass would no longer conform to
SomeClass不再符合的子类

328
00:17:58,144 --> 00:18:00,945
that protocol, and that is not allowed,
协议,是不允许的,

329
00:18:01,014 --> 00:18:03,981
If a class conforms to a protocol, like SomeProtocol,
如果一个类符合协议,像SomeProtocol,

330
00:18:04,050 --> 00:18:06,884
all of its subclasses have to continue to do that, And
所有的子类必须继续这样做,和

331
00:18:06,953 --> 00:18:10,721
they'll inherit that from the superclass except for init,
他们会从超类继承,除了初始化,

332
00:18:10,790 --> 00:18:14,191
are the one thing that can be uninherited by the rules of
的一件事是可以uninherited的规则吗

333
00:18:14,259 --> 00:18:19,563
init, Okay? One thing that's very interesting is that you
初始化?

334
00:18:19,632 --> 00:18:22,499
are allowed to add protocol conformance to a struct,
允许添加协议一致性结构,

335
00:18:22,568 --> 00:18:26,403
a class, or an enum using an extension, As long as you can
一个类,或者使用一个扩展枚举,只要你能

336
00:18:26,472 --> 00:18:29,539
do it without any storage, You can do it in the extension,
这样做没有任何存储,你可以扩展,

337
00:18:29,608 --> 00:18:32,443
You just say, extension Something, where Something is
你只是说,扩展的东西,东西在哪里

338
00:18:32,512 --> 00:18:35,312
the class, struct or enum, colon, SomeProtocol,
类、结构或枚举、结肠癌、SomeProtocol,

339
00:18:35,381 --> 00:18:38,182
And that saying, I'm creating extension to that class,
说,我创建扩展类,

340
00:18:38,251 --> 00:18:40,651
struct or enum that implements this protocol,
结构体或枚举实现这个协议,

341
00:18:40,720 --> 00:18:41,918
And then inside that extension,
然后在扩展,

342
00:18:41,987 --> 00:18:45,790
you have to implement all the methods of the protocol, Okay,
你必须实现所有协议的方法,好的,

343
00:18:45,859 --> 00:18:50,727
understand what I'm saying there? Let's
明白我的意思吗?

344
00:18:50,796 --> 00:18:54,198
talk about protocols being types, What do I mean when I
讨论协议类型,什么我的意思是当我

345
00:18:54,267 --> 00:18:56,867
say a protocol is a type? So, I got an example here,
说协议是一个类型?

346
00:18:56,936 --> 00:18:59,803
I've got a protocol called Moveable and
我有一个叫做移动和协议

347
00:18:59,872 --> 00:19:02,439
it just has one function in it, a mutating function called
它有一个函数,一个变异函数调用

348
00:19:02,508 --> 00:19:06,144
move to point, Now, I have two data structures here,
点,现在,在这里,我有两个数据结构

349
00:19:06,212 --> 00:19:09,513
One is a class called Car, and it's Moveable,
一个是一个类称为汽车,它是可移动的,

350
00:19:09,582 --> 00:19:12,950
Okay, the Car is Moveable, but the Car also has other methods
好的,车是可移动的,但是汽车也有其他的方法

351
00:19:13,018 --> 00:19:16,887
like changeOil, You change the oil of the car, And
像changeOil,你改变汽车的油,和

352
00:19:16,956 --> 00:19:19,056
similarly I have this struct called Shape,
同样我有这种结构称为形状,

353
00:19:19,125 --> 00:19:22,259
It also implements Moveabl, Look, see, mutating func
它还实现了Moveabl,看,看,变异函数

354
00:19:22,328 --> 00:19:24,861
move to point, It actually implements that, But it also
点,它实际上实现了,但它也

355
00:19:24,930 --> 00:19:26,931
has a function called draw, Because it is a shape and
有一个函数叫做画,因为它是一个形状和

356
00:19:26,999 --> 00:19:30,168
it can be drawn on screen, All right, so all
它可以在屏幕上,所以

357
00:19:32,972 --> 00:19:35,539
two of these classes implement this protocol move to,
两个类实现此协议转向,

358
00:19:35,607 --> 00:19:39,343
Do you see that? So do you see that they're all moveable?
你看到了吗?

359
00:19:39,411 --> 00:19:41,612
Okay, a car is moveable, A shape is moveable,
好的,汽车是可移动的,形状是可移动的,

360
00:19:41,681 --> 00:19:45,583
That's how we would describe those, So I created two little
我们将描述这些,所以我创建了两个小

361
00:19:45,651 --> 00:19:48,785
vars down here, A Prius, which is of car of course,
var,普锐斯,这是汽车当然,

362
00:19:48,854 --> 00:19:51,322
it equals a new car, And then I created a square,
它等于一辆新车,我创建了一个广场,

363
00:19:51,391 --> 00:19:53,991
which is a shape, of course, So I've got a Prius and
这是一个形状,当然,所以我有普锐斯和吗

364
00:19:54,060 --> 00:19:56,360
a square here, Let's see what we can do with the Prius and
一个广场,让我们看看我们能做什么和普锐斯

365
00:19:56,428 --> 00:20:00,497
the square, First, I can create a var whose type is
广场,首先,我可以创建一个变量的类型

366
00:20:00,566 --> 00:20:05,936
Moveable called thingToMove and I can assign it to Prius,
可移动的叫做thingToMove我可以将它分配给普锐斯

367
00:20:06,005 --> 00:20:09,573
Because a Prius is moveable, So if I have a var that
因为普锐斯是可移动的,所以如果我有一个var

368
00:20:09,642 --> 00:20:12,776
is of type moveable, of course a Prius can be put in there,
的类型是可移动的,当然普锐斯可以放在那里,

369
00:20:12,845 --> 00:20:17,681
Everyone understand that? And I can even say, thingToMove,
大家都理解了吗?

370
00:20:17,750 --> 00:20:21,218
move to this point, because thingToMove is a Moveable,
搬到这一点,因为thingToMove是一个可移动的,

371
00:20:21,287 --> 00:20:24,622
So, if it's a Moveable, it has to implement move to point, So
所以,如果这是一个可移动的,它必须实现转向点,

372
00:20:24,690 --> 00:20:29,092
I can say that, However, I cannot say, thingToMove,
但是,我可以说,我不能说,thingToMove,

373
00:20:29,161 --> 00:20:32,929
change oil, This is the critical thing to understand,
改变石油,这是关键的理解,

374
00:20:32,998 --> 00:20:39,636
okay? Even though I put a Prius in thingToMove,
好吧?

375
00:20:39,705 --> 00:20:43,741
that var is not a Car, it's a Moveable,
var不是一辆车,它是一个可移动的,

376
00:20:43,809 --> 00:20:47,211
And moveables don't know how to change the oil, Cars do,
和可移动的不知道如何改变石油,汽车,

377
00:20:47,279 --> 00:20:51,748
But moveables don't, So what matters is the type when it
但可移动的,所以重要的是当它类型

378
00:20:51,817 --> 00:20:54,652
comes to sending the messages, not what's actually in there,
来发送消息,而不是实际上是什么,

379
00:20:56,155 --> 00:20:59,923
Everyone understand that? Now, of course, I could also say
大家都理解了吗?

380
00:20:59,992 --> 00:21:02,759
thingToMove = square, That's perfectly legal as well, Okay,
thingToMove =广场,这是完全合法的,好的,

381
00:21:02,828 --> 00:21:05,062
square is not even a class, it's a struct, Okay,
广场甚至不是一个类,它是一个结构体,好吧,

382
00:21:05,131 --> 00:21:08,031
it's not a car, it's a shape, But they're both moveable so
它不是一辆车,它的形状,但它们都是可移动的

383
00:21:08,100 --> 00:21:10,601
that var thingToMove which is of type Moveable can hold
var thingToMove这类型的可移动的可以

384
00:21:10,669 --> 00:21:13,303
either of those things, In fact, I can even create
这些东西,事实上,我甚至可以创建

385
00:21:13,372 --> 00:21:18,376
an array, thingsToMove, which is an array of Moveable and
一个数组,thingsToMove,这是一个可移动的和数组

386
00:21:18,444 --> 00:21:20,244
then I can put a Prius and a square both in there,
然后我可以把普锐斯和一个正方形,

387
00:21:20,312 --> 00:21:22,980
even though they're completely different classes,
尽管它们完全不同的类,

388
00:21:23,048 --> 00:21:24,781
types of things,
类型的东西,

389
00:21:24,850 --> 00:21:27,517
They can both go in there cuz they're both moveables,
他们可以进去,因为他们都是可移动的,

390
00:21:27,586 --> 00:21:30,520
So, the type of thing in that array is Moveable,
所以,在这个数组的类型是可移动的,

391
00:21:30,589 --> 00:21:34,091
What it actually is, doesn't matter, Okay,
它实际上是什么,没关系,好吧,

392
00:21:34,160 --> 00:21:38,061
everyone cool with that? All right, I could also have
每个人都明白了吗?

393
00:21:38,130 --> 00:21:40,964
a function that takes a Moveable as an argument,
一个函数,它需要一个可移动的作为参数,

394
00:21:41,033 --> 00:21:44,801
like slide that takes a slider which is a Moveable, and
像幻灯片需要一个可移动的滑块,和

395
00:21:44,870 --> 00:21:48,271
I can say, slider move to that position because the argument,
我可以说,滑块移动到那个位置,因为参数,

396
00:21:48,340 --> 00:21:51,174
slider, is a Moveable so we can say move too, And
滑块,是一个可移动的所以我们可以说,和

397
00:21:51,243 --> 00:21:55,012
I could say slide a Prius, slide a square,
我可以说幻灯片普锐斯,滑动一个正方形,

398
00:21:55,081 --> 00:21:58,816
It works perfectly fine, By the way you can have arguments
效果非常好,你可以有参数

399
00:21:58,885 --> 00:22:01,419
to functions that require multiple protocols,
需要多个协议的函数,

400
00:22:01,487 --> 00:22:03,320
For example I could have a function, slip and
例如我可以有一个函数,滑

401
00:22:03,389 --> 00:22:08,159
slide which has a parameter x which is both Moveable,
滑参数x是可移动的,

402
00:22:08,227 --> 00:22:10,160
and another protocol, which I haven't showed here,
另一个协议,我这里还没有显示,

403
00:22:10,229 --> 00:22:12,563
called Slippery, And that's what the ampersand means,
称为滑,该符号是什么意思,

404
00:22:12,632 --> 00:22:14,932
It means both of these protocols, So
这意味着这两个协议

405
00:22:15,001 --> 00:22:17,968
that inside slipAndSlide, I could send x Moveable things,
slipAndSlide里面,我可以发送x可移动的东西,

406
00:22:18,036 --> 00:22:20,070
like move to, and I could also send it Slippery things,
喜欢去,我也可以把它滑的东西,

407
00:22:20,139 --> 00:22:23,841
whatever those are, Note that I can't say slipAndSlide
不管这些,请注意,我不能说slipAndSlide

408
00:22:23,909 --> 00:22:27,711
Prius, because Prius does not implement slippery, okay?
普锐斯,因为普锐斯没有实现滑,好吗?

409
00:22:27,780 --> 00:22:31,548
Prius does not conform to the Slippery protocol so cannot
普锐斯不符合协议所以不能很滑

410
00:22:31,617 --> 00:22:35,352
pass in there, Swift would not even let me call that,
迅速传递,甚至不让我叫,

411
00:22:35,421 --> 00:22:37,887
Okay, everyone understand what I mean now by a protocol as
好了,大家都明白我的意思是现在通过一个协议

412
00:22:37,956 --> 00:22:41,225
a type? It's just a type, and anything that conforms to that
一个类型?

413
00:22:41,293 --> 00:22:43,927
type can be stored in something, or passed through
类型可以存储在一些东西,或通过

414
00:22:43,996 --> 00:22:47,330
in something of that type, Now I'm gonna take a couple slides
在该类型的东西,现在我要花几幻灯片

415
00:22:47,399 --> 00:22:51,368
here and talk about the advanced use of protocols, I'm
这里讨论的高级使用协议,我

416
00:22:51,436 --> 00:22:54,771
not gonna ask you to do that in the nine or ten weeks we
不会让你做我们在九、十周

417
00:22:54,840 --> 00:22:57,874
have here because it is kinda advanced use, But I think it's
这里,因为它是有点高级的使用,但我认为这是吗

418
00:22:57,943 --> 00:23:00,944
important that you understand that this exists because all
重要的是你明白这,因为所有的存在

419
00:23:01,013 --> 00:23:05,015
of Swift's standard library, arrays and dictionaries,
斯威夫特的标准库、数组和字典

420
00:23:05,083 --> 00:23:09,886
all that stuff, is all implemented using protocols,
所有的东西,都是使用协议,实现

421
00:23:09,955 --> 00:23:13,124
So, one thing that a protocol can do that I'm not gonna ask
协议可以做的一件事,我不会问

422
00:23:13,192 --> 00:23:16,126
you to do, is that it can restrict the type
你做的,就是它可以限制类型

423
00:23:16,195 --> 00:23:19,129
of a generic, Everyone knows what a generic is, right?
一般,每个人都知道什么是一个通用的,对吧?

424
00:23:19,198 --> 00:23:21,832
An array of angle bracket t,
尖括号的数组,

425
00:23:21,901 --> 00:23:26,237
It means the array can hold any type in there, But that t,
这意味着数组可以保存任何类型,但t,

426
00:23:26,305 --> 00:23:29,206
that array of t could be restricted to things that
这一系列t可能限制的事情

427
00:23:29,275 --> 00:23:31,641
implement a certain protocol, So here's an example,
实现一个特定的协议,这是一个例子,

428
00:23:31,710 --> 00:23:36,580
which is range, When I showed you range, a few lectures ago,
范围,当我给你们看的,几年前的一个讲座,

429
00:23:36,649 --> 00:23:41,385
I said it was sort of Range<T>, Okay,
我说这是范围< T >,好吧,

430
00:23:41,454 --> 00:23:46,090
the reason it was only sort of Range<T> was because
原因只有范围< T >是因为

431
00:23:46,158 --> 00:23:49,693
actually range bound or T bound is just a variable name
实际上范围约束或T绑定是一个变量名

432
00:23:49,762 --> 00:23:52,862
basically for that type, colon comparable,
基本类型,结肠相比,

433
00:23:52,931 --> 00:23:57,067
Okay, so a range can only be a range of things that implement
好的,所以一系列只能实现一系列的事情

434
00:23:57,136 --> 00:24:00,971
the protocol Comparable, Luckily ints implement
协议相比,幸运的是整数实现

435
00:24:01,040 --> 00:24:05,809
Comparable, Floats implement Comparable, Characters and
可比,浮点数实现可比性,人物和

436
00:24:05,878 --> 00:24:08,612
strings implement Comparable, etc, So these things all
字符串实现可比性等,所以这些东西

437
00:24:08,681 --> 00:24:10,981
implement Comparable so you can have a range of ints,
实现类似的所以你可以有一个范围的整数,

438
00:24:11,050 --> 00:24:13,616
a range of floats, whatever, Now,
一系列的花车,无论如何,现在,

439
00:24:13,685 --> 00:24:17,921
why does range want the thing in its range to be comparable?
为什么想要在其范围内的范围可比?

440
00:24:17,990 --> 00:24:20,590
Well it's because it wants to make sure that its lower bound
这是因为它希望确保其下界

441
00:24:20,659 --> 00:24:22,259
is always less than its upper bound,
总是小于其上界,

442
00:24:23,763 --> 00:24:25,529
I think on the other slide, I said it was start index and
我想在另一张幻灯片,我说这是指数和开始

443
00:24:25,597 --> 00:24:28,698
end index, Which is actually not range, the range struct,
结束指数不是范围、结构、范围

444
00:24:28,767 --> 00:24:31,935
that's countable range, and those kind of things have
可数的范围,这些事情

445
00:24:32,004 --> 00:24:36,540
that, You rarely use just a straight range,
你很少使用只是一个连续范围,

446
00:24:36,609 --> 00:24:38,241
You're almost always using the countable range,
你几乎总是使用可数的范围,

447
00:24:38,310 --> 00:24:41,645
or closed countable range, or one of those, But anyway, so
或关闭可数范围,或其中的一个,但无论如何,所以

448
00:24:41,714 --> 00:24:45,081
that's why it wants the type that it can be generic for
这就是为什么它希望它可以通用的类型

449
00:24:45,150 --> 00:24:46,717
to be Comparable, So
类似的,所以

450
00:24:46,786 --> 00:24:50,220
being able to restrict this generic types by some protocol
能够限制这个泛型类型的协议

451
00:24:50,288 --> 00:24:54,558
is really super powerful, Okay, because it allows you to
是非常强大的,因为它允许您

452
00:24:54,627 --> 00:24:59,362
build much a more wide variety of generic data structures,
构建一个更广泛的通用的数据结构,

453
00:24:59,431 --> 00:25:00,297
Because you can make it so
因为你可以让它如此

454
00:25:00,366 --> 00:25:02,833
that they have to implement certain things to work,
他们必须实现某些事情,

455
00:25:02,901 --> 00:25:07,538
All right, Now, also, you can use
现在,您可以使用

456
00:25:07,606 --> 00:25:11,875
generics to declare protocols, So you can have protocols,
仿制药申报协议,所以你可以有协议,

457
00:25:11,944 --> 00:25:16,947
where the methods in vars might be a generic type, So,
在var的方法可能是一个泛型类型,因此,

458
00:25:17,016 --> 00:25:18,849
now you can have these protocols kind of meta,
现在你可以有这些协议元,

459
00:25:18,917 --> 00:25:21,919
But you can have these protocols that can be
但是你可以拥有这些协议,可以

460
00:25:21,987 --> 00:25:26,056
describing behavior that can work on generic types,
描述行为,可以工作在泛型类型

461
00:25:26,125 --> 00:25:28,625
Or maybe work on generic types that implement certain
或者工作上实现特定的泛型类型

462
00:25:28,694 --> 00:25:32,496
protocols, Now, this is probably hard for you to
协议,这可能是你很难

463
00:25:32,564 --> 00:25:35,899
imagine where this could go, but it really can go,
想象这可能去的地方,但它真的可以,

464
00:25:35,968 --> 00:25:39,036
Okay, so you're really opening up a lot of power here
好的,所以你真的开放大量的电力

465
00:25:39,105 --> 00:25:42,973
by adding generics, And constraining these generics
通过添加泛型,以及这些泛型约束

466
00:25:43,041 --> 00:25:47,144
using protocols, Again remember that you kind
再次使用协议,记住你

467
00:25:47,213 --> 00:25:49,913
of get multiple inheritance with protocols, And I'm
有多重继承协议,我

468
00:25:49,982 --> 00:25:51,948
going to show you an example here with CountableRange,
与CountableRange将向你们展示一个例子,

469
00:25:52,017 --> 00:25:55,852
So CountableRange is the type of struct you get if you use
所以CountableRange结构得到如果你使用的类型

470
00:25:55,921 --> 00:26:00,490
3,,<5, Remember I showed you that, Like if you're doing a 4
3、< 5,记住我给你,就像如果你做一个4

471
00:26:00,559 --> 00:26:03,226
in and you want to come forward to 5 non inclusive,
在你想要上前5非包容,

472
00:26:03,295 --> 00:26:05,862
use three dot dot five you get this countable range,
使用三点点五你得到这个可数范围,

473
00:26:05,931 --> 00:26:08,365
Well, le's think what CountableRange is,
勒的认为CountableRange是什么,

474
00:26:08,434 --> 00:26:11,434
CountableRange is a struct that implements a ton
CountableRange实现一吨是一个结构体

475
00:26:11,503 --> 00:26:13,070
of protocols,
的协议,

476
00:26:13,138 --> 00:26:14,771
Here's some of the interesting ones it implements,
这里有一些有趣的它实现,

477
00:26:14,840 --> 00:26:19,142
IndexableBase which gives it start start index and end
IndexableBase使它开始开始指数和结束

478
00:26:19,211 --> 00:26:22,012
index which I showed you on that slide kind of erroneously
指数,我给你们看,幻灯片上的错误

479
00:26:22,081 --> 00:26:26,416
as Range, it also implements this method index
作为范围,它还实现了这个方法指数

480
00:26:26,485 --> 00:26:29,019
after, So, a range can move forward cuz you can always
之后,一系列可以因为你总是可以前进

481
00:26:29,087 --> 00:26:31,955
find the next index, And it also does subscripting,
寻找下一个指数,它也加下标,

482
00:26:32,023 --> 00:26:35,459
so you can take a range and get subscript sub three, and
所以你可以设定一个范围,让下标子3和

483
00:26:35,528 --> 00:26:38,795
it will get you the fourth one in there, Right,
它会让你第四个,对了,

484
00:26:38,864 --> 00:26:41,331
so that protocol's called IndexableBase, Then there's
这协议被称为IndexableBase,还有

485
00:26:41,399 --> 00:26:44,400
another protocol called Indexable, Which actually
另一个协议被称为可转位,实际上

486
00:26:44,469 --> 00:26:48,505
inherits from IndexableBase which has index offsetBy,
继承自IndexableBase offsetBy指数,

487
00:26:48,573 --> 00:26:51,274
So now you can move through the range more than just to
现在你可以穿过不仅仅范围

488
00:26:51,343 --> 00:26:53,944
the next one, you can move farther ahead,
下一个,你可以移动更远的未来,

489
00:26:54,013 --> 00:26:56,780
There's also BidirectionalIndexable,
还有BidirectionalIndexable,

490
00:26:56,849 --> 00:27:00,584
Now you can go backwards, index before, okay, So
现在你可以倒退,索引之前,所以

491
00:27:00,652 --> 00:27:03,253
these things like startIndex, index after, index offset,
这些事情像startIndex,指数后,指数抵消,

492
00:27:03,321 --> 00:27:05,789
index before, these are just methods in these protocols,
索引之前,这些只是这些协议中的方法,

493
00:27:07,226 --> 00:27:10,527
It also implements this very important protocol called
它还实现了这个非常重要的协议

494
00:27:10,596 --> 00:27:14,798
Sequence, And the main method in Sequence is makeIterator,
序列,序列的主要方法是makeIterator,

495
00:27:14,866 --> 00:27:18,068
Which gives back an object that can do the for in thing,
使一个对象,可以做的的事情,

496
00:27:18,137 --> 00:27:20,837
So a Range, that's why Range works with for in,
所以一个范围,这就是为什么使用的范围,

497
00:27:20,906 --> 00:27:24,274
because it implements the Sequence protocol, And
因为它实现了序列协议,

498
00:27:24,343 --> 00:27:26,210
it also implements the Collection protocol,
它还实现了协议集合,

499
00:27:26,278 --> 00:27:28,912
But Collection is primarily just an indexable sequence,
但是收集主要是只是一个可转位序列,

500
00:27:28,980 --> 00:27:31,381
So it implements both those protocols- things that
所以它实现了这两个协议的事情

501
00:27:31,450 --> 00:27:34,250
are collections implement both those protocols,
集合实现这两个协议,

502
00:27:34,319 --> 00:27:37,154
So why does Apple go to all the trouble
为什么苹果去所有的麻烦

503
00:27:37,222 --> 00:27:39,523
to take something simple like a CountableRange and
采取一些简单的像CountableRange

504
00:27:39,592 --> 00:27:42,025
make it implement all of these ridiculous protocols?
使其实现这些荒谬的协议吗?

505
00:27:42,094 --> 00:27:46,129
Well, here's why, Because Array also implements all
这是为什么,因为数组还实现了

506
00:27:46,198 --> 00:27:49,799
those protocols and so there's Dictionary and Set and
这些协议有字典和设置

507
00:27:49,868 --> 00:27:53,336
String,UTF16View, The thing that will let you see Unicode
字符串,UTF16View,会让你看到Unicode

508
00:27:53,405 --> 00:27:56,673
characters in the string, All of these things do, So they're
字符的字符串,所有这些事情,所以他们

509
00:27:56,742 --> 00:28:01,278
all sharing the same basic API description of their behavior,
所有共享相同的基本API的描述他们的行为,

510
00:28:01,347 --> 00:28:02,645
Even though they're quite different,
即使他们是完全不同的,

511
00:28:02,714 --> 00:28:05,582
An array is quite different from a range, A set
数组从一系列完全不同,是一个集

512
00:28:05,650 --> 00:28:09,052
is different than an array, And certainly a, character,
数组是不同的,当然,性格,

513
00:28:09,120 --> 00:28:12,322
UTF16View, is different than any of those things,
UTF16View,比任何这些东西是不同的,

514
00:28:12,390 --> 00:28:14,224
They're dictionaries, So these are all different things,
他们的字典,所以这些都是不同的东西,

515
00:28:14,293 --> 00:28:16,994
But they share the behavior of being indexable,
但他们分享的行为可转位,

516
00:28:17,062 --> 00:28:19,362
being a sequence of things, being collections of things,
一系列的事情,被收藏的东西,

517
00:28:19,431 --> 00:28:20,630
they share all that behavior,
他们分享所有的行为,

518
00:28:20,699 --> 00:28:24,101
And so that's described with these protocols and wait,
这就是描述这些协议和等待,

519
00:28:24,169 --> 00:28:27,204
there's more, Because of this thing I told you that
有更多的,因为这事我告诉过你

520
00:28:27,272 --> 00:28:30,773
extensions can be used to add code to a protocol,
扩展可以用来添加代码协议,

521
00:28:30,842 --> 00:28:33,343
okay, Now there's restriction there, of course, because both
好的,现在有限制,当然,因为两个

522
00:28:33,411 --> 00:28:36,746
protocols and extensions can have no storage,
协议和扩展没有存储,

523
00:28:36,815 --> 00:28:38,281
So if you extend a protocol and
所以如果你扩展协议

524
00:28:38,350 --> 00:28:40,250
give it some actual implementation,
给它一些实际的实现,

525
00:28:40,319 --> 00:28:43,020
by implementing some of the methods in the protocol,
通过实现协议的一些方法,

526
00:28:43,088 --> 00:28:46,790
You can only use other methods in the protocol, Or
你只能使用其他方法的协议,或

527
00:28:46,859 --> 00:28:48,558
methods you inherit from other protocols,
方法继承其他协议,

528
00:28:48,627 --> 00:28:50,894
right? You can't use any storage,
对吧?

529
00:28:50,962 --> 00:28:52,362
All you can do is call other methods and vars, But
你所能做的就是调用其他方法和增值,但是

530
00:28:52,430 --> 00:28:55,231
you'd be surprised how much you can do when you do that,
你会很惊讶你能做多少,当你这样做,

531
00:28:55,300 --> 00:28:56,400
And what that allows you to do,
这允许你去做,

532
00:28:56,468 --> 00:29:00,570
in this case, if you consider Sequence, I told you that
在这种情况下,如果你考虑序列,我告诉你

533
00:29:00,639 --> 00:29:02,739
Sequence mostly just makes you that makeIterator thing,
序列大部分只是让你makeIterator的事情,

534
00:29:02,807 --> 00:29:06,076
So, you can for in through the string characters or
所以,你可以在通过字符或字符串

535
00:29:06,144 --> 00:29:10,147
through the array or through the range or whatever, Well,
通过数组或范围之类的,嗯,

536
00:29:10,215 --> 00:29:13,817
if you just implement that one method, Apple has provided
如果你只是实现这一方法,苹果提供了

537
00:29:13,886 --> 00:29:17,253
an extension to the Sequence protocol, That implements two
序列的扩展协议,实现两个

538
00:29:17,322 --> 00:29:19,889
dozen other methods that are based on being able to iterate
其他方法都是基于迭代

539
00:29:19,958 --> 00:29:24,494
through, Like contains, is this thing contained in this
通过包含一样,这是包含在这

540
00:29:24,563 --> 00:29:28,197
Sequence? Or joined by separator, which will take
序列?

541
00:29:28,266 --> 00:29:31,301
each thing in the sequence, turn it into a string, and
序列中的每一件事,把它变成一个字符串,和

542
00:29:31,369 --> 00:29:34,070
join it by whatever separator you say, like a comma, and
加入你说无论分离器,像一个逗号,

543
00:29:34,139 --> 00:29:37,507
give you back a string, Okay? Or min and max,
返回一个字符串,好吗?

544
00:29:37,576 --> 00:29:39,976
What's the minimum thing, or the maximum thing?
最小的事情,还是最大的?

545
00:29:40,045 --> 00:29:40,743
Of course in that case,
当然在这种情况下,

546
00:29:40,812 --> 00:29:43,813
the sequence would have to have what, comparable
序列会有什么可比性

547
00:29:43,882 --> 00:29:47,217
items? You have to be able to compare them, If you're gonna
物品吗?

548
00:29:47,286 --> 00:29:50,954
do min or max, Even those cool functions I told you,
做最小或最大,即使那些很酷的功能我告诉你,

549
00:29:51,023 --> 00:29:53,991
filter and map, remember those? That took a closure and
过滤和地图,还记得这些吗?

550
00:29:54,059 --> 00:29:56,493
you were able to map an array from one thing to another,
你可以地图从一件事到另一个数组,

551
00:29:56,561 --> 00:29:58,361
You can do the same thing with a range, And
与范围,你可以做同样的事情

552
00:29:58,430 --> 00:30:01,798
that code is not in Array, It's in this extension of
这些代码不是数组,它在这个扩展

553
00:30:01,867 --> 00:30:07,137
Sequence, Okay, so now you're actually inheriting
序列,好了,现在你可以继承

554
00:30:07,205 --> 00:30:10,140
true implementation, true functionality, And
真正的实现,真正的功能,

555
00:30:10,209 --> 00:30:13,410
you're multiply inheriting it, okay? And
你将继承它,好吗?

556
00:30:13,478 --> 00:30:15,445
you're doing it in a generic way so
你用它来做一个通用的方法

557
00:30:15,514 --> 00:30:18,815
that the code works on arrays, string characters, etc,,
代码适用于数组,字符串字符,等等,,

558
00:30:18,884 --> 00:30:23,020
equally, Okay, so hopefully, that's given you some feel for
同样,好的,希望给你一些感觉

559
00:30:23,088 --> 00:30:26,356
like whoa, what you could do if you had these protocols?
哇,如果你有这些协议你可以做什么?

560
00:30:26,424 --> 00:30:29,826
If you've designed your API using protocols,
如果你设计的API使用协议,

561
00:30:29,894 --> 00:30:33,229
And then, you could add code like this using extensions,
然后,您可以使用扩展,添加下面这样的代码

562
00:30:33,298 --> 00:30:37,133
You can hopefully see, and use generics especially, you could
希望你能看到,特别是使用泛型,你可以

563
00:30:37,202 --> 00:30:41,471
see how you could reuse a lot of code, Now this approach, I
看看你可以重用代码,现在这种方法,我

564
00:30:41,540 --> 00:30:45,142
actually mentioned it before, This approach of focusing on
其实之前提到的,这种方法的关注

565
00:30:45,210 --> 00:30:47,777
the behavior of things rather than on the storage,
事物的行为而不是存储,

566
00:30:47,846 --> 00:30:54,150
Is leading to a methodology called functional programming,
导致称为函数式编程的方法,

567
00:30:54,219 --> 00:30:56,786
And again, I can't teach you that unfortunately, but
再一次,我不能教你,不幸的是,但是

568
00:30:56,855 --> 00:30:59,556
I want you to know it exists, And maybe you can take
我想让你知道它的存在,也许你可以

569
00:30:59,624 --> 00:31:01,725
a course here where you can learn about it,
当然在这里,你可以了解它,

570
00:31:01,794 --> 00:31:05,128
If you go out to the outside world, self-teach
如果你出去外面的世界,self-teach

571
00:31:05,197 --> 00:31:08,365
yourself if you have to, It's very powerful mechanism for
自己如果有,非常强大的机制

572
00:31:08,433 --> 00:31:10,433
programming, And the protocols and
编程,和协议

573
00:31:10,502 --> 00:31:13,803
generics play right into this, Because protocols and generics
泛型游戏,因为协议和泛型

574
00:31:13,872 --> 00:31:17,240
are all about the behavior of things, not about their
都是关于事物的行为,而不是对他们吗

575
00:31:17,308 --> 00:31:22,178
storage, Okay, all right, That's all I can unfortunately
存储、好了,好了,这就是我可以很不幸

576
00:31:22,247 --> 00:31:24,247
have time to say about the functional programming and
有时间说函数式编程和吗

577
00:31:24,316 --> 00:31:26,750
protocols, And now let's back way up off of
协议,现在我们回来的

578
00:31:26,818 --> 00:31:27,851
advanced protocols and
先进的协议和

579
00:31:27,919 --> 00:31:30,720
start talking about a couple of simple uses of protocols,
开始谈论一些简单的使用协议,

580
00:31:30,788 --> 00:31:33,923
Here's a simple protocol that you could use right now in
这是一个简单的协议,现在您可以使用

581
00:31:33,992 --> 00:31:37,194
your calculator, It's called CustomStringConvertible,
你的计算器,它叫做CustomStringConvertible,

582
00:31:37,262 --> 00:31:41,064
And it only has one thing in the protocol which is a var,
它只有一件事是一个var的协议,

583
00:31:41,133 --> 00:31:44,801
It's a get-only var called description, Looks familiar?
这是一个只有get var称为描述,看起来熟悉吗?

584
00:31:44,870 --> 00:31:48,005
Which is a string, And if you implement this protocol,
这是一个字符串,如果你实现这个协议,

585
00:31:48,073 --> 00:31:50,707
then when you print, if you do the backslash,
当你打印,如果你反斜杠,

586
00:31:50,775 --> 00:31:54,211
parenthesis thing and put your thing inside, It will call
括号里面东西,把你的东西时,它将调用

587
00:31:54,279 --> 00:31:57,681
this description to get the description of it, So right
这个描述的描述,所以正确的

588
00:31:57,749 --> 00:32:02,518
now, if you said, print quote \ ( your CalculatorBrain,
现在,如果你说,印刷报价\(你的计算器大脑

589
00:32:02,587 --> 00:32:06,590
in your view controller, ), it would probably print out some
在你的视图控制器,),它可能会打印一些

590
00:32:06,658 --> 00:32:09,959
hexadecimal number and the word CalculatorBrain, which is
十六进制数和计算器大脑这个词

591
00:32:10,028 --> 00:32:14,264
useless, But if you put colon CustomStringConvertible after
无用的,但如果你把结肠CustomStringConvertible之后

592
00:32:14,332 --> 00:32:18,134
your struct CalculatorBrain, now, when you print it out,
你现在的struct计算器大脑,当你打印出来,

593
00:32:18,203 --> 00:32:21,337
it'll print out the description, In other words,
它会打印出描述,换句话说,

594
00:32:21,406 --> 00:32:24,541
the equation, right, because you implement description
方程,对吧,因为你实现描述

595
00:32:24,609 --> 00:32:27,444
already, I intentionally chose the name description there
已经,我故意选择名称描述

596
00:32:27,513 --> 00:32:29,979
so that you would implement CustomStringConvertible
这样你会实现CustomStringConvertible

597
00:32:30,048 --> 00:32:33,583
automatically, But you have to also say that you implement
自动,但你必须也说你实现

598
00:32:33,651 --> 00:32:35,218
it, You can't just implement description and
它,你不能只是描述和实现

599
00:32:35,286 --> 00:32:37,820
expect it to work, You have to say, yes, and I implement
期望它去上班,你不得不说,是的,我实现

600
00:32:37,889 --> 00:32:40,290
CustomStringConvertible by putting that on there,
CustomStringConvertible把,,

601
00:32:40,359 --> 00:32:42,292
So give that a try, Go get your calculator and
所以给它一试,去把你的计算器和

602
00:32:42,361 --> 00:32:44,327
put this colon CustomStringConvertible, And
把这个冒号CustomStringConvertible,

603
00:32:44,395 --> 00:32:47,230
then, in your view controller somewhere, print out your
然后,在你的视图控制器,打印出你

604
00:32:47,298 --> 00:32:51,834
CalculatorBrain with\(), See what you get, all right?
计算器并用\(),看看你,好吗?

605
00:32:51,903 --> 00:32:56,540
Another really simple use of protocols is delegation, okay?
另一个很简单的使用的协议是代表团,好吗?

606
00:32:56,608 --> 00:32:59,809
And it's really where we've all been leading up to here,
,这是真的,我们都在这里,

607
00:32:59,878 --> 00:33:03,713
in terms of a use case of protocols, This is not gonna
一个用例的协议,这是不会的

608
00:33:03,782 --> 00:33:06,048
use any of the other stuff I was talking about, generics or
使用任何其他的东西我在讲,泛型或

609
00:33:06,117 --> 00:33:07,617
extensions, none of that, okay?
扩展,这些,好吗?

610
00:33:07,686 --> 00:33:10,853
This is just the simplest possible use of protocols,
这只是最简单的使用协议,

611
00:33:10,922 --> 00:33:12,555
although it does use Objective-C protocols
虽然它使用objective - c协议

612
00:33:12,624 --> 00:33:15,925
because a lot of optional methods in these protocols,
因为很多可选的方法在这些协议,

613
00:33:15,994 --> 00:33:18,928
But this is how we're gonna implement this MVC
但这就是我们要实现MVC

614
00:33:18,997 --> 00:33:21,531
thing we talked about, which is blind, structured
我们讨论过,这是盲目的,结构化的

615
00:33:21,600 --> 00:33:24,901
communication, The delegate and the data source, remember
沟通,委托和数据源,记住

616
00:33:24,970 --> 00:33:28,371
that from lecture 2? This is how we're gonna implement it,
从讲座2吗?

617
00:33:28,439 --> 00:33:31,307
we're gonna implement this with protocols, So here's how
我们会实现这个协议,这是如何

618
00:33:31,376 --> 00:33:35,679
it plays out, to use protocols to do that delegation, First,
中,使用协议代表团,首先,

619
00:33:35,747 --> 00:33:39,416
UIView thing, okay, like a ScrollView, for example,
UIView的事情,像一个滚动视图,例如,

620
00:33:39,484 --> 00:33:43,353
or a TableView, which we'll talk about next week,
或视图,我们下周再谈,

621
00:33:43,421 --> 00:33:47,423
It declares a protocol, which has all the will and
它声明一个协议,所有的意志和

622
00:33:47,492 --> 00:33:49,759
should and did methods I was talking about,
应该和我谈论了方法,

623
00:33:49,827 --> 00:33:52,929
So I will scroll to here, or should I allow scrolling in
所以我将滚动到这里,或者我应该允许滚动

624
00:33:52,998 --> 00:33:55,999
this direction? Those kind of methods, it implements
这个方向?

625
00:33:56,068 --> 00:33:58,768
a protocol that just has those methods listed in it,
协议中列出,只是这些方法,

626
00:33:58,837 --> 00:34:00,770
It's gonna be an Objective-C protocol,
它会是一个objective - c协议,

627
00:34:00,839 --> 00:34:03,406
they're almost all gonna be optional, all right? So it
他们几乎所有的可选的,对吧?

628
00:34:03,475 --> 00:34:07,877
just declares that protocol, Then the view adds public API
只是宣布的协议,然后视图添加公共API

629
00:34:07,946 --> 00:34:12,615
to itself, which is a weak property called delegate or
本身,这是一个软弱的属性称为委托或

630
00:34:12,684 --> 00:34:17,621
sometimes data source, And that type is that protocol,
有时数据源,这类协议,

631
00:34:19,224 --> 00:34:22,458
okay? So anything can be assigned to that var,
好吧?

632
00:34:22,527 --> 00:34:27,197
as long as it implements that protocol, The view uses this
只要它实现了协议,使用这个视图

633
00:34:27,266 --> 00:34:29,932
delegate property in itself to get the answer,
委托财产本身得到答案,

634
00:34:30,001 --> 00:34:33,670
should I scroll here, and to tell people, I just did scroll
我应该滚动,并告诉人们,我只是滚动吗

635
00:34:33,739 --> 00:34:36,540
here, okay? It sends those messages to the delegate,
在这里,好吗?

636
00:34:36,608 --> 00:34:38,608
because the delegate implements, optionally,
因为委托实现,可选地,

637
00:34:38,677 --> 00:34:41,077
the methods in that protocol so we can send it to them,
协议的方法,所以我们可以把这个表寄给他们,

638
00:34:41,146 --> 00:34:43,746
If it has no delegate, if the delegate is nil,
如果它没有委托,委托是零,

639
00:34:43,815 --> 00:34:47,116
because this weak delegate property, since it's weak,
因为这个弱委托财产,因为它是弱,

640
00:34:47,185 --> 00:34:51,521
it has to be an optional, All weak properties are optional,
它必须是一个可选的,弱的所有属性都是可选的,

641
00:34:51,590 --> 00:34:53,189
So it could be nil, And if it's nil,
所以它可能是零,如果是零,

642
00:34:53,257 --> 00:34:55,458
then the ScrollView's just not gonna talk to a delegate,
然后滚动视图只是不会跟一个委托,

643
00:34:55,527 --> 00:34:57,828
It's just not gonna ask it any questions or tell it anything,
它只是不会问任何问题或者告诉它,

644
00:34:59,264 --> 00:35:03,166
Now, the controller declares that it implements that
现在,控制器宣称它实现

645
00:35:03,235 --> 00:35:05,201
protocol, That's what it has to say,
协议,它说,

646
00:35:05,270 --> 00:35:08,438
It has to say at the top, you know, if view, class UI view,
它说,你知道,如果视图,用户界面视图类,

647
00:35:08,506 --> 00:35:11,107
class calculator view controller, whatever,
计算器视图控制器类,无论如何,

648
00:35:11,176 --> 00:35:14,411
UIViewController comma UIScrollViewDelegate, So
逗号UIScrollViewDelegate ui

649
00:35:14,479 --> 00:35:18,214
it says, I implement that, Then the controller sets
它说,我实现,那么控制器集

650
00:35:18,283 --> 00:35:23,119
itself as the delegate of the view, which will be legal now
本身的代表观点,现在是合法的

651
00:35:23,188 --> 00:35:25,455
because the controller claims to implement that protocol,
由于控制器实现声称协议,

652
00:35:25,524 --> 00:35:28,024
So it can now be put in a var of type
所以现在可以放在一个var的类型

653
00:35:28,093 --> 00:35:30,260
that protocol, And finally,
那个协议,最后,

654
00:35:30,329 --> 00:35:32,428
the controller implements whatever methods it wants,
控制器实现任何方法,

655
00:35:32,497 --> 00:35:34,630
Since they're probably mostly optional, it can just pick and
因为他们可能是可选的,它可以挑选

656
00:35:34,699 --> 00:35:36,699
choose which ones it wants to,
选择哪一个它想要,

657
00:35:36,768 --> 00:35:40,103
And those did and should methods will now start being
这些了,现在应该方法将开始

658
00:35:40,172 --> 00:35:43,339
sent to it by the ScrollView or whatever, okay?
发送给它的滚动视图等等,好吗?

659
00:35:43,408 --> 00:35:45,107
So now the view's hooked up to the controller,
现在视图的连接到控制器,

660
00:35:45,176 --> 00:35:48,278
The view has no idea who he's talking to, All it knows about
视图不知道在跟谁说话,都知道

661
00:35:48,347 --> 00:35:50,680
this delegate is that it implements those should and
这个委托是它实现了这些应该和

662
00:35:50,749 --> 00:35:52,015
did things, That's all it knows,
做的事情,它知道,

663
00:35:52,084 --> 00:35:54,684
so it's a completely generic and reusable view still,
这是一个完全通用的和可重用的视图,

664
00:35:54,753 --> 00:35:58,221
But it can communicate with the controller, This mechanism
但它可以与控制器通信,这种机制

665
00:35:58,290 --> 00:36:01,524
of delegation, you find it all throughout iOS,
在iOS的代表团,你会发现这一切,

666
00:36:01,593 --> 00:36:05,194
Any complicated iOS object is gonna use delegation when it
任何复杂的iOS对象会使用代表团时

667
00:36:05,263 --> 00:36:07,430
needs to talk back to its controller
需要反馈控制器

668
00:36:07,499 --> 00:36:10,934
in a complicated way, This was all designed, though,
在一个复杂的方式,这是所有设计的,不过,

669
00:36:11,003 --> 00:36:13,770
pre-Swift and pre-closures, things like that,
pre-Swift pre-closures,类似这样的事情,

670
00:36:13,839 --> 00:36:17,006
A lot of times, a closure might be a better solution
很多时候,一个闭包可能是一个更好的解决方案

671
00:36:17,075 --> 00:36:22,145
than delegation, So, delegation- a little bit of,
比代表团,代表团,一点点,

672
00:36:22,213 --> 00:36:26,182
what do you call it, backwards compatibility thing,
你叫它什么,向后兼容性,

673
00:36:26,250 --> 00:36:28,184
But you still gotta know it well if you're gonna do iOS,
但你仍然要知道如果你要做的iOS,

674
00:36:28,253 --> 00:36:32,422
because it's just everywhere in iOS, By the way,
因为它只是在iOS,顺便说一下,

675
00:36:32,490 --> 00:36:35,792
do not use delegation in your homework assignment three,
不要使用在你的作业三个代表团,

676
00:36:35,860 --> 00:36:37,927
I think I might even have made it a required task,
我想我甚至可能使它所需的任务,

677
00:36:37,996 --> 00:36:40,730
You can't do it, do not use delegation, I never
你不能这样做,不使用代表团,我从来没有

678
00:36:40,798 --> 00:36:43,399
teach you anything after the assignment's already,
教你什么任务已经结束后,

679
00:36:43,468 --> 00:36:47,603
you know, started, Delegation's not for
你知道的,开始的时候,代表团并不适合

680
00:36:47,672 --> 00:36:51,140
assignment three, All right, so let's take a quick look at
作业三个,好吧,让我们看看

681
00:36:51,209 --> 00:36:53,909
what this looks like code-wise for ScrollView, First,
这是什么样子在代码级别上滚动视图,首先,

682
00:36:53,978 --> 00:36:56,512
ScrollView's going to have a var called delegate,
滚动视图有一个var叫委托,

683
00:36:56,581 --> 00:36:59,382
It's gonna be of type UIScrollViewDelegate optional
它会UIScrollViewDelegate型可选的

684
00:36:59,451 --> 00:37:02,852
because it's weak, The protocol UIScrollViewDelegate
因为它是弱,协议UIScrollViewDelegate

685
00:37:02,921 --> 00:37:06,356
looks like this, It's got these optional functions,
是这样的,它有这些可选的功能,

686
00:37:06,425 --> 00:37:08,325
like scrollViewDidScroll and
像scrollViewDidScroll和

687
00:37:08,393 --> 00:37:11,327
give me the viewForZooming in the ScrollView,
给我viewForZooming滚动视图,

688
00:37:11,395 --> 00:37:15,297
etc, Then the controller is gonna say, yeah, I implement
等,然后控制器会说,是的,我实现

689
00:37:15,366 --> 00:37:18,734
UIScrollViewDelegate by doing the little or purple or
UIScrollViewDelegate通过小或紫色

690
00:37:18,803 --> 00:37:22,538
blue or whatever code that is, And in viewDidLoad, the view
蓝色或任何代码,在viewDidLoad视图

691
00:37:22,607 --> 00:37:26,075
controller's gonna say, ScrollView's delegate is me,
控制器会说,它的代表是我,

692
00:37:26,144 --> 00:37:28,678
So ScrollView, please send me all those messages, And
所以滚动视图,请寄给我所有这些消息

693
00:37:28,746 --> 00:37:32,281
then it would just implement whichever methods it wants,
然后它就会实现任何方法,

694
00:37:32,350 --> 00:37:35,752
And we'll see this in the demo I'm gonna do today as well,
我们会看到今天的演示中我要做的,

695
00:37:35,821 --> 00:37:37,386
All right, so that's it for delegation,
好了,这就是代表团,

696
00:37:37,455 --> 00:37:42,925
Let's move on now to the first class that uses delegation,
现在让我们来看第一个类使用委托,

697
00:37:42,994 --> 00:37:44,794
it's ScrollView, Before I talk about ScrollView,
滚动视图,在我谈论滚动视图,

698
00:37:44,863 --> 00:37:46,462
I wanna show you a little bit how ScrollView works,
我想给你一点滚动视图是如何工作的,

699
00:37:46,531 --> 00:37:47,930
this ancient video I have,
这个古老的视频我有,

700
00:37:47,999 --> 00:37:50,599
This is like, I don't know, iPhone 1 or something, But
我不知道,这就像iPhone 1之类的,但是

701
00:37:50,668 --> 00:37:52,202
if you look at the way it's scrolling,
如果你看看它的滚动,

702
00:37:52,270 --> 00:37:54,036
it actually is very sophisticated,
它实际上是非常复杂的,

703
00:37:54,105 --> 00:37:56,805
It can have a horizontally scrolling thing,
它可以有一个水平滚动,

704
00:37:56,874 --> 00:37:58,441
like the stock charts, and
像股票图表,

705
00:37:58,510 --> 00:38:01,110
inside of it, have vertically scrolling ScrollView,
它的内部,有垂直滚动滚动视图,

706
00:38:01,179 --> 00:38:03,646
So that's ScrollViews inside ScrollViews, okay?
这是滚动视图内滚动视图?

707
00:38:03,715 --> 00:38:06,483
And ScrollView's smart enough to know whether you're swiping
和它的足够聪明知道你刷

708
00:38:06,551 --> 00:38:11,687
sideways or vertically to make it scroll, Now let's talk
横向或垂直滚动,现在让我们谈谈

709
00:38:11,756 --> 00:38:15,525
about how you put something in a ScrollView so you can scroll
如何把东西放在一个滚动视图,以便您可以滚动

710
00:38:15,593 --> 00:38:19,795
around in it, But you do it by adding subviews to it, So
在,但你通过添加子视图,所以

711
00:38:19,864 --> 00:38:22,698
let's review how we add subviews to a normal view, So
让我们回顾一下我们如何添加子视图正常视图,所以

712
00:38:22,767 --> 00:38:26,002
I create a view, like a logo view, And I set its frame,
我创建一个视图,就像一个标志来看,我设置它的框架,

713
00:38:26,071 --> 00:38:28,203
which is where it's gonna be in its superview,
这就是它会在它的父视图,

714
00:38:28,272 --> 00:38:30,940
And then I just add it to its superview, So here, I'm saying
然后我将它添加到它的父视图,这里,我说

715
00:38:31,009 --> 00:38:34,043
view,addSubview(logo) view is probably the top-level view
看来,addSubview(商标)视图可能是顶层视图

716
00:38:34,112 --> 00:38:37,213
in my view controller, Or we know that there's a var called
在我看来控制器,或者我们知道有一个var

717
00:38:37,282 --> 00:38:40,883
view for that, So a ScrollView is similar, But
视图,因此滚动视图是相似的,但是

718
00:38:40,952 --> 00:38:44,153
before you're doing all that, you're doing a very important
之前你做的这一切,你做的一个非常重要的

719
00:38:44,221 --> 00:38:48,124
step, which is to set the contentSize of the scrollView,
步,设置contentSize滚动视图,

720
00:38:48,192 --> 00:38:51,427
So this is a var contentSize, It's a CGSize,
这是一个var contentSize,CGSize,

721
00:38:51,496 --> 00:38:54,230
And it's gonna be how big a space you're going to be
它会是你要多大的空间

722
00:38:54,299 --> 00:38:56,932
scrolling over, So you've gotta set that first, It's
滚动,所以你得第一,

723
00:38:57,001 --> 00:38:59,669
very important to set that first, But then, after that,
非常重要,首先,然后,之后,

724
00:38:59,738 --> 00:39:02,705
you just addSubview, just like you did before,
你只是addSubview,就像以前一样,

725
00:39:02,774 --> 00:39:07,777
So here, I added the, this logo view at 2700 across and
所以在这里,我添加了,2700,这个标志视图

726
00:39:07,846 --> 00:39:12,449
50 down, And that's it, so now the ScrollView is
50了,就是这样,所以现在滚动视图

727
00:39:12,517 --> 00:39:15,418
going to scroll around, Here, I added another one,
要滚动,在这里,我添加了另一个,

728
00:39:15,486 --> 00:39:17,987
Let's add two views, okay, we got two views in there, And
让我们添加两个观点,好的,我们有两种观点,

729
00:39:18,056 --> 00:39:21,490
now the ScrollView is just going to scroll around
现在,滚动视图滚动

730
00:39:21,559 --> 00:39:24,293
on this content area, You see, it's just scrolling around,
在这个内容区域,你看,这只是滚动,

731
00:39:24,362 --> 00:39:27,229
In fact, you'll even see the white of the content area
事实上,你甚至可以看到白色的内容区域

732
00:39:27,298 --> 00:39:30,733
while you're scrolling around to do that, Now, of course,
当你在滚动,现在,当然,

733
00:39:30,802 --> 00:39:33,870
you can reposition the views, Let's put this big
你可以重新定位观点,让我们把这个大

734
00:39:33,938 --> 00:39:35,538
aerial view up in the corner, And
角落里的鸟瞰图,

735
00:39:35,606 --> 00:39:38,207
then let's put the Stanford logo so that it overlaps it,
然后我们把斯坦福大学的标志,重叠,

736
00:39:38,276 --> 00:39:40,777
And then we can always change our contentSize any time
然后我们可以改变我们的contentSize任何时间

737
00:39:40,845 --> 00:39:44,113
we want to not have any extra space, right,
我们希望没有任何额外的空间,对吧,

738
00:39:44,182 --> 00:39:47,317
and contain the whole thing, So if we do that, then,
包含整件事情,如果我们这样做,然后,

739
00:39:47,385 --> 00:39:50,720
when we're scrolling around, we're not seeing
当我们四处滚动,我们没有看到

740
00:39:50,789 --> 00:39:55,024
the white background there, So that's how ScrollView works,
白色背景,这就是滚动视图是如何工作的,

741
00:39:55,093 --> 00:39:57,693
couldn't be simpler, It's all about that content size,
不能简单,都是关于内容的大小,

742
00:39:57,762 --> 00:39:59,595
If you forget to set the content size,
如果你忘了设置内容大小,

743
00:39:59,664 --> 00:40:03,533
scroll view will not work, If you remember nothing else from
滚动视图不会工作,如果你还记得什么

744
00:40:03,601 --> 00:40:07,170
this lecture, remember that, Once it's scrolling around,
这节课,记住,一旦它滚动,

745
00:40:07,239 --> 00:40:10,239
you can find out information about where it is,
你可以找到有关它的信息,

746
00:40:10,308 --> 00:40:12,041
You can find out the upper left corner for
你可以找到的左上角

747
00:40:12,109 --> 00:40:15,412
example of where the scroll view is, Using scrollView's
滚动视图的例子,使用它的

748
00:40:15,480 --> 00:40:18,480
contentOffset point, it'll tell you the x and
内容偏移一点,它会告诉你x和

749
00:40:18,549 --> 00:40:21,484
y of the upper left corner of where the thing is, You could
y的左上角,事情是这样的,你可以

750
00:40:21,552 --> 00:40:25,554
also just say, where is the rectangle that is currently
也只是说,目前的矩形

751
00:40:25,623 --> 00:40:29,826
showing the scrollView, where is that showing in the view
显示滚动视图,显示在视图中

752
00:40:29,894 --> 00:40:33,596
behind that like aerial view of Stanford? But to do that,
背后的俯瞰斯坦福大学吗?

753
00:40:33,665 --> 00:40:36,432
don't forget that those are different coordinate systems,
别忘了,这些都是不同的坐标系统,

754
00:40:36,501 --> 00:40:37,100
They're different views so
他们不同的观点

755
00:40:37,169 --> 00:40:38,101
they have different coordinate systems,
他们有不同的坐标系统,

756
00:40:38,169 --> 00:40:40,670
So you have to convert, all right,
所以你必须转换,

757
00:40:40,739 --> 00:40:43,606
You're gonna convert the scrollView's bounds, right,
你会把它的边界,对吧,

758
00:40:43,675 --> 00:40:44,440
the scrollView's bounds,
它的边界,

759
00:40:44,509 --> 00:40:46,943
that's in the scrollView's coordinate system, You're
在滚动视图的坐标系统,你

760
00:40:47,011 --> 00:40:49,579
gonna convert that to the coordinate system of the view
将它转换为视图的坐标系统

761
00:40:49,648 --> 00:40:53,749
like aerial, See, I'm doing aerial,convert up there,
像天线一样,看,我在做空中,转换,

762
00:40:53,818 --> 00:40:56,452
converting that rectangle, Now why are those rectangles
将矩形,现在为什么这些矩形

763
00:40:56,521 --> 00:40:58,554
not the same? Well, a lot of reasons,
不一样的吗?

764
00:40:58,623 --> 00:41:01,324
One, you're panning around so it's always changing,
一个,你浏览所以总是改变,

765
00:41:01,392 --> 00:41:04,360
Two, you might be zoomed, so it might be quite different,
2、你可能会放大,所以这可能是完全不同的,

766
00:41:04,428 --> 00:41:07,262
If you're zoomed in on that scrollView than that little
如果你放大比那个小滚动视图

767
00:41:07,331 --> 00:41:10,299
rectangle might represent a huge piece of aerial or it
矩形或者它可能代表一块巨大的天线

768
00:41:10,368 --> 00:41:13,603
might represent a tiny, little piece of aerial, Who knows,
可能代表一个小型天线,谁知道呢,

769
00:41:13,672 --> 00:41:14,837
So you're gonna use this method we already saw,
所以你要用这个方法我们已经看到,

770
00:41:14,906 --> 00:41:18,374
We saw it when we were doing the drawing example,
我们看到它,当我们在做图的例子中,

771
00:41:18,443 --> 00:41:21,944
I converted center from my super view down to my view
我从超视图转换中心我的观点

772
00:41:22,013 --> 00:41:25,148
here, I'm just converting the bound to the scrollView, From
在这里,我只是将绑定到滚动视图,

773
00:41:25,216 --> 00:41:27,916
the scrollView to whatever view there that I'm interested
滚动视图的任何观点,我很感兴趣

774
00:41:27,985 --> 00:41:33,489
in, All right, Now,
好了,现在,

775
00:41:33,558 --> 00:41:36,359
how do we create one of these things? Very straightforward,
我们如何创建一个这些东西?

776
00:41:36,428 --> 00:41:41,297
We drag it out of the utilities area in storyboard,
我们拖出来公用事业领域的故事板,

777
00:41:41,365 --> 00:41:44,299
It's just a view so you can do UIView, scrollView frame
它只是一个视图,这样你就可以做UIView,滚动视图框架

778
00:41:44,368 --> 00:41:47,503
if you want, but 99% of the time we're pulling it out,
如果你愿意,但是99%的时间我们拉出来,

779
00:41:47,572 --> 00:41:49,572
You can also pick a view that's already in your
你也可以选择一个已经在你的视图

780
00:41:49,640 --> 00:41:53,676
storyboard and go up to Embed and say Embed In -> Scroll
故事板和去嵌入,嵌入在- >滚动

781
00:41:53,745 --> 00:41:55,211
View, And it'll put it inside the scrollView, Okay, so
视图,它就会滚动视图内,所以

782
00:41:55,279 --> 00:42:00,149
that's another way to do that, Then you just add whatever
这是另一个方法,那么你只需要添加

783
00:42:00,218 --> 00:42:02,918
your too big view is, The view you wanna scroll around in,
你太大视图,视图你想滚动,

784
00:42:02,987 --> 00:42:04,453
You just add it as a sub view of the scrollView, But
你只是把它作为一个滚动视图的子视图,但是

785
00:42:04,522 --> 00:42:07,524
of course, you're not gonna forget to set the contentSize,
当然,你不会忘了设置contentSize,

786
00:42:08,960 --> 00:42:11,861
Okay? And that's it, it's really quite simple to use,
好吧?

787
00:42:11,930 --> 00:42:15,264
And you can scroll around in there programmatically,
你可以滚动以编程方式,

788
00:42:15,333 --> 00:42:18,367
obviously, the user's gonna have their touch,
显然,用户会有联系,

789
00:42:18,436 --> 00:42:20,636
And they can just pan around,
他们可以锅,

790
00:42:20,705 --> 00:42:23,906
but you can do it too by saying scrollRectToVisible,
但它也可以通过scrollRectToVisible说,

791
00:42:23,975 --> 00:42:26,375
and it'll take a rectangle and make it
和需要一个矩形

792
00:42:26,444 --> 00:42:29,211
hopefully entirely fit on screen, It'll do the minimum
希望完全适合屏幕,它要做的最小值

793
00:42:29,280 --> 00:42:31,847
amount of scrolling necessary to get that rectangle,
必要数量的滚动矩形,

794
00:42:31,916 --> 00:42:35,818
on screen, You can do a lot of other things in scrollView,
在屏幕上,你可以做很多其他的事情在滚动视图,

795
00:42:35,887 --> 00:42:38,554
I don't have time to talk about like controlling
我没有时间谈论喜欢控制

796
00:42:38,623 --> 00:42:41,857
that behavior where it only scrolls vertically or
这种行为只有垂直滚动

797
00:42:41,926 --> 00:42:44,994
horizontally and it'll kind of on first motion it'll figure
水平,它会在第一次运动图

798
00:42:45,063 --> 00:42:48,530
out which one you mean and do that, You can flash
你指的是哪一个,这样做,你可以闪光

799
00:42:48,599 --> 00:42:53,168
the scroll indicators when the thing appears on screen,
滚动指标当事情出现在屏幕上,

800
00:42:53,237 --> 00:42:57,240
You can also offset the actual content that you're scrolling
你也可以抵消你滚动的实际内容

801
00:42:57,308 --> 00:42:58,808
over by a little bit,
一点,

802
00:42:58,877 --> 00:43:01,043
This happens a lot in navigation controllers,
这经常发生在导航控制器,

803
00:43:01,112 --> 00:43:03,946
Sometimes the bar at the top, which is semi-opaque, or
有时顶部的酒吧,半透明,或

804
00:43:04,015 --> 00:43:07,049
semi-transparent, is not transparent enough for
半透明的,不够透明

805
00:43:07,118 --> 00:43:09,819
the application of the, whatever you're looking at in
的应用,无论你看

806
00:43:09,887 --> 00:43:12,421
your scroll view, So you'll offset it a little bit,
你滚动视图,所以你会抵消一下,

807
00:43:12,490 --> 00:43:15,825
the content you'll offset by that height of the, navigation
的内容你就会抵消,高度,导航

808
00:43:15,893 --> 00:43:18,394
draw, So there's a whole bunch of stuff in there I can't
画,所以有很多东西我不能

809
00:43:18,462 --> 00:43:22,564
really talk about, Another big piece of this is zooming,
真的谈,另外一个大的缩放,

810
00:43:22,633 --> 00:43:25,001
So, we've talked about panning around in the scroll view but
所以,我们谈到了平移在滚动视图

811
00:43:25,070 --> 00:43:27,403
you can also use your pinching to zoom in and
你也可以使用进行缩放

812
00:43:27,472 --> 00:43:32,007
out, So zooming in and out, the way that works,
所以放大和缩小,作品的方式,

813
00:43:32,076 --> 00:43:35,611
all UIViews have a property called their transform,
所有ui视图有一个属性称为他们的变换,

814
00:43:35,680 --> 00:43:40,316
It's an affine transform which means it has translate, scale,
这是一个仿射变换这意味着它有翻译,,

815
00:43:40,385 --> 00:43:44,253
and rotate, And when you pinch on a view,
和旋转,当你捏一个视图,

816
00:43:44,321 --> 00:43:47,490
all it's doing is affecting the scale of its transform,
这是做的一切都是影响其变换,

817
00:43:47,559 --> 00:43:51,060
does nothing else, Now that for most views, for
没有别的,现在大多数的观点,对吗

818
00:43:51,129 --> 00:43:53,395
all views, that's going to scale the bits up, So
所有视图,将部分,规模

819
00:43:53,464 --> 00:43:56,265
if you zoomed in really big, you'd have really big pixels,
如果你放大很大,你会有非常大的像素,

820
00:43:56,334 --> 00:43:59,869
It would look really grainy, But if the view wants to,
它看起来很模糊,但如果想,

821
00:43:59,938 --> 00:44:03,172
it can make it look really good after the zooming is
它可以让它看起来很好的在缩放

822
00:44:03,241 --> 00:44:07,710
done, for example, UIImageView does that, If you're zooming
完成了,例如,UIImageView呢,如果你缩放

823
00:44:07,779 --> 00:44:11,647
in on a UI image and its got more bits of resolution, it'll
在UI中形象和其有更多的分辨率,它会

824
00:44:11,716 --> 00:44:14,816
show them to you as you zoom in, and you could do that, for
给你放大,你可以这样做,

825
00:44:14,885 --> 00:44:18,020
example, with your calculator, If you had your calculator in
与你的计算器,如果你有计算器

826
00:44:18,089 --> 00:44:19,421
a scroll view, which you're not going to,
滚动视图,你不会,

827
00:44:19,490 --> 00:44:22,859
But if you did, if you had the graph part of it, you could,
但如果你做了,如果你有图的一部分,你可以,

828
00:44:22,927 --> 00:44:25,561
when it pinched in, when it was done pinching, you could
当它了,做的时候捏,你可以

829
00:44:25,630 --> 00:44:29,365
re-draw the graph to give it nice smooth curves, right, so
重新绘制图形给它平滑曲线,所以

830
00:44:29,434 --> 00:44:32,301
it wouldn't be all pixelated, All right,
它不会是所有像素化,

831
00:44:32,370 --> 00:44:35,371
I'll show you how to do that in the next slide, So,
我将向您展示如何做下一张幻灯片,所以,

832
00:44:35,440 --> 00:44:38,774
two things about zooming in a scroll view though that you
两个事情缩放滚动视图不过你

833
00:44:38,843 --> 00:44:41,310
have to know, One is you have to set the minimum and
要知道,一个是你必须设置最小和

834
00:44:41,379 --> 00:44:44,880
maximum zoom scale, So that's how far you'll zoom in, and
最大缩放尺度,所以你会放大,多远

835
00:44:44,949 --> 00:44:47,049
how far you're allowed to zoom out, And
你可以缩小多远,

836
00:44:47,118 --> 00:44:51,754
by default these are 1,0 and 1,0, meaning no zooming in and
默认情况下这些都是1,0和1,0,没有放大和意义

837
00:44:51,823 --> 00:44:55,324
no zooming out, So you have to set these to something, So
没有放大,所以你必须设置这些东西,所以

838
00:44:55,393 --> 00:44:58,027
if you set the minimum zoom scale to 0,5,
如果你将最小缩放尺度设置为0,5,

839
00:44:58,096 --> 00:45:01,030
means you'll zoom down to half its normal size,
意味着你会放大到正常大小的一半,

840
00:45:01,099 --> 00:45:02,597
And if you set the maximum zoom scale to 2,0 it means
如果你设置最大缩放尺度为2,这意味着0

841
00:45:02,666 --> 00:45:05,034
you're gonna zoom out to twice its normal size, All right, so
你会缩小到原来的两倍,所以

842
00:45:05,103 --> 00:45:08,838
you can decide how much you want to let your users zoom in
你可以决定你想让你的用户放大

843
00:45:08,906 --> 00:45:13,408
and out, The other piece is you need a delegate method,
,另一件是你需要一个委托方法,

844
00:45:13,477 --> 00:45:16,278
Zooming does not work without delegation, And so
缩放不工作没有代表团等

845
00:45:16,347 --> 00:45:18,881
you have to implement this delegate method called
你必须实现这个委托方法调用

846
00:45:18,949 --> 00:45:21,950
viewForZooming(in scrollView) and all you have to do is
viewForZooming(滚动视图)和所有你要做的就是

847
00:45:22,019 --> 00:45:24,253
return the view that's in the scroll view,
返回在滚动视图,视图

848
00:45:24,322 --> 00:45:28,056
one of the subviews, the one that you're going to zoom on,
的子视图,你要放大,

849
00:45:28,125 --> 00:45:33,162
And this is the one whose transform transformed,
这是一个转换的变换,

850
00:45:33,231 --> 00:45:38,400
Of course you can zoom programmatically as well,
当然,你也可以通过编程方式放大,

851
00:45:38,469 --> 00:45:39,835
It's not just pinching to zoom,
这不仅仅是进行缩放,

852
00:45:39,904 --> 00:45:42,438
You can set the zoom scale, Here's some examples on how to
你可以在这里设置缩放尺度,对如何的一些例子

853
00:45:42,507 --> 00:45:45,574
do that, So here I set my zoom scale to 1,2, now I'm gonna
这样做,这里我把缩放比例为1,2,现在我要吗

854
00:45:45,643 --> 00:45:48,810
set it to 1,0, See it goes back to normal size,
将其设置为1,0,看到它回到正常大小,

855
00:45:48,879 --> 00:45:53,449
1,2 I'm zoomed in 20% okay or same thing with rect, If I put
1、2我放大20%好或用矩形同样的事情,如果我把

856
00:45:53,518 --> 00:45:56,052
a little rectangle right there and I say zoom to that rect
一个小矩形,我说变焦矩形

857
00:45:56,120 --> 00:45:58,354
it's gonna zoom that rect out as big as it can be,
它会放大,矩形尽可能大,

858
00:45:58,422 --> 00:46:00,723
Or if I had a rectangle that was bigger and
如果我有一个更大的矩形

859
00:46:00,792 --> 00:46:03,025
I said zoom to rect it will zoom it down so
我说变焦矩形将变焦下来

860
00:46:03,094 --> 00:46:05,327
the rectangle fits, Okay it's going to do the minimum
矩形,好的要做最低

861
00:46:05,396 --> 00:46:10,599
zooming to get that rectangle on screen,
缩放得到矩形在屏幕上,

862
00:46:10,668 --> 00:46:12,835
There's lot of of other delegate methods,
还有很多其他的委托方法,

863
00:46:12,903 --> 00:46:15,604
at least a dozen more besides that view for zooming and
至少十几个更多的缩放和除此之外的观点

864
00:46:15,673 --> 00:46:18,341
scrollView, For example, if you wanted to do the thing
滚动视图,例如,如果你想做的事情

865
00:46:18,409 --> 00:46:21,077
where you zoomed in and then you wanted to re-draw
你先放大,然后你想吗

866
00:46:21,145 --> 00:46:22,978
to get rid of the pixelation, you would implement
的像素,你会实现

867
00:46:23,047 --> 00:46:27,983
scrollViewDidEndZooming with view atScale, And
与视图atScale scrollViewDidEndZooming,

868
00:46:28,052 --> 00:46:30,452
this will tell you when the pinching has stopped and
这将告诉你什么时候捏已经停止

869
00:46:30,521 --> 00:46:33,089
now you can re-draw, Of course if you re-draw by
现在你可以重新绘制,当然如果你重新绘制

870
00:46:33,157 --> 00:46:35,657
the way at the new scale, you're gonna reset
在新规模的方式,你会重置

871
00:46:35,726 --> 00:46:38,060
your transform, the view's transform,
你的改变,视图的变换,

872
00:46:38,129 --> 00:46:41,329
back to the identity transform, Otherwise, you'll
身份转换,否则,你会

873
00:46:41,398 --> 00:46:44,433
both drawing it scaled and it will be scaled because you're
都画它了,因为你

874
00:46:44,502 --> 00:46:47,202
affine transform is well pixelated too, So, you don't
仿射变换是像素化了,所以,你不喜欢

875
00:46:47,271 --> 00:46:48,871
want both of those things going on at the same time,
希望这些事情同时,

876
00:46:48,939 --> 00:46:52,441
So you reset, you would reset your transform here,
所以你重置,重置你的变换,

877
00:46:54,311 --> 00:46:58,181
Okay, so the rest of this is going to be demo, so
好的,所以这将是演示,剩下的

878
00:46:58,249 --> 00:47:00,916
let me just talk about what's coming up here,
让我谈谈即将发生的事,

879
00:47:00,985 --> 00:47:04,320
The demo I'm gonna do is a Scroll View Demo, obviously,
演示我要做的是一个滚动视图演示,显然,

880
00:47:04,388 --> 00:47:05,321
I'm gonna show you how to do that,
我将告诉你如何做到这一点,

881
00:47:05,390 --> 00:47:07,022
I'll show you some other things too, like extensions,
我将向您展示一些其他事情上,比如扩展,

882
00:47:07,091 --> 00:47:09,958
things like that, On Friday we have
周五,我们有

883
00:47:10,027 --> 00:47:13,195
Instruments, Okay, performance testing, Really important if
工具,性能测试非常重要

884
00:47:13,264 --> 00:47:15,630
you want to do the extra credit in Assignment 3,
你想做作业3中的额外学分,

885
00:47:15,699 --> 00:47:16,398
which is a good one,
这是一个好一个,

886
00:47:16,467 --> 00:47:19,068
you have to figure out why your calculator,
你必须弄清楚为什么你的计算器,

887
00:47:19,137 --> 00:47:22,404
graphing thing doesn't perform as well as you'd like,
图形的事情不会执行以及你想,

888
00:47:22,473 --> 00:47:24,974
On Monday, Assignment 3, what you're working on now,
周一,任务3,现在你所从事的工作,

889
00:47:25,043 --> 00:47:27,877
your graphing calculator is due, before lecture, And
你的图形计算器是由于,在讲座之前,和

890
00:47:27,945 --> 00:47:30,112
then the topic on Monday is going to be multi-threading,
然后周一的主题将是多线程,

891
00:47:30,180 --> 00:47:32,047
We're gonna take the demo we're doing today,
我们要把我们今天正在做的演示,

892
00:47:32,116 --> 00:47:33,682
which is going to be very sluggish,
这是非常缓慢,

893
00:47:33,751 --> 00:47:35,551
and we're going to make it perform a lot better using
我们会让它更好用

894
00:47:35,620 --> 00:47:39,722
multi-threading, On Wednesday, we're going to go into
多线程,周三,我们将进入

895
00:47:39,791 --> 00:47:43,792
TableView, really important part of the UIKit,
TableView非常UIKit的重要组成部分,

896
00:47:43,861 --> 00:47:46,061
There will be an assignment, a TableView assignment that goes
将会有一个任务,一个TableView作业,

897
00:47:46,130 --> 00:47:49,498
out on Wednesday, It'll be due the next Wednesday, And
周三,它会由于下周三,

898
00:47:49,567 --> 00:47:51,667
there's no more reading assignments, I can tell from
没有更多的阅读作业,我可以告诉

899
00:47:51,735 --> 00:47:54,770
talking to some of you that you didn't read any of
谈论一些你没读过

900
00:47:54,838 --> 00:47:59,041
them very closely, And you know, I don't quiz you on it,
他们非常密切,你知道,我没有测试你,

901
00:47:59,109 --> 00:48:02,678
I don't test you on it because it's kind of up to you how
我不测试你的它,因为它是你怎么做

902
00:48:02,746 --> 00:48:04,680
much you wanna learn in this class,
你想学习这门课,

903
00:48:04,749 --> 00:48:06,415
It's just one of those things where whatever you put into
这只是其中之一,无论你投入

904
00:48:06,483 --> 00:48:08,250
it is what you get out of it, But
这是你得到的,但是

905
00:48:08,319 --> 00:48:12,888
I really encourage you to at least go through the parts
我真的建议你至少经历的部分

906
00:48:12,957 --> 00:48:15,491
in there that you don't understand, and
在那里,你不懂,

907
00:48:15,560 --> 00:48:18,226
be cognizant of the fact, I don't really understand this,
被认识到的事实,我真的不理解这一点,

908
00:48:18,295 --> 00:48:21,396
Okay, because then when you graduate from this class,
好吧,因为当你从这个类毕业,

909
00:48:21,465 --> 00:48:23,532
which is, you know, you're getting started with iOS in
这是,你知道,你开始使用iOS在吗

910
00:48:23,600 --> 00:48:26,168
this class, When you graduate from it you'll know,
这个类,毕业的时候你就会知道,

911
00:48:26,237 --> 00:48:27,770
okay that's something I gotta go back and
好吧,我得回去

912
00:48:27,838 --> 00:48:30,706
really understand better, All right, okay so
真正理解好,好,好

913
00:48:30,775 --> 00:48:35,343
this demo is going to be, again, fresh start,
这演示将是全新的开始,

914
00:48:35,412 --> 00:48:38,180
So I'm gonna create a new Xcode project in single view
所以我要单视图中创建一个新的Xcode项目

915
00:48:38,249 --> 00:48:40,815
application, I'm gonna call it Cassini,
应用程序,我将称之为“卡西尼”号,

916
00:48:40,884 --> 00:48:44,486
cuz we're gonna do some stuff with the images that came out
因为我们要做一些东西的图片出来了

917
00:48:44,555 --> 00:48:47,823
back from Cassini probe that went off to Saturn,
从卡西尼号土星探测器,去,

918
00:48:47,892 --> 00:48:50,793
And I'm gonna put it in the same place I put all my maps,
我要把它放在同一个地方我把我所有的地图,

919
00:48:50,861 --> 00:48:55,264
home directory Developer, And here it is I'm gonna move
主目录开发人员,这是我要搬家

920
00:48:55,333 --> 00:48:58,600
xcassets and the AppDelegate and the LaunchScreen out
xcassets和在AppDelegate LaunchScreen出来

921
00:48:58,669 --> 00:49:02,571
of the way again, I'm actually not going to move info,plist
再次,我真的不会移动信息,plist

922
00:49:02,639 --> 00:49:07,075
out though, We are going to be looking at that today, So
不过,我们会看看,今天,

923
00:49:07,144 --> 00:49:09,378
we're gonna put these in Supporting Files,
我们要把这些支持文件,

924
00:49:11,148 --> 00:49:13,582
Now, I showed you last time how we can rename
现在,我给你最后一次如何重命名

925
00:49:13,651 --> 00:49:17,553
a ViewController, if it's got like a generic name like this,
ViewController,如果它有像这样的通用名称,

926
00:49:17,621 --> 00:49:19,120
You know, another thing we could do to this
你知道,我们可以做的另一件事

927
00:49:19,189 --> 00:49:22,757
ViewController, is just delete it, So I'm just gonna go here,
ViewController,就删除它,所以我要去这里,

928
00:49:22,826 --> 00:49:26,162
right click on it, and delete it, And remove all references
右键单击它,并删除它,并删除所有引用

929
00:49:26,230 --> 00:49:29,264
to it and I'm gonna go to my storyboard right here, which
,我要去我的故事板,哪个

930
00:49:29,333 --> 00:49:33,068
still has this ViewController, And by the way, if I go look
还有这个ViewController,顺便问一下,如果我去看

931
00:49:33,136 --> 00:49:35,671
at the identity inspector here for that ViewController,
在这里的身份检查员ViewController,

932
00:49:35,740 --> 00:49:37,640
It's still trying to be class ViewController,
它仍在努力是ViewController类,

933
00:49:37,708 --> 00:49:40,876
even though I deleted that from my app, all right,
尽管我从应用程序,删除,好吧,

934
00:49:40,945 --> 00:49:43,345
But I'm gonna fix that by just deleting that from my
但我还是要解决,只需删除从我

935
00:49:43,414 --> 00:49:47,083
storyboard, All right, so now no ViewController anywhere,
故事板,所以现在没有ViewController,

936
00:49:48,419 --> 00:49:51,420
Now, I do need a view controller for my app and
现在,我需要为我的应用程序和一个视图控制器

937
00:49:51,489 --> 00:49:54,022
it's gonna be called ImageViewController,
它会被称为ImageViewController,

938
00:49:54,091 --> 00:49:57,659
It's going to be a generic, reusable MVC for showing
这将是一个通用的、可重用的MVC显示

939
00:49:57,728 --> 00:50:02,598
an image, Whenever I build an MVC, I always wanna see if I
一个图像,每当我构建一个MVC,我总是想看看我

940
00:50:02,666 --> 00:50:05,300
can build a nice generic reusable one because then
可以构建一个通用的可重用因为呢

941
00:50:05,369 --> 00:50:08,537
maybe I can use it in some other app that I'm building,
也许我可以使用它在其他一些应用程序,我是建筑,

942
00:50:08,605 --> 00:50:11,039
And also it gives me the discipline as an API
它也给我纪律作为一个API

943
00:50:11,108 --> 00:50:14,410
designer to think about my public and private API even,
设计师思考我的公共和私有API,

944
00:50:14,478 --> 00:50:17,513
So, let's go ahead and do that, let's create a new file,
所以,让我们继续这样做,让我们创建一个新文件,

945
00:50:17,582 --> 00:50:20,249
Coco Touch Class of course, and we'll call it
可可触摸类当然,我们叫它

946
00:50:20,318 --> 00:50:24,119
ImageViewController, it's a subclass of UIViewController,
ImageViewController,ui的一个子类,

947
00:50:24,188 --> 00:50:25,687
Okay, very carefully here,
好的,小心,

948
00:50:25,756 --> 00:50:28,824
I do not wanna put this at the top level, I wanna put it down
我不希望把这个在顶层,我想放下

949
00:50:28,893 --> 00:50:34,296
in here where the rest of my files are, All right so
在这里我剩下的文件在哪里,好吧

950
00:50:34,364 --> 00:50:36,865
I got my ImageViewController here, I don't need for
我ImageViewController这里,我不需要

951
00:50:36,934 --> 00:50:40,669
now anyway, any of the ViewController lifecycle, I'm
现在不管怎样,任何ViewController生命周期的,我

952
00:50:40,738 --> 00:50:45,206
also not going to segue from this MVC, So I don't need any
也不会从这个MVC segue,所以我不需要任何

953
00:50:45,275 --> 00:50:48,410
of that, I actually I'm going to be segueing to it however,
,我我要segue然而,

954
00:50:48,478 --> 00:50:51,212
because it's a nice reusable image showing things,
因为它是一个可重用的图像显示,

955
00:50:51,281 --> 00:50:55,217
So as you can imagine I might want to be segueing to it any
所以你可以想象我想可能segue任何

956
00:50:55,286 --> 00:50:59,521
time I want to show an image, When I have a new class like
我想显示一个图像,当我有一个新类

957
00:50:59,590 --> 00:51:04,092
this one the first things I like to do is think about what
这一次我想做的第一件事是想想

958
00:51:04,161 --> 00:51:09,598
is my model? Because the model is what this MVC does?
我的模型吗?

959
00:51:09,667 --> 00:51:13,102
So if I can determine what the model is, it'll help me
如果我可以确定模型是什么,它会帮助我

960
00:51:13,171 --> 00:51:16,304
think clearly about what this MVC is all about,
清楚地思考这MVC是什么,

961
00:51:16,373 --> 00:51:18,340
And so this shows an image, so
这显示一个图像

962
00:51:18,409 --> 00:51:22,144
I'm gonna have my model, I'm gonna have it be public so
我要有我的模型,我将把它是公开的

963
00:51:22,213 --> 00:51:26,014
other people can set my model, and I'm going to have it be
别人可以设置我的模型,我将拥有它

964
00:51:26,083 --> 00:51:29,084
a URL of an image, Because what does my MVC does?
一个图像的URL,因为我的MVC什么?

965
00:51:29,153 --> 00:51:31,519
It shows an image, That's what it is, an image shower, So,
它显示一个图像,这是它是什么,一个图像洗澡,所以,

966
00:51:31,588 --> 00:51:36,124
it seems like having a URL of an image would be a good model
似乎有一个图像的URL是一个很好的模型

967
00:51:36,193 --> 00:51:42,130
for it, Now, let's go back to our storyboard here and
,现在,让我们回到我们的故事板在这里

968
00:51:42,199 --> 00:51:44,733
create an MVC for this thing, So I'm just gonna grab
创建一个MVC因这事,所以我要抓住

969
00:51:44,801 --> 00:51:48,671
a View Controller, Drag it out here, Gonna go up to
一个视图控制器,拖出来,要去

970
00:51:48,739 --> 00:51:52,140
the identity inspector, again, and I'm gonna set it to be
身份检查,再一次,我要把它

971
00:51:52,209 --> 00:51:56,512
an ImageViewController, right? Now,
一个ImageViewController,对吧?

972
00:51:56,580 --> 00:52:00,248
I could start building my UI here by dragging more things
我可以开始构建UI这里通过拖放更多东西

973
00:52:00,317 --> 00:52:03,319
in, but I thought it might be valuable a little bit, to show
,但我认为这可能是有价值的,

974
00:52:03,387 --> 00:52:06,121
you how to build some UI in code, It's gonna be simple,
如何构建一些UI代码,它会是简单的,

975
00:52:06,190 --> 00:52:08,690
but we'll build some UI in code, And what my UI here is
但我们会构建一些UI代码,这里我的UI

976
00:52:08,759 --> 00:52:12,994
gonna be at the beginning is just an ImageViewController or
会一开始只是一个ImageViewController或

977
00:52:13,063 --> 00:52:16,765
a UIImageView, right? I'm just going to show an image using
UIImageView ?

978
00:52:16,834 --> 00:52:20,268
UIImageView, this class UIImageView, By the way,
UIImageView,这类UIImageView,顺便说一下,

979
00:52:20,337 --> 00:52:23,973
one thing that's missing here, you can tell by this warning,
一个失踪的事情,你可以告诉这个警告,

980
00:52:24,041 --> 00:52:25,774
Let's click on this warning and see what it says,
让我们点击这个警告,看看它说,

981
00:52:25,842 --> 00:52:28,109
It says ImageViewController is unreachable,
它说ImageViewController是遥不可及的,

982
00:52:28,178 --> 00:52:32,047
Remember that? There's no way to get to this, That's because
还记得吗?

983
00:52:32,116 --> 00:52:35,885
there is no arrow that goes into this anywhere,
没有箭头进入这个地方,

984
00:52:35,953 --> 00:52:37,953
If I were to run this app, it would crash and
如果我运行这个程序,它会崩溃

985
00:52:38,021 --> 00:52:41,423
say, there's no initial View Controller, So,
说,没有初始视图控制器,因此,

986
00:52:41,492 --> 00:52:43,058
how do you set the initial View Controller? Well,
如何设置初始视图控制器?

987
00:52:43,127 --> 00:52:45,494
you pick the View Controller you want to be the initial one
你选择你想要的视图控制器的初始

988
00:52:45,562 --> 00:52:48,831
and you go over here to the Attributes Inspector because
你到这里属性检查器,因为

989
00:52:48,899 --> 00:52:52,200
it's an attribute of that View Controller, And down here
它的一个属性视图控制器,

990
00:52:52,269 --> 00:52:55,337
under View Controller right after its title is, is Initial
在视图控制器对其标题后,是最初的

991
00:52:55,405 --> 00:52:58,807
View Controller, So, I click that and look what happened,
视图控制器,因此,我点击看看发生了什么事,

992
00:52:58,876 --> 00:53:01,343
You got the little entry arrow there, So
你有小箭头,

993
00:53:01,411 --> 00:53:04,012
now when this thing run, it's gonna jump right into this
现在,当运行,它会直接到这个

994
00:53:04,081 --> 00:53:06,882
View Controller, Which is where we wanted to start,
视图控制器,这是我们想要开始,

995
00:53:06,951 --> 00:53:08,617
Eventually we're gonna have other MVCs, but
最终我们会有其他mvc,但是

996
00:53:08,686 --> 00:53:12,454
we'll start with this one, All right,
我们将从这个,好吧,

997
00:53:12,523 --> 00:53:15,790
back to my ImageViewController here, I said I wanted to
回到我ImageViewController这里,我说我想

998
00:53:15,859 --> 00:53:19,261
build its UI in code, I know I need ImageView so
构建UI的代码,我知道我需要ImageView

999
00:53:19,330 --> 00:53:22,798
I'm just gonna start right off with private var imageView:
我要开始马上与私人var imageView:

1000
00:53:22,867 --> 00:53:26,168
is a UIImageView, And in fact, I'm gonna
是一个UIImageView,事实上,我要吗

1001
00:53:26,236 --> 00:53:28,937
create it right here, There's no reason not just to say,
创建它,不仅没有理由说,

1002
00:53:29,006 --> 00:53:32,341
this, it's going to create it with basically CGRect zero,
基本上,它将创建与CGRect中0,

1003
00:53:32,409 --> 00:53:34,976
This is just like saying frame: CGRect,zero,
这就像说框架:CGRect中,零,

1004
00:53:35,045 --> 00:53:38,246
it's exactly the same as doing that, but you know we don't
这样做完全一样,但你知道我们不喜欢

1005
00:53:38,315 --> 00:53:41,350
need that extra code there, So now I've created this image
需要额外的代码,现在我创建了这个形象

1006
00:53:41,418 --> 00:53:44,486
view, it's in the upper left hand corner of whatever its
看来,在无论它的左上角

1007
00:53:44,554 --> 00:53:46,988
super view is, it's not in any super view yet, and
超级的观点是,没有在任何超级看来,

1008
00:53:47,057 --> 00:53:49,057
it's of zero zero size, So it's not that useful, but
00大小的,所以并不是很有用,但是

1009
00:53:49,126 --> 00:53:52,461
of course, as soon as I set an image in it, I will resize it
当然,当我设置一个图片,我将调整它

1010
00:53:52,529 --> 00:53:56,331
to fit that image, And speaking of setting an image
适应这一形象,说到一个图像

1011
00:53:56,400 --> 00:54:00,502
in it, I imagine that when I set an image in my imageView,
在这篇文章中,我想,当我在imageView设置一个图片,

1012
00:54:00,571 --> 00:54:05,773
I'm gonna need to do things like change the the frame,
我需要做事情喜欢改变帧,

1013
00:54:05,842 --> 00:54:07,643
of my imageView, and things like that,
imageView之类的东西,

1014
00:54:07,712 --> 00:54:09,778
So I'm gonna create a little private var here,
所以我要创建一个私有变量,

1015
00:54:09,846 --> 00:54:12,614
called image, which is gonna be a UIImage and
称为图像,这是将是一个用户界面图像

1016
00:54:12,683 --> 00:54:15,650
it's gonna be computed and it's gonna have a get and
它会计算,它会有一个和

1017
00:54:15,719 --> 00:54:18,653
a set so that every time I get or set the image,
一组,这样每次我得到或一组图片,

1018
00:54:18,722 --> 00:54:22,524
I can do other stuff, Okay, this is a really kind of
我可以做其他的东西,好吧,这是一种真正的

1019
00:54:22,593 --> 00:54:26,228
simple clean way to keep, you know to do ancillary things
简单的清洁方法,你知道做辅助的事情

1020
00:54:26,297 --> 00:54:30,466
when you're settings and getting some piece of data,
当你设置和获取一些数据,

1021
00:54:30,534 --> 00:54:33,869
So, for example, when I set this image right here,
所以,例如,当我把这个形象,

1022
00:54:33,937 --> 00:54:38,840
I'm going to set the imageView's image to be equal
我要设置imageView相等的形象

1023
00:54:38,909 --> 00:54:42,444
to that new value of course, That's the primary thing if I
新值,当然,如果我的首要事情

1024
00:54:42,513 --> 00:54:45,780
wanna set my image, I need to set it in my imageView,
想我的形象,我需要把它在我imageView,

1025
00:54:45,849 --> 00:54:49,817
So this var right here is just the image that this imageView
所以这里的var是图像,这种图像

1026
00:54:49,886 --> 00:54:51,920
is showing, But then also like I said,
显示,但后来也就像我说的,

1027
00:54:51,988 --> 00:54:56,959
I want to set my imageView's size to fit this new image,
我想把我imageView的大小以适应这个新形象,

1028
00:54:57,027 --> 00:54:59,695
In fact, there happens to be a method called sizeToFit in
事实上,碰巧有一个方法叫做sizeToFit

1029
00:54:59,763 --> 00:55:02,531
imageView that will cause it to size its frame to
imageView将导致其大小帧

1030
00:55:02,599 --> 00:55:04,032
fit whatever image is inside of it,
适合任何图像内部,

1031
00:55:04,100 --> 00:55:07,669
So it's nice that it had that this nice method for
所以很高兴,这个好方法

1032
00:55:07,738 --> 00:55:10,405
me right here, If I control click on it, you can read it,
我在这里,如果我控制点击它,你可以阅读它,

1033
00:55:10,474 --> 00:55:12,040
See that's what it says,
看到这就是它说,

1034
00:55:12,109 --> 00:55:14,576
And then how about getting it? Well, I'm just gonna return
然后把它怎么样?

1035
00:55:14,645 --> 00:55:19,347
the imageView's image in this case, Okay, so this
imageView的形象在这种情况下,这

1036
00:55:19,416 --> 00:55:22,918
is a var and it's computed, so there's no storage, And
是一个var计算,所以没有存储,然后呢

1037
00:55:22,987 --> 00:55:26,555
actually I'm doing the storage here in the imageView, Now,
实际上我做imageView存储在这里,现在,

1038
00:55:26,623 --> 00:55:29,491
this is giving me an error right here, And the error it's
这是给我一个错误,错误的

1039
00:55:29,560 --> 00:55:32,527
giving me is that I need to unwrap this, Well,
给我,我需要打开这个,好吧,

1040
00:55:32,596 --> 00:55:35,897
that's because this image right here is an optional,
这是因为这里的形象是一个可选的,

1041
00:55:35,966 --> 00:55:38,066
Cuz imageViews don't have to have an image,
因为imageview不需要一个图像,

1042
00:55:38,135 --> 00:55:40,468
they could be empty at the time,
他们可以是空的,

1043
00:55:40,537 --> 00:55:43,471
Now I could unwrap this here, but I'm thinking,
现在我可以打开这里,但我想,

1044
00:55:43,540 --> 00:55:47,709
you know what? I want my UI to be able to be showing no image
你知道吗?

1045
00:55:47,778 --> 00:55:50,345
at some point, That's perfectly reasonable, So
在某种程度上,这是完全合理的

1046
00:55:50,414 --> 00:55:55,283
instead, I'm gonna change this to be optional, So this
相反,我要改变这是可选的,所以这一点

1047
00:55:55,352 --> 00:55:58,987
image var is optional, it can be nil, And when I do that I
形象var是可选的,它可以是零,当我这样做

1048
00:55:59,056 --> 00:56:02,090
wanna make sure that I can say imageView,image = newValue,
要确保我可以说imageView、图像= newValue,

1049
00:56:02,158 --> 00:56:05,727
is that gonna work if newValue is nil? Yes, it is because
是要工作如果newValue nil ?

1050
00:56:05,796 --> 00:56:09,898
we know that this imageView's image is itself an optional,
我们知道这个imageView的形象本身就是一个可选的,

1051
00:56:09,967 --> 00:56:12,434
The imageView might have no image at this time,
imageView可能没有图像,

1052
00:56:12,503 --> 00:56:17,238
It's perfectly fine, Okay, everybody cool, understand
很好,好吧,大家都冷静,理解

1053
00:56:17,307 --> 00:56:20,608
what I did there? It's just a code organization thing,
我在那里做了什么吗?

1054
00:56:20,677 --> 00:56:23,478
it just keeps me from having to, you know,
它只是让我不必,你知道,

1055
00:56:23,547 --> 00:56:26,414
be resizing this fit somewhere else, Or to be putting
调整这个适合其他地方,或者是把

1056
00:56:26,483 --> 00:56:28,950
in some other part of my code that makes no sense, Here it
在其他一些我的部分没有任何意义的代码,在这里

1057
00:56:29,019 --> 00:56:31,086
makes sense because here's where I'm setting my image,
是有意义的,因为在这里我设置我的形象,

1058
00:56:31,154 --> 00:56:36,191
All right, let's now put this imageView into
好了,现在让我们把这个imageView

1059
00:56:36,259 --> 00:56:40,662
our view hierarchy in code, I told you we were gonna do
我们在代码视图层次,我告诉你我们要做的

1060
00:56:40,731 --> 00:56:43,832
our UI with code, Let's do it, We're gonna say viewDidLoad is
我们的UI代码,让我们这样做,我们会说许多

1061
00:56:43,901 --> 00:56:46,501
a good place to do this because we know that by
这样做是因为我们知道的好地方

1062
00:56:46,570 --> 00:56:49,237
the time viewDidLoad happens, we're fully initialized,
viewDidLoad发生的时候,我们完全初始化,

1063
00:56:49,306 --> 00:56:51,005
All our outlets are set,
我们所有的网点设置,

1064
00:56:51,074 --> 00:56:53,709
We've been prepared if someone's segueing to us,
我们已经准备好如果有人segue到我们,

1065
00:56:53,777 --> 00:56:56,878
We're in a really good state right now to add more things
我们现在处于很好的状态来添加更多的事情

1066
00:56:56,947 --> 00:56:59,814
to our UI, And I'm gonna do that just by saying view,
我们的UI,我要做的只是说的观点,

1067
00:56:59,883 --> 00:57:02,951
remember that the special bar in View Controller which is
记住特别的酒吧在视图控制器

1068
00:57:03,019 --> 00:57:08,022
the top level view, AddSubview my imageView,
AddSubview imageView顶级视图,

1069
00:57:08,091 --> 00:57:11,292
okay? So I'm just putting it on there,
好吧?

1070
00:57:11,361 --> 00:57:16,498
It'll either be zero zero size or if someone set my imageURL,
它会是00大小或如果有人把我imageURL,

1071
00:57:16,567 --> 00:57:20,569
then it might be sized to fit or whatever,
那么它可能大小适合,

1072
00:57:20,638 --> 00:57:23,772
Okay, now what happens if someone sets my imageURL?
好了,现在如果有人集我imageURL吗?

1073
00:57:23,841 --> 00:57:27,042
I better set this image, okay? And we know a good way to do
我最好把这个图片,好吗?

1074
00:57:27,110 --> 00:57:30,445
that, right? So our property observer here on our model,
,对吧?

1075
00:57:30,514 --> 00:57:33,715
any time someone sets our model, First I'm gonna
任何时候有人集我们的模型,首先我要

1076
00:57:33,784 --> 00:57:36,751
actually clear out whatever image I have, And then I'm
实际上清除任何图像,然后我

1077
00:57:36,820 --> 00:57:40,455
gonna put the fetching of an image in another method,
将图像的获取在另一种方法,

1078
00:57:40,523 --> 00:57:44,392
Remember that this imageURL might be an Internet URL and
记住,这imageURL可能是一个URL和互联网

1079
00:57:44,461 --> 00:57:47,595
this might be a slow Internet, this might take a long time,
这可能是一个缓慢的互联网,这可能需要很长时间,

1080
00:57:47,664 --> 00:57:51,065
So I'm gonna put it all off into this other function here,
所以我要把它到另一个函数,

1081
00:57:51,134 --> 00:57:53,368
private function, fetchImage,
私有函数,fetchImage,

1082
00:57:53,437 --> 00:57:56,338
And it's gonna do the image fetching, So
要做图像抓取,所以

1083
00:57:56,407 --> 00:57:59,040
how do we fetch an image from a URL, all right?
我们如何从一个URL获取图像,对吧?

1084
00:57:59,109 --> 00:58:01,442
It's actually remarkably easy,
其实非常简单,

1085
00:58:01,511 --> 00:58:03,378
First, I'm gonna make sure that I have a URL to fetch,
首先,我要确保我有一个URL获取,

1086
00:58:03,447 --> 00:58:09,717
I'm gonna say, if I can let a url equal our imageURL,
我想说,如果我可以让一个url imageURL相等,

1087
00:58:09,786 --> 00:58:15,223
that's our model, okay? If I can get my imageURL there,
这是我们的模型?

1088
00:58:15,292 --> 00:58:18,627
then I'm going to let the contents of that URL, so I'm
然后我要让那个URL的内容,所以我

1089
00:58:18,695 --> 00:58:22,063
gonna go out in the Internet and get the contents of it,
要在互联网和它的内容,

1090
00:58:22,132 --> 00:58:28,637
I'm gonna let that equal Data(contentsOf: url),
我要让这等于数据(contentsOf:url),

1091
00:58:28,705 --> 00:58:31,673
So data is that bag of bits, thing I told you about
所以数据袋位,我告诉你

1092
00:58:31,741 --> 00:58:35,110
a few lectures ago, And it has a really cool initializer
几年前的一个讲座,一个很酷的初始值设定项

1093
00:58:35,178 --> 00:58:38,513
which is load up your bag of bits with whatever's at this
与任何比特加载你的包在这吗

1094
00:58:38,582 --> 00:58:43,484
URL on the Internet, Now, this has an error right here, And
URL在互联网上,现在,这里有一个错误

1095
00:58:43,553 --> 00:58:46,688
the error is that this throws,
这个错误抛出,

1096
00:58:48,125 --> 00:58:51,059
because that URL might not point to something, or
因为URL可能不会点东西,或者

1097
00:58:51,128 --> 00:58:55,530
it might be a malformed URL, or it might be a URL to some,
这可能是一个畸形的URL,或者对某些人来说,这可能是一个URL

1098
00:58:55,599 --> 00:58:57,733
you know, bad data or something like that,
你知道,坏数据之类的,

1099
00:58:57,801 --> 00:59:02,070
So, if I look at this error here, it's complaining about
所以,如果我看这个错误,抱怨

1100
00:59:02,138 --> 00:59:06,407
the immutable, But it's also saying this call can throw,
不可变的,但它也是说这叫可以扔,

1101
00:59:06,476 --> 00:59:08,276
but is not marked with a try and
但不显著的尝试

1102
00:59:08,345 --> 00:59:12,614
the error is not handled, Now here, someone's asking me to
错误不是处理,现在,有人问我的

1103
00:59:12,683 --> 00:59:16,818
show this imageURL, I suppose I could catch that error and
显示这个imageURL,错误,我想我能赶上

1104
00:59:16,887 --> 00:59:18,953
like put up an alert saying,
喜欢把一个警告说,

1105
00:59:19,022 --> 00:59:23,524
here was the reason I couldn't show your, display your image,
这是我不能展示你的原因,显示您的图片,

1106
00:59:23,593 --> 00:59:28,730
But I'm just going to instead use try, with a question mark,
但是我要用试,一个问号,

1107
00:59:28,799 --> 00:59:33,468
and if I can't get it, then I just won't show it, Which is
如果我不能得到它,那么我就不会表现出来,这是

1108
00:59:33,536 --> 00:59:38,740
probably not that great but it's good enough for a demo,
可能不是很大,但足够的演示,

1109
00:59:38,809 --> 00:59:42,043
So now as soon as I put try question mark here, this is no
现在只要我试着问号,这是否定的

1110
00:59:42,111 --> 00:59:46,615
longer going to be of type data, It's gonna be what type?
时间类型的数据,它会是什么样?

1111
00:59:48,852 --> 00:59:52,386
Yeah, it's optional, See, it's an optional data because if it
是的,它是可选的,看到的,因为如果它是一个可选的数据

1112
00:59:52,455 --> 00:59:55,990
throws, it can come back nil, All right, since this is
抛出,它可以返回nil,好吧,既然这是

1113
00:59:56,059 --> 01:00:00,762
optional, I'm gonna say if I can let the imageData equal to
可选的,我想说如果我能让imageData等于

1114
01:00:00,831 --> 01:00:05,166
the contents of that URL, Then, now I can create
该URL的内容,那么,现在我可以创建

1115
01:00:05,235 --> 01:00:09,937
the UIImage with that and sure enough my image which is this
的用户界面图像,果然我的形象是这样的

1116
01:00:10,006 --> 01:00:13,541
var right here is gonna be equal to UIImage, And image,
var是会等于界面图像,图像,

1117
01:00:13,610 --> 01:00:16,811
we all know about Image named, but there's also Image,
我们都知道图片命名,但是也有图片,

1118
01:00:16,880 --> 01:00:21,617
with the imageData, So if you have the actual JPEG data or
imageData,所以如果你有实际的JPEG数据或

1119
01:00:21,685 --> 01:00:26,321
whatever, you can make an image out of that,
无论如何,你可以做一个图像,

1120
01:00:26,390 --> 01:00:28,322
And of course, when I do image = UIImage here,
当然,当我做图像=用户界面图像,

1121
01:00:28,391 --> 01:00:30,358
it's gonna go down here to this setter,
它会去下面这个setter,

1122
01:00:30,427 --> 01:00:33,728
It's gonna set that image in the UIImageView,
它会设置UIImageView形象,

1123
01:00:33,796 --> 01:00:36,597
Which we added as a subView and then it's gonna size to
我们作为子视图添加然后它会大小

1124
01:00:36,666 --> 01:00:41,903
fit that imageView and show it to us, all right?
适合imageView和展示给我们,好吗?

1125
01:00:41,972 --> 01:00:44,005
Okay, now, there's only one problem with this,
好了,现在,只有一个问题,

1126
01:00:44,074 --> 01:00:47,843
one thing I don't like about this, Which is well, let's do
有一件事我不喜欢,这是我们做的

1127
01:00:47,911 --> 01:00:50,245
one other thing too, I'm gonna go to viewDidLoad here and
另一件事,我要去viewDidLoad这里

1128
01:00:50,314 --> 01:00:53,748
have it do a demo URL, so we can see,
让它做一个演示网址,所以我们可以看到,

1129
01:00:53,817 --> 01:00:57,085
I'm gonna set my own imageURL equal to and
我要设置自己的imageURL等于

1130
01:00:57,153 --> 01:01:00,655
I have these demo URLs here, Okay, it's this little thing
我这里有这些演示url,这个小东西

1131
01:01:00,724 --> 01:01:06,094
right here, Copy that in, These demo URLs have a for
在这里,复制,在这些演示的url

1132
01:01:06,163 --> 01:01:09,063
example, a little Stanford URL right here and
这里的例子,斯坦福URL

1133
01:01:09,132 --> 01:01:12,467
also some NASA ones which we'll be doing next time,
我们会做一些NASA的下一次,

1134
01:01:12,535 --> 01:01:16,571
But I'm just gonna use this Stanford URL right here, So
但是我要用这个斯坦福URL,所以

1135
01:01:16,639 --> 01:01:22,844
our imageURL is DemoURL,stanford,
我们的imageURL DemoURL,斯坦福大学,

1136
01:01:22,912 --> 01:01:26,014
What I don't like about the way we've written this code
我不喜欢我们写这段代码的方式

1137
01:01:26,082 --> 01:01:29,817
though is here in viewDidLoad, I'm setting my imageURL to
虽然是在中大,我设置imageURL

1138
01:01:29,886 --> 01:01:32,120
stanford, That's gonna go up here and
斯坦福大学,会在这里

1139
01:01:32,188 --> 01:01:34,689
cause this fetchImage to immediately happen,
因为这fetchImage立即发生,

1140
01:01:34,758 --> 01:01:38,993
Which is gonna go out in the Internet and grab this image,
这是要在互联网和抓住这张图片,

1141
01:01:39,062 --> 01:01:40,762
So as soon viewDidLoad happens,
所以就viewDidLoad一切发生的时候,

1142
01:01:40,831 --> 01:01:43,698
man, I'm not on the Internet getting that thing, And
人,我不是在互联网上得到的东西,和

1143
01:01:43,766 --> 01:01:47,568
that's probably not something you wanna do, why wouldn't
这可能不是你想做的事,为什么不

1144
01:01:47,637 --> 01:01:51,139
you, Imagine this MVC which is supposed to be reusable was in
你想象一下MVC,应该是可重用的

1145
01:01:51,208 --> 01:01:57,645
a tab bar, okay, All of the MVCs that are in the tab bar,
标签栏,所有的mvc的标签栏,

1146
01:01:57,714 --> 01:02:02,350
they're all created in viewDidLoaded even before
他们都在viewdidload创建之前

1147
01:02:02,419 --> 01:02:06,721
any of them are shown, So, if I had a tab bar that had five
其中任何一个,所以,如果我有一个五个标签栏

1148
01:02:06,790 --> 01:02:10,191
image view controllers right here, they'd all be off on
图像视图控制器,他们应该都在

1149
01:02:10,259 --> 01:02:13,361
the Internet loading things, I might not click on any of
网络加载的东西,我可能不会点击任何

1150
01:02:13,430 --> 01:02:15,430
them, And I wasted the cellular data
他们,我浪费了蜂窝数据

1151
01:02:15,499 --> 01:02:18,066
plan of my user, all right,
计划我的用户,

1152
01:02:18,134 --> 01:02:22,670
So I really only wanna go fetch this URL when this
所以我真的只想拿来当这这个URL

1153
01:02:22,739 --> 01:02:26,775
view controller is going to appear on screen for sure, So
视图控制器将会出现在屏幕上,所以

1154
01:02:26,843 --> 01:02:29,377
can anyone think of where I would put that instead of in
谁能想到我将,而不是在哪里

1155
01:02:29,446 --> 01:02:34,649
viewDidLoad there? Different view controller lifecycle
viewDidLoad吗?

1156
01:02:34,717 --> 01:02:40,254
method, How about viewWillAppear?
方法,那些怎么样?

1157
01:02:40,323 --> 01:02:45,092
Super,viewWillAppear, So
超级,那些,所以

1158
01:02:45,161 --> 01:02:48,096
I'm going to do the actual fetching in viewWillAppear,
我要做实际的获取进行处理,

1159
01:02:48,164 --> 01:02:52,434
Now, I wanna do this, no? Okay, there's another problem
现在,我想做这个,不是吗?

1160
01:02:52,503 --> 01:02:54,368
though, What if I'm already onscreen and
不过,如果我已经在屏幕上

1161
01:02:54,437 --> 01:02:58,173
someone sets my image? Then I can't do it in viewWillAppear,
有人集我的形象吗?

1162
01:02:58,241 --> 01:03:00,808
I've gotta do it right away, So I can kind of
我必须这么做,所以我可以

1163
01:03:00,877 --> 01:03:03,745
really just want to delay doing it to viewWillAppear
只是想拖延做那些

1164
01:03:03,814 --> 01:03:07,181
if I'm not on screen already, So what I'm gonna do up here
如果我不是在屏幕上,所以我要做什么

1165
01:03:07,250 --> 01:03:11,486
with my imageURL up here is I'm just gonna check and
和我imageURL我要检查和

1166
01:03:11,555 --> 01:03:16,792
see if I'm currently on screen and if I am, so
看看我现在在屏幕上,如果我这样

1167
01:03:16,860 --> 01:03:22,730
I'm gonna say if my view,window is not nil,
我想说如果我看来,窗口不是零,

1168
01:03:22,799 --> 01:03:26,100
then I'm gonna go fetch this image right away, okay, So
然后我要拿这张照片,所以

1169
01:03:26,169 --> 01:03:29,004
view, remember that's the var that's the top level thing,
看来,记住,是顶级的var,

1170
01:03:29,072 --> 01:03:33,441
Window is a var that is in all UI views which tells
窗口是一个var在这告诉所有UI视图

1171
01:03:33,509 --> 01:03:36,644
you the window it's in, And if you don't have a window,
你的窗口,如果你没有一个窗口,

1172
01:03:36,713 --> 01:03:39,614
it means you're not on screen, If you do have a window,
这意味着你不是在屏幕上,如果你有一个窗口,

1173
01:03:39,683 --> 01:03:43,151
you are on screen, So if my view,window is not nil,
你在屏幕上,所以,如果我看来,窗口不是零,

1174
01:03:43,219 --> 01:03:45,152
then I'm on screen, I'm gonna go ahead and fetch,
然后我在屏幕上,我要去取回,

1175
01:03:45,221 --> 01:03:48,056
Otherwise I'm not gonna fetch, And instead down here in
否则我不会卖,而不是这里

1176
01:03:48,125 --> 01:03:53,595
viewWillAppear, I'm gonna say if my image is nil, So
那些,我想说如果我的形象是零,所以

1177
01:03:53,663 --> 01:03:59,434
if I don't have an image yet so far, then go fetch it, So
如果我还没有一个图像到目前为止,然后再取

1178
01:03:59,503 --> 01:04:02,870
you see how the combination of these two things is going to
你看看这两个东西会的结合

1179
01:04:02,939 --> 01:04:06,007
wait to fetch it until view will appear, Unless I'm
等到取回它视图将出现,除非我

1180
01:04:06,076 --> 01:04:09,911
already on screen, then it'll fetch it right away, So
已经在屏幕上,然后马上取回

1181
01:04:09,980 --> 01:04:11,246
that's at least delaying it,
至少推迟,

1182
01:04:11,314 --> 01:04:14,182
So now if I were in tab bars, when I clicked on the tab,
现在如果我在标签栏,当我点击选项卡,

1183
01:04:14,251 --> 01:04:17,351
viewWillAppear would happen and I would load up, And
那些我将负载,会发生

1184
01:04:17,420 --> 01:04:19,954
if I did something that caused the image to change, it would
如果我做了一些导致图像变化

1185
01:04:20,023 --> 01:04:23,425
change right away, cuz I'd be visible, If I went offscreen,
改变,因为我是可见的,如果我在私生活方面,

1186
01:04:23,493 --> 01:04:25,994
then clicked on another tab, my image was changed,
然后点击另一个选项卡,我的形象发生了变化,

1187
01:04:26,063 --> 01:04:27,762
it wouldn't change, When I click on it,
它不会改变,当我点击它,

1188
01:04:27,831 --> 01:04:29,030
then it would go get it from the Internet,
然后它会从互联网上得到它,

1189
01:04:29,099 --> 01:04:32,600
So, I'm minimizing the amount of data plan usage
所以,我计划使用的数据量最小化

1190
01:04:32,669 --> 01:04:35,837
if the person's going, doing it over cell,
如果这个人,做细胞,

1191
01:04:35,905 --> 01:04:38,206
Okay, so, I think we got everything we need here to
好,所以,我认为我们能得到我们想要的一切

1192
01:04:38,274 --> 01:04:42,209
make this work, Let's try running, let's go on an iPhone
做这个工作,让我们尝试跑步,让我们继续iPhone

1193
01:04:42,278 --> 01:04:48,883
7, Hopefully our network works on this laptop here, Okay, so,
7日,希望我们的网络工作这个笔记本,好了,所以,

1194
01:04:48,952 --> 01:04:53,321
it comes up here, and it's not showing, Where is our image?
谈到这里,它不显示,我们的形象在哪里?

1195
01:04:53,389 --> 01:04:56,524
We don't have any image, Well, I think I see something in
我们没有图片,我觉得我看到的东西

1196
01:04:56,592 --> 01:05:01,763
the console down here, Let's see what that says, It says,
控制台下面,让我们看看说,它说,

1197
01:05:01,832 --> 01:05:07,168
App Transport Security has blocked a cleartext HTTP,
应用交通安全已经阻止了明文HTTP、

1198
01:05:07,236 --> 01:05:11,605
hm, It's insecure, of course, we know HTTP is insecure,
嗯,这是不安全的,当然,我们知道HTTP是不安全的,

1199
01:05:11,674 --> 01:05:14,942
HTTPS is secure, It says, temporary exceptions can be
HTTPS是安全的,它说,可以暂时的异常

1200
01:05:15,011 --> 01:05:17,979
configured via your app's Info,plist file, Luckily,
通过应用程序的配置信息,plist文件,幸运的是,

1201
01:05:18,047 --> 01:05:21,282
I didn't move my Info,plist into Supporting Files,
我没有动信息,plist支持文件,

1202
01:05:21,351 --> 01:05:23,885
cuz I knew this was gonna happen, obviously, So
因为我知道这是可能发生的,很明显,所以

1203
01:05:23,953 --> 01:05:25,052
what's going on here?
这是怎么回事?

1204
01:05:25,121 --> 01:05:28,756
Well, if you look at the URL that we're trying to load,
好吧,如果你看看URL,我们试图加载,

1205
01:05:28,825 --> 01:05:32,227
this Stanford URL, see it's an insecure HTTP URL,
斯坦福大学的网址,看到这是一个不安全的HTTP URL,

1206
01:05:32,295 --> 01:05:35,163
And by default, iOS does not let you load those up,
iOS,默认情况下,不让你加载,

1207
01:05:35,232 --> 01:05:39,400
You have to say that you're willing to load those up
你说你愿意加载这些

1208
01:05:39,469 --> 01:05:42,670
untrusted URLs and you do that with this Info,plist,
不可信的url和你用这个信息,plist,

1209
01:05:42,738 --> 01:05:47,008
So what is an Info,plist? It's really just a list of some
那么什么是信息,plist ?

1210
01:05:47,077 --> 01:05:51,679
settings, some configurations, For example, it shows, will
设置,一些配置,例如,它表明,

1211
01:05:51,747 --> 01:05:54,248
you run in portrait mode? Will you run in landscape left?
你在肖像模式下运行?

1212
01:05:54,317 --> 01:05:56,651
In landscape right? Those kinds of things,
在景观对吧?

1213
01:05:56,719 --> 01:05:59,954
It's really kind of runtime configuration, how your app
真正的运行时配置,如何你的应用

1214
01:06:00,023 --> 01:06:04,458
will run, So we can add this App Transport Security
将运行,所以我们可以添加这个程序传输安全

1215
01:06:04,527 --> 01:06:07,494
that we need right here by right-clicking, okay,
我们需要在这里单击右键,

1216
01:06:07,563 --> 01:06:10,398
we right-click, Pay attention here, cuz you're gonna need to
我们右键单击,注意这里,因为你会需要

1217
01:06:10,466 --> 01:06:13,801
do this probably, in a, maybe in a future homework, But
可能这样做,在一个,也许在以后的作业,但

1218
01:06:13,870 --> 01:06:16,404
we're gonna right-click and pick Add Row,
我们要右键单击并选择添加一行,

1219
01:06:16,472 --> 01:06:19,273
So that's gonna add a row, Oops, we don't wanna add
这是要添加一行,哎呀,我们不想添加

1220
01:06:19,342 --> 01:06:22,710
a row there, sorry, That added a row to our support interface
一行,对不起,添加一行对我们支持的接口

1221
01:06:22,779 --> 01:06:23,811
configuration, >> So
配置> >

1222
01:06:23,880 --> 01:06:27,715
we wanna be not selecting that, and do Add Row, And
我们要不要选择,并添加行,

1223
01:06:27,784 --> 01:06:30,684
if you go look in Add Row, right near the top is App
如果你去看添加行,顶部是应用

1224
01:06:30,753 --> 01:06:33,488
transport security settings, You see it right there? So
交通安全设置,你看到它在这里吗?

1225
01:06:33,556 --> 01:06:37,492
I'm gonna click on that then I'm gonna open the security
我要点击,然后我要打开安全

1226
01:06:37,560 --> 01:06:40,595
settings, Don't forget to open those settings and
设置,别忘了这些设置和开放

1227
01:06:40,663 --> 01:06:43,398
then hit plus which will add a security setting and
然后点击+将添加一个安全设置和

1228
01:06:43,466 --> 01:06:45,433
here you can see the options, And
在这里你可以看到选项

1229
01:06:45,502 --> 01:06:48,302
we want the one which is allow arbitrary loads,
我们希望的是允许任意加载,

1230
01:06:48,371 --> 01:06:52,073
We'll allow any HTTP URL to be loaded and we're gonna go over
我们将允许任何HTTP URL加载和我们要复习

1231
01:06:52,141 --> 01:06:56,478
here and say that that is yes, So allows arbitrary loads,
在这里说,那是肯定的,所以允许任意加载时,

1232
01:06:56,546 --> 01:06:59,680
yes, okay? So we just add this to our Info,plist,
是的,好吗?

1233
01:06:59,749 --> 01:07:03,250
now when we run our app, we've given permission, essentially,
当我们运行我们的应用程序,我们允许,从本质上讲,

1234
01:07:03,319 --> 01:07:09,023
for the app to load these http non-S URLs,
应用程序加载这些http non-S url,

1235
01:07:09,092 --> 01:07:10,658
Okay, there we go, look at that, woo hoo!
好了,好了,看看,呜呼!

1236
01:07:10,727 --> 01:07:13,661
We got Stanford, and we can even rotate,
我们得到了斯坦福大学,我们甚至可以旋转,

1237
01:07:13,729 --> 01:07:17,531
Good, now of course we can't see the whole image here and
好,当然,我们不能看到整个图像

1238
01:07:17,600 --> 01:07:20,468
we can't zoom in, It would be nice to be able to zoom in,
我们不能放大,最好是能够放大,

1239
01:07:20,536 --> 01:07:24,038
For that we obviously need a scroll view, So
我们显然需要一个滚动视图,所以

1240
01:07:24,107 --> 01:07:27,141
how are we going to put a scroll view in here? Well,
我们将如何把一个滚动视图?

1241
01:07:27,210 --> 01:07:30,745
this is a good opportunity to show you mixing code for
这是一个很好的机会给你混合代码

1242
01:07:30,814 --> 01:07:35,382
doing your views in code, with doing it in the storyboard,
在代码视图,在故事板中,

1243
01:07:35,451 --> 01:07:38,753
So I'm gonna put my Scroll View in the storyboard, and
所以我要把我的故事板中的滚动视图,和

1244
01:07:38,822 --> 01:07:41,722
we'll leave the image view in code, Okay, so you see them
我们会把图像视图代码,好吧,你看到它们

1245
01:07:41,791 --> 01:07:44,825
both working together, So to put a Scroll View here in
都在一起工作,所以,给一个滚动视图

1246
01:07:44,894 --> 01:07:47,194
my storyboard, I'm going to just search for
我的故事板,我要寻找

1247
01:07:47,263 --> 01:07:50,365
Scroll View down here in the utilities window, there it is,
滚动视图下面的工具窗口,在这里,

1248
01:07:50,433 --> 01:07:53,234
I'm gonna drag out a scroll view, here it is,
我要拖出一个滚动视图,在这里,

1249
01:07:53,303 --> 01:07:57,171
I'm gonna use the blue lines to put it in the whole,
我要用蓝线在整个,

1250
01:07:57,240 --> 01:08:01,943
filling my whole, MVC here, without even any borders,
填满我的整个,MVC,甚至没有任何边界,

1251
01:08:02,011 --> 01:08:04,579
Then I'm gonna use this little reset to suggested
然后我要用这个小复位

1252
01:08:04,648 --> 01:08:06,480
constraints, you remember that?
约束,您还记得吗?

1253
01:08:06,549 --> 01:08:09,517
To have it do the auto layout for me,
对我来说做自动布局,

1254
01:08:09,586 --> 01:08:12,620
Then I'm actually gonna go up to the size inspector,
然后我会去检查大小,

1255
01:08:12,688 --> 01:08:16,057
right here, and click on it to double-check what it did,
在这里,点击它仔细检查它,

1256
01:08:16,126 --> 01:08:18,526
in terms of constraints, And sure enough,
的限制,果然,

1257
01:08:18,595 --> 01:08:21,429
it's done exactly the constraints I want, all right?
完成了完全约束的我想要的,对吧?

1258
01:08:21,497 --> 01:08:24,265
So we have this, We wanna talk to the scroll view,
所以我们有这个,我们想跟滚动视图,

1259
01:08:24,334 --> 01:08:27,768
of course we need an outlet to it, So, let's get our
当然,我们需要一个出口,所以,让我们把我们的

1260
01:08:27,837 --> 01:08:32,940
controller on screen at the same time here and let's
控制器在屏幕上同时让我们在这里

1261
01:08:33,009 --> 01:08:36,978
control drag, I'm gonna put it to scroll view down here by
控制拖,我要把它滚动视图下面

1262
01:08:37,047 --> 01:08:40,147
the image view, So let's control drag right into our
图像视图,我们拖到我们的控制

1263
01:08:40,216 --> 01:08:43,317
code right there, It's an outlet, get to scroll view,
代码,这是一个出口,滚动视图,

1264
01:08:43,386 --> 01:08:45,920
notice it's weak, We talked about why our
注意到它的软弱,我们谈论我们的原因

1265
01:08:45,988 --> 01:08:49,790
outlets are weak, I'm gonna call this outlet scrollView,
网点软弱,我要叫这个插座滚动视图,

1266
01:08:49,859 --> 01:08:53,261
Cuz that's what it is, Var scrollView right there, Now,
因为这是它是什么,Var滚动视图,现在,

1267
01:08:53,329 --> 01:08:58,399
I want to integrate the image view into the scroll view,
我想将图像视图集成到滚动视图,

1268
01:08:58,468 --> 01:09:03,304
so I'm just going to, when the scroll view gets set,
所以我要当滚动视图集,

1269
01:09:03,372 --> 01:09:07,942
I'm just gonna add that image view as a sub view,
我要添加图像视图的子视图,

1270
01:09:09,946 --> 01:09:12,546
Okay, and now I don't need to do that in viewDidLoad,
好吧,现在我在viewDidLoad不需要这样做,

1271
01:09:12,615 --> 01:09:15,183
Where is viewDidLoad? Okay, don't need to do adding
viewDidLoad在哪?

1272
01:09:15,252 --> 01:09:17,084
the image view as a sub view of our top
图像视图的子视图的顶部

1273
01:09:17,153 --> 01:09:19,821
level view because now I'm adding it as a sub view of
水平的观点,因为现在我添加的子视图

1274
01:09:19,889 --> 01:09:22,523
the scroll view, all right? Make sense? So,
滚动视图?

1275
01:09:22,592 --> 01:09:24,592
let's see if that just works, That should just work,
看看工作,应该工作,

1276
01:09:24,660 --> 01:09:29,964
Yeah, it's good, You should all be thinking about,
是的,这很好,你都应该考虑,

1277
01:09:30,033 --> 01:09:32,767
hm, why wouldn't that work? I'm gonna ask you why it's not
嗯,为什么不工作?

1278
01:09:32,836 --> 01:09:35,570
working in a second, All right, here it is! It looks
在第二个工作,好吧,在这儿!

1279
01:09:35,638 --> 01:09:39,507
like it works, Let's scroll, we can't scroll around, Why?
喜欢它的作品,滚动,我们不能滚动,为什么?

1280
01:09:39,575 --> 01:09:42,143
I know I put a scroll view in there, How come the scroll
我知道我放了一个滚动视图,怎么滚动

1281
01:09:42,212 --> 01:09:46,814
view's not scrolling? Anyone have an idea? Okay, the,
看来不是滚动吗?

1282
01:09:46,882 --> 01:09:48,816
he's saying the the two variables,
他说这两个变量,

1283
01:09:48,885 --> 01:09:50,517
the zooming things, Well, that's true,
缩放的事情,这是真的,

1284
01:09:50,586 --> 01:09:53,754
That's why it won't zoom, but it won't even pan,
这就是为什么它不会放大,但它甚至不会锅,

1285
01:09:53,823 --> 01:09:56,791
Why won't it even pan around, let alone zoom?
为什么它甚至锅,不让单独放大吗?

1286
01:09:56,859 --> 01:09:57,357
>> Content size,
> >内容大小,

1287
01:09:57,426 --> 01:09:58,625
>> Content size, exactly,
> >内容大小,

1288
01:09:58,694 --> 01:10:00,260
We haven't set the content size,
我们还没有设置内容大小,

1289
01:10:00,329 --> 01:10:03,497
So, this scroll view actually is panning around the content
所以,这实际上滚动视图浏览内容

1290
01:10:03,566 --> 01:10:08,503
size, it's just that the content size is zero-zero, So,
大小,只是内容大小是能见度为零的,所以,

1291
01:10:08,571 --> 01:10:10,004
when you are trying to pan around,
当你试图锅,

1292
01:10:10,072 --> 01:10:12,573
it's like you're not even over that zero, zero spot, and
就像你甚至不超过0,0点,

1293
01:10:12,642 --> 01:10:15,410
it's impossible to be over it, So, we want the content size
它是不可能的,所以,我们想要的内容的大小

1294
01:10:15,478 --> 01:10:18,246
to be encompassing this whole image here so
这里包括整个图像

1295
01:10:18,314 --> 01:10:21,115
we can pan around with it, so let's do that,
我们可以浏览,让我们来做,

1296
01:10:21,184 --> 01:10:24,418
Now, where do we want to set our content size?
现在,我们想要设置内容大小在哪里?

1297
01:10:24,487 --> 01:10:27,621
There's actually two times that we wanna do it,
有两次,我们要做的,

1298
01:10:27,690 --> 01:10:30,191
For sure when our scroll view is first hooked up here,
肯定当我们的滚动视图是第一次挂在这里,

1299
01:10:30,260 --> 01:10:32,526
we're gonna wanna set our content size,
我们要想设置我们的内容大小,

1300
01:10:32,595 --> 01:10:35,997
So I'm gonna say the contentSize here equals and
所以我想说这里的contentSize =,

1301
01:10:36,065 --> 01:10:39,600
what is our contentSize gonna be equal too? Well,
我们contentSize会平等吗?

1302
01:10:39,669 --> 01:10:43,471
it's our image view's frame size, okay?
我们的图像视图的外框尺寸,好吗?

1303
01:10:43,540 --> 01:10:46,340
We want to enclose our entire image view,
我们想要附上我们整个图像视图,

1304
01:10:46,409 --> 01:10:48,643
So, whatever the size of our imageView is,
所以,不管我们imageView的大小是多少,

1305
01:10:48,711 --> 01:10:51,645
that's what we the content size of our scrollView to be,
这就是我们的内容大小滚动视图,

1306
01:10:51,714 --> 01:10:54,882
But there's another time we're gonna wanna sent the content
但还有另一个时间我们要发送的内容

1307
01:10:54,950 --> 01:10:57,351
size, which is if our image changes, right?
大小,如果我们的形象改变了,对吧?

1308
01:10:57,420 --> 01:10:59,520
If you put a new image in there, then we're gonna have
如果你把一个新形象,那么我们会有

1309
01:10:59,588 --> 01:11:01,288
to adjust our content size to make a change,
调整我们的内容大小做出改变,

1310
01:11:01,357 --> 01:11:04,291
And luckily, woo hoo, we have this nice var down here,
呜呼,幸运的是我们有一个漂亮的var下面,

1311
01:11:04,360 --> 01:11:07,161
so that every time we set our image, we can do things,
所以每次我们的形象,我们能做的事情,

1312
01:11:07,230 --> 01:11:10,364
And sure enough, right here, I'm just gonna say,
果然,在这里,我只是想说,

1313
01:11:10,432 --> 01:11:14,469
scrollView,contentsize equals the imageView,frame,size,
滚动视图,contentsize = imageView,框架,大小,

1314
01:11:14,537 --> 01:11:18,239
Now, this might seem good, But actually this is very bad,
现在,这似乎不错,但实际上这是非常糟糕的,

1315
01:11:18,307 --> 01:11:22,210
And the reason for that is that, If we're in image
原因是,如果我们在形象

1316
01:11:22,278 --> 01:11:25,746
view controller, and we're getting prepared,
视图控制器,我们要做好准备,

1317
01:11:25,815 --> 01:11:28,483
Someone's going to set our image url,
某人要设置图像url,

1318
01:11:28,551 --> 01:11:31,819
That's how they're gonna prepare us right? So
这就是他们会让我们对吧?

1319
01:11:31,888 --> 01:11:35,622
let's follow what that's gonna do, So imageURL is going to
让我们跟随这是要做什么,所以imageURL

1320
01:11:35,691 --> 01:11:41,996
set the image to nil, down here, Set this image,
将图片设置为零,下面,设置这个形象,

1321
01:11:42,064 --> 01:11:45,165
to nil, and it's gonna try to execute this line of code,
为零,它会尝试执行这行代码,

1322
01:11:45,234 --> 01:11:50,771
and that is gonna crash, Because when we're preparing,
这将会崩溃,因为当我们准备,

1323
01:11:50,839 --> 01:11:55,943
our outlets are not set so this is nil, So the way around
我们店没有设置这是零,所以

1324
01:11:56,012 --> 01:11:59,113
that? Question mark, This optional chain, If it's nil,
了吗?

1325
01:11:59,182 --> 01:12:01,082
I won't be setting the contentSize of the scrollView,
我不会设置contentSize滚动视图,

1326
01:12:01,151 --> 01:12:03,885
but that's okay cuz later, I'll come along and
但是没关系因为以后,我会过来

1327
01:12:03,953 --> 01:12:06,787
do it here when the outlet does get hooked up, So,
做在这里当出口连接,所以,

1328
01:12:06,855 --> 01:12:09,690
this is just to remind you that any time you're accessing
这仅仅是提醒你,你任何时间访问

1329
01:12:09,759 --> 01:12:13,561
outlets and methods that might be called during prepare, you
渠道和方法,可以称为准备期间,你

1330
01:12:13,629 --> 01:12:18,599
need to optionally chain them, okay? So it doesn't crash
需要选择链?

1331
01:12:18,667 --> 01:12:22,169
your app during prepare, All right, so let's go ahead and
应用程序准备期间,好吧,让我们继续

1332
01:12:22,237 --> 01:12:24,939
see if that fixed everything, set our content size here,
看固定的一切,我们的内容大小,

1333
01:12:26,809 --> 01:12:32,379
Should be good to go, All right,
应该好了,好了,

1334
01:12:32,448 --> 01:12:37,318
here's our image, and look at that, scrolls nicely, rotate,
这是我们的图片,看那卷轴,旋转,

1335
01:12:37,386 --> 01:12:42,190
okay, scroll, Okay, and notice it has a kinda this little
滚动,好,注意到它有一个有点小

1336
01:12:42,258 --> 01:12:45,092
thing where you scroll too far and it bounces back,
事,你滚动反弹,太远

1337
01:12:45,160 --> 01:12:48,529
You can control that, by the way, and scrollView's one of
你可以控制,顺便说一下,和滚动视图的之一

1338
01:12:48,598 --> 01:12:51,765
its settings, all right? Oops, wrong rotation there, okay,
它的设置,对吧?

1339
01:12:51,834 --> 01:12:55,670
we got it? Now, of course, now we'd like to zoom in, We wanna
我们收到的吗?

1340
01:12:55,738 --> 01:12:58,238
look and see if we can find any of ourselves down here,
看看我们可以找到任何我们自己,

1341
01:12:58,307 --> 01:13:00,541
Maybe that's one of us right there, We're gonna zoom in and
也许这就是一个人,我们会放大和

1342
01:13:00,610 --> 01:13:04,545
see, But for zooming, as he was saying up above,
看到,但是对于缩放,正如上面他说的,

1343
01:13:04,614 --> 01:13:07,881
we need to make sure we set the minimum and maximum
我们需要确保我们设置最小和最大

1344
01:13:07,950 --> 01:13:10,551
zoom scale, Cuz actually the minimum and maximum
缩放尺度,因为实际的最小和最大值

1345
01:13:10,620 --> 01:13:13,955
zoom scale are set right now, they're set to 1,0, So
现在缩放尺度设置,设置为1,0,所以

1346
01:13:14,023 --> 01:13:18,526
that's minimum and max, it means no scrolling, All right,
最小和最大,它意味着没有滚动,好吧,

1347
01:13:18,594 --> 01:13:21,128
so let's set that, A good place to set that is probably
让我们集合,可能一套的好地方

1348
01:13:21,197 --> 01:13:24,197
when our scroll view is first hooked up as an outlet,
当我们的滚动视图是第一次连接作为一个出口,

1349
01:13:24,266 --> 01:13:26,734
So we'll just do this here, we'll say,
所以我们就做这个,我们会说,

1350
01:13:26,802 --> 01:13:30,872
scrollView,minimumZoomScale, Let's go really small,
minimumZoomScale滚动视图,我们去很小,

1351
01:13:30,940 --> 01:13:34,942
how bout 0,03, okay, 3% of the size will go,
怎么样0,03年,3%的大小,

1352
01:13:35,011 --> 01:13:38,111
make allow our image to be really small,
让我们的图像很小,

1353
01:13:38,180 --> 01:13:41,415
And maximum, just to show you the difference, we'll make it
和最大,只是向你展示不同,我们会赶到

1354
01:13:41,483 --> 01:13:44,819
only, so we can only be twice as big, Or, or we can even
,所以我们只能两倍大,或者,我们甚至可以

1355
01:13:44,887 --> 01:13:47,487
make it so it can't be bigger, right? 1,0 would be,
让它不能更大,对吧?

1356
01:13:47,556 --> 01:13:49,090
it can never be any bigger than it is,
它永远是任何更大的比,

1357
01:13:49,158 --> 01:13:51,258
It could be smaller, but not bigger, Which we might want,
可能是较小的,但并不大,我们可能希望,

1358
01:13:51,327 --> 01:13:54,261
because if it's allowed to be bigger than its natural size,
因为如果它允许比自然大小,

1359
01:13:54,330 --> 01:13:55,763
it's gonna start getting pixellated and
它会开始和上马赛克

1360
01:13:55,831 --> 01:13:59,232
we don't want that, But just so you can see it happening,
我们不希望这样,但是你可以看到它发生,

1361
01:13:59,301 --> 01:14:04,438
And what's the other thing we need to make zooming work? No
的另一件事我们需要放大的工作吗?

1362
01:14:04,507 --> 01:14:09,677
one remember? We need delegation, Yes,
一个还记得吗?

1363
01:14:09,745 --> 01:14:12,746
the scroll view needs to know which of its subviews
滚动视图需要知道它的子视图

1364
01:14:12,815 --> 01:14:15,582
you want to have the transform change, And
你想要转换变化,

1365
01:14:15,651 --> 01:14:18,118
it does that by asking you to delegate, So now we're gonna
它通过询问你委托,所以现在我们要

1366
01:14:18,187 --> 01:14:20,788
get to see delegates in action right here,
可以看到代表在行动,

1367
01:14:20,857 --> 01:14:25,526
So to make a delegate work, you need to set the delegates
所以委托工作,你需要设置代表

1368
01:14:25,594 --> 01:14:27,795
to be yourself, So I need to say,
是你自己,所以我需要说,

1369
01:14:27,864 --> 01:14:32,966
scrollView,delegate = self, Now, this is not legal,
滚动视图,委托=自我,现在,这是不合法的,

1370
01:14:33,035 --> 01:14:37,171
and this is going to generate an error, And hopefully you
这将生成一个错误,希望你

1371
01:14:37,239 --> 01:14:39,807
can kinda see why, we'll look at the error, and it says,
可以看到为什么,我们将看一下错误,和它说,

1372
01:14:39,875 --> 01:14:43,110
you cannot assign the value of type ImageViewController,
你不能指定类型ImageViewController的价值,

1373
01:14:43,178 --> 01:14:47,614
which is what self is, to the type UIScrollViewDelegate
这就是自我,UIScrollViewDelegate类型

1374
01:14:47,683 --> 01:14:50,284
optional, So I told you that the ScrollViewDelegate is
可选的,所以我告诉你ScrollViewDelegate

1375
01:14:50,353 --> 01:14:53,454
an optional UIScrollViewDelegate protocol,
一个可选的UIScrollViewDelegate协议,

1376
01:14:53,523 --> 01:14:55,155
and that's what it is, And of course,
它是什么,当然,

1377
01:14:55,224 --> 01:14:57,992
self isn't that even though it doesn't employ any methods and
自我不是,即使它不使用任何方法和

1378
01:14:58,061 --> 01:15:00,060
that protocol has only optional methods,
那个协议才可选的方法,

1379
01:15:00,129 --> 01:15:03,130
Because it needs to go up here and say yes,
因为它需要在这里说是,

1380
01:15:03,198 --> 01:15:08,836
I'm a UIScrollViewDelegate, Okay, so this is this class,
我是UIScrollViewDelegate,好吧,这是这门课,

1381
01:15:08,904 --> 01:15:12,406
UIViewController, saying I conform to this protocol, and
ui,说我符合该协议

1382
01:15:12,474 --> 01:15:13,607
as soon as I do that,
当我这样做,

1383
01:15:13,676 --> 01:15:16,544
the error goes away, and there's no errors, Even
错误消失,甚至没有错误,

1384
01:15:16,612 --> 01:15:19,146
though I didn't do anything, I didn't actually implement
虽然我什么都没做,但我实际上并没有实现

1385
01:15:19,215 --> 01:15:21,682
the UIScrollView delegate protocol, that's because all
UIScrollView委托协议,这是因为所有

1386
01:15:21,751 --> 01:15:24,952
the methods in UIScrollView delegate are optional, So
UIScrollView委托的方法是可选的,所以

1387
01:15:25,021 --> 01:15:26,987
I don't implement any, but they're all optional,
我不实现任何,但它们都是可选的,

1388
01:15:27,056 --> 01:15:30,224
So I've conformed to the protocol, But of course,
所以我符合协议,当然,

1389
01:15:30,292 --> 01:15:31,992
that's not gonna help us with our zooming because we in
那不是要与我们的缩放,因为我们在帮助我们

1390
01:15:32,061 --> 01:15:35,996
fact do need to implement a method, Now I'm gonna show
事实需要实现的方法,现在我要表演

1391
01:15:36,065 --> 01:15:39,166
you a cool way to do this with extensions, I'm going to add
你一个很酷的方法扩展,我要添加

1392
01:15:39,234 --> 01:15:42,903
protocol conformance to my ImageViewController with
我的ImageViewController协议一致性

1393
01:15:42,972 --> 01:15:46,139
an extension, And I'm gonna do that like this,
一个扩展,我要做的,

1394
01:15:46,208 --> 01:15:49,209
So I'm gonna make it so that it does not conform, okay,
所以我要让它不符合,好吧,

1395
01:15:49,278 --> 01:15:51,511
ImageViewController does not conform,
ImageViewController不符,

1396
01:15:51,580 --> 01:15:55,883
But I'm gonna add an extension down here, at the bottom of my
但是我要添加一个扩展,在我的底部

1397
01:15:55,951 --> 01:16:00,153
file, which is an extension to the ImageViewController,
ImageViewController文件,它是一个扩展,

1398
01:16:00,222 --> 01:16:04,858
which causes ImageViewController to conform
导致ImageViewController符合吗

1399
01:16:04,927 --> 01:16:09,096
to the UIScrollViewDelegate protocol, Okay, so by just
UIScrollViewDelegate协议,通过

1400
01:16:09,165 --> 01:16:13,434
putting this here, this error down here is gonna go away,
将在这里,下面这个错误会消失,

1401
01:16:13,503 --> 01:16:16,404
Because I've added an extension, which causes this,
因为我添加一个扩展,导致,

1402
01:16:16,472 --> 01:16:19,172
this class right here to conform to this protocol,
这类符合此协议,

1403
01:16:19,241 --> 01:16:20,974
Again, all the methods are optional so
再一次,所有的方法都是可选的

1404
01:16:21,043 --> 01:16:23,577
normally we would have to put a bunch of methods in here,
通常我们会把一堆的方法在这里,

1405
01:16:23,646 --> 01:16:26,346
But I am gonna put the one method we do want down here,
但是我要把我们想要的一个方法,

1406
01:16:26,415 --> 01:16:31,518
which is viewForZooming in scrollView,
这是viewForZooming滚动视图,

1407
01:16:31,587 --> 01:16:34,988
Now what's interesting, notice as I start to type this,
有趣的,注意当我开始这个类型,

1408
01:16:35,057 --> 01:16:38,359
it actually knows that I'm a UIScrollViewDelegate, so
其实知道我是个UIScrollViewDelegate,

1409
01:16:38,428 --> 01:16:40,694
it offers me that method as a choice, so
它提供了我这个方法作为一个选择,

1410
01:16:40,763 --> 01:16:43,797
I'll double click on it, Here's my viewForZooming in
我双击它,这是我viewForZooming

1411
01:16:43,866 --> 01:16:47,100
scrollView, I just need to return which view I wanna
滚动视图,我想我只需要返回视图

1412
01:16:47,169 --> 01:16:49,269
zoom in for us, Of course, it's that image view,
为我们放大,当然,那就是图像视图,

1413
01:16:49,338 --> 01:16:52,572
So I wanna just say return imageView, but
所以我想说返回imageView,但是

1414
01:16:52,641 --> 01:16:58,511
that doesn't work, Why do you think that doesn't work?
这并不工作,为什么你觉得不工作吗?

1415
01:16:58,580 --> 01:17:04,751
This imageView is private,
这个imageView是私人的,

1416
01:17:04,820 --> 01:17:09,323
Now, I could unmake it private, but
现在,我可以改变它的私人,但是

1417
01:17:09,392 --> 01:17:12,326
now everyone can see that image view, and
现在每个人都可以看到,图像视图

1418
01:17:12,394 --> 01:17:15,729
that's a little too unprivate, So there's another kind of
这是有点太unprivate,这是另一种

1419
01:17:15,798 --> 01:17:20,968
private called fileprivate, and what fileprivate means is,
私人称为fileprivate,fileprivate意味着什么,

1420
01:17:21,037 --> 01:17:25,205
it's private to everyone in this file, So
这是私人每个人都在这个文件中,所以

1421
01:17:25,274 --> 01:17:29,276
that allows this extension to see this image view, And
这个扩展可以看到这个图像视图,和

1422
01:17:29,345 --> 01:17:30,577
it's still private to everyone else,
它仍然是私人对其他所有人,

1423
01:17:30,646 --> 01:17:33,180
So everyone using my MVC who sees this, other files,
所以每个人使用我的MVC谁看到这个,其他文件,

1424
01:17:33,249 --> 01:17:36,750
it's still private, they don't see it, But this guy can use
还是私人的,他们看不到它,但这家伙可以使用

1425
01:17:36,819 --> 01:17:38,885
it, okay? So that's a different kind of private,
它,好吗?

1426
01:17:38,954 --> 01:17:42,756
fileprivate, All right, so we got the view for zooming,
fileprivate,所以我们的视图缩放,

1427
01:17:42,825 --> 01:17:44,959
This is, in fact, the view we wanna zoom,
这是,事实上,我们想要放大的视图,

1428
01:17:45,028 --> 01:17:46,360
So let's go ahead and take a look here,
让我们去看一看,

1429
01:17:53,969 --> 01:17:56,569
All right, here it is, We can still scroll around, and
好吧,在这里,我们仍然可以滚动

1430
01:17:56,638 --> 01:17:59,506
if we hold down the option key and get our two fingers here,
如果我们按下选择键,两个手指,

1431
01:17:59,575 --> 01:18:03,477
we can also zoom, Okay, and
我们也可以放大,好的,

1432
01:18:03,546 --> 01:18:06,379
we can zoom in really small, and we can zoom out,
我们可以放大很小,我们可以缩小,

1433
01:18:06,448 --> 01:18:09,616
But notice, it won't let me zoom any larger than
但是请注意,它不会让我放大任何大于

1434
01:18:09,685 --> 01:18:13,154
1,0 because I set that as my maximum zoom scale,
1 0因为我设置我的最大缩放尺度,

1435
01:18:14,957 --> 01:18:18,625
All right, so, the last thing I'm gonna do, well, I'll leave
好了,所以,我要做的最后一件事,好吧,我离开

1436
01:18:18,694 --> 01:18:21,661
this as is cuz I'm gonna post this code like this, and
这是因为我要发布此代码,和

1437
01:18:21,730 --> 01:18:25,332
you can play around with it, Next time, what I'm gonna
你可以尝试一下,下次,我要什么

1438
01:18:25,400 --> 01:18:28,835
do is add another MVC that lets us pick some NASA images,
做的是添加另一个MVC,让我们选择一些NASA的图像,

1439
01:18:28,904 --> 01:18:32,273
you can see any NASA images, And one thing we're gonna find
你可以看到任何NASA图像,有一件事我们要找到

1440
01:18:32,341 --> 01:18:35,442
about this images, they're huge, and even on our Stanford
关于这个图片,他们是巨大的,甚至在我们的斯坦福大学

1441
01:18:35,511 --> 01:18:38,745
network, they take a long time to download, And that's gonna
他们需要很长时间才能下载,网络会

1442
01:18:38,814 --> 01:18:41,614
be annoying, and so we are going to use multithreading
烦人的,所以我们要使用多线程

1443
01:18:41,683 --> 01:18:43,083
to keep our UI responsive,
保持界面的反应,

1444
01:18:43,152 --> 01:18:45,819
even though it's doing this very expensive thing,
虽然这样做很昂贵的东西,

1445
01:18:45,888 --> 01:18:49,256
which is downloading this huge file, all right? So,
下载这个巨大的文件,好吗?

1446
01:18:49,325 --> 01:18:51,591
I'll see you then, >> For
然后,再见> >

1447
01:18:51,660 --> 01:19:01,067
more, please visit us at stanford,edu,
edu更多,请访问我们的斯坦福大学,
