1
00:00:00,401 --> 00:00:04,435
[MUSIC]
(音乐)

2
00:00:04,504 --> 00:00:07,605
Stanford University,
斯坦福大学,

3
00:00:07,674 --> 00:00:11,109
>> All right, well, welcome to Stanford CS193P,
> >好吧,好吧,欢迎来到斯坦福CS193P,

4
00:00:11,178 --> 00:00:14,946
Developing Applications for iOS, winter of 2017,
iOS应用程序开发,2017年冬天,

5
00:00:15,015 --> 00:00:18,183
This is Lecture number 9,
这是第九讲

6
00:00:18,252 --> 00:00:20,786
And today we have only one topic which is Table View,
今天我们只有一个主题表视图,

7
00:00:20,854 --> 00:00:23,187
And I'm gonna go through a bunch of slides to talk about
我要穿过一群幻灯片来谈论

8
00:00:23,256 --> 00:00:23,989
the concepts of it,
它的概念,

9
00:00:24,058 --> 00:00:26,992
And then we're gonna have a humongous demo
然后我们会有一个巨大无比的演示

10
00:00:27,061 --> 00:00:29,360
that we're gonna build a Twitter client and
我们要建立一个Twitter客户端

11
00:00:29,429 --> 00:00:31,296
it's gonna use Table View and
它会使用表格视图和

12
00:00:31,365 --> 00:00:33,532
some other things that we've learned, like Text Field,
其他一些我们学过的东西,像文本字段,

13
00:00:34,802 --> 00:00:36,835
And Table View, what is it?
和表视图,它是什么?

14
00:00:36,903 --> 00:00:40,739
You've seen a Table View in all sorts of iOS apps,
你见过各种各样的iOS应用程序表视图,

15
00:00:40,807 --> 00:00:43,908
It's just this UI where there's a list of things,
只是这个UI的事情的列表,

16
00:00:43,977 --> 00:00:46,879
There's really two different kinds of looks to Table View,
有两种不同的表视图看起来,

17
00:00:46,947 --> 00:00:48,479
There's the kind on the left there,
有左边的那种,

18
00:00:48,548 --> 00:00:50,648
which we call plain style,
我们称之为朴素的风格,

19
00:00:50,717 --> 00:00:53,818
Plain style is just a list of things,
普通样式只是事情的列表,

20
00:00:53,887 --> 00:00:56,721
And it might be collected into groups like little sections,
和它可能收集到团体像小部分,

21
00:00:56,790 --> 00:00:59,291
But it's mostly just a big long list,
但它主要只是一大长串,

22
00:00:59,359 --> 00:01:02,660
On the right side, is called a grouped style,
在右边,称为分组的风格,

23
00:01:02,729 --> 00:01:05,230
Where the sections in the table,
表中的部分,

24
00:01:05,299 --> 00:01:08,934
you're more obviously disconnected from each other,
你更明显的断开,

25
00:01:09,003 --> 00:01:11,436
They have you know, big gaps in between,
你知道,在之间的巨大差距,

26
00:01:11,505 --> 00:01:17,943
Normally the plain style we use for dynamic data,
通常我们使用的普通样式动态数据,

27
00:01:18,011 --> 00:01:20,445
Data that might have any number of items in there,
数据可能有任意数量的物品,

28
00:01:20,514 --> 00:01:22,580
The group style we tend to use for static data,
该组织风格我们倾向于使用静态数据,

29
00:01:22,649 --> 00:01:25,050
where we know exactly what rows are gonna be in there,
我们要知道行,

30
00:01:25,119 --> 00:01:28,120
and exactly what's gonna be in them,
和什么会,

31
00:01:28,188 --> 00:01:31,289
So let's talk about the names of all the parts of
让我们谈论所有的部分的名称

32
00:01:31,358 --> 00:01:33,558
a Table View, so that as I'm explaining all this,
表视图,这样当我解释这一切,

33
00:01:33,627 --> 00:01:35,461
you'll know what the terminology is,
你会知道的术语是什么,

34
00:01:36,563 --> 00:01:38,230
First we have a table header,
首先,我们有一个表标题,

35
00:01:38,298 --> 00:01:39,363
That's a UIView,
这是一个UIView,

36
00:01:39,432 --> 00:01:40,999
There's only one of them,
只有一个,

37
00:01:41,068 --> 00:01:43,135
It sits at the very top of the table,
坐在桌子的最顶端,

38
00:01:43,204 --> 00:01:44,902
This is where, as you'll see in the demo,
在这里,您将看到在演示,

39
00:01:44,971 --> 00:01:49,040
you might put a search field or something that searches
你可能会把搜索字段或搜索的东西

40
00:01:49,109 --> 00:01:51,009
to find what's in your table or something like that,
找到什么表之类的,

41
00:01:51,078 --> 00:01:53,478
And similarly, there's a footer view,
同样的,有一个页脚视图,

42
00:01:53,546 --> 00:01:54,513
Rarely see this used,
很少看到这个,

43
00:01:54,582 --> 00:01:57,749
But it's just a UIView that sits at the bottom
但它只是一个UIView位于底部

44
00:01:57,817 --> 00:01:59,301
And in between, there are these things called sections,
之间,都有这些东西称为部分,

45
00:01:59,302 --> 00:02:00,786
of the table,
的表,

46
00:02:00,854 --> 00:02:03,989
So a section is just a combination of a header and
所以只是一个标题和部分

47
00:02:04,058 --> 00:02:05,857
a footer, which are usually strings, but
一个页脚,通常是字符串,但是

48
00:02:05,925 --> 00:02:09,460
also could be UIViews, and then any number of rows,
也可能是ui视图,然后任意数量的行,

49
00:02:09,529 --> 00:02:10,728
That's what we call a section,
这就是我们所说的部分,

50
00:02:10,797 --> 00:02:12,397
So that's a section right there,
这是一个部分,

51
00:02:12,466 --> 00:02:15,667
This is the section header for the two sections that I have
这是一节头的两个部分

52
00:02:15,736 --> 00:02:18,537
showing in this table, right, where it says Header 0,
这个表显示,对吧,说头0,

53
00:02:18,605 --> 00:02:20,705
And these are sections footers for
这些是部分的页脚

54
00:02:20,774 --> 00:02:22,440
the two sections that I have,
我有两个部分,

55
00:02:22,509 --> 00:02:25,310
These two sections happen to both have the same numbers of
这两个部分都有相同数量的发生

56
00:02:25,379 --> 00:02:28,113
rows in each which is two but a section, one section have
行每一个都是两个,但部分,一个部分

57
00:02:28,182 --> 00:02:31,583
a 100 rows, and one could have just 1, it's perfectly fine,
一个100行,可能只有1,非常好,

58
00:02:32,786 --> 00:02:36,521
This right in here, we call a table cell,
在这里,我们调用一个表格单元,

59
00:02:36,589 --> 00:02:39,023
C-E-L-L, cell, and it's the UIView,
C-E-L-L、细胞和UIView,

60
00:02:39,092 --> 00:02:40,692
actually UITableViewCell,
实际上UITableViewCell,

61
00:02:40,761 --> 00:02:43,495
it's the name of the subclass that's in there,
的是子类的名称,

62
00:02:43,564 --> 00:02:46,731
And this is the thing that's gonna draw the data that's at
这是要画出的数据的

63
00:02:46,800 --> 00:02:47,799
a particular row,
一个特定的行,

64
00:02:47,868 --> 00:02:49,467
And we're gonna see how that works,
我们将看到这是如何工作的,

65
00:02:49,536 --> 00:02:52,203
By the way, along the bottom you're seeing source code that
顺便说一下,你看到底部的源代码

66
00:02:52,272 --> 00:02:54,005
kind of corresponds with these things,
符合这些东西,

67
00:02:54,074 --> 00:02:57,075
Don't worry I'm gonna get back to showing you all that stuff
别担心我会回到显示你所有的东西

68
00:02:57,143 --> 00:02:57,976
in later slides,
在后面的幻灯片,

69
00:02:58,045 --> 00:03:01,145
So this is the naming we use to name all the parts of
这是我们使用的命名的名字所有的部分

70
00:03:01,214 --> 00:03:03,014
a table view,
一个表格视图,

71
00:03:03,083 --> 00:03:04,148
And this is in plain style,
这是在朴素的风格,

72
00:03:04,217 --> 00:03:06,618
All the same names work in group style,
所有相同的名称在集团工作风格,

73
00:03:06,687 --> 00:03:08,519
Everything just kinda looks a little different,
一切都只是看起来有点不同,

74
00:03:08,588 --> 00:03:10,088
All right, still have a header, footer,
好吧,还有一个页眉,页脚,

75
00:03:10,157 --> 00:03:12,123
sections, all the same,
部分,都是一样的,

76
00:03:12,192 --> 00:03:14,059
Just a little different UI look,
只是有点不同的UI看,

77
00:03:15,896 --> 00:03:18,930
Now, tables can have sections or not,
现在,表可以有部分,

78
00:03:18,999 --> 00:03:20,832
You don't have to have any sections, so
你不需要有任何部分,

79
00:03:20,900 --> 00:03:25,003
the table on the left is just a whole list of cities and
左边的表是一个整体的城市和列表

80
00:03:25,071 --> 00:03:27,205
the countries they're in and just a big long list,
他们的国家在一大长串,

81
00:03:27,273 --> 00:03:29,307
On the right is kind of the same kind of list but
右边是同样的列表

82
00:03:29,376 --> 00:03:31,943
you can see that they're grouped into sections there by
你可以看到,他们被分成部分

83
00:03:32,011 --> 00:03:32,811
country, right,
的国家,

84
00:03:32,880 --> 00:03:35,213
So Japan there, Mexico, etc,
所以日本、墨西哥等

85
00:03:35,282 --> 00:03:37,248
So sections are optional,
所以部分是可选的,

86
00:03:37,317 --> 00:03:40,318
not optional in the case of an option, but
不是可选的一个选项,但是

87
00:03:40,387 --> 00:03:44,856
sections you can have them or not, it's totally up to you,
部分你可以与否,完全取决于你的喜好,

88
00:03:46,160 --> 00:03:51,096
The type of the cell, like each row, there are four
细胞的类型,像每一行,有四个

89
00:03:51,164 --> 00:03:54,432
kinda pre-defined types and then there's a custom type,
有点预定义的类型,然后有一个自定义的类型,

90
00:03:54,501 --> 00:03:57,969
The four pre-defined types are subtitle where you just got
这四个预定义类型是字幕你刚刚的地方

91
00:03:58,037 --> 00:03:58,737
like a title and
像一个标题和

92
00:03:58,806 --> 00:04:01,773
a little smaller text subtitle under it,
小文本字幕下它,

93
00:04:01,842 --> 00:04:03,575
There's default which is the same except
有违约,除非是一样的

94
00:04:03,643 --> 00:04:05,644
there's no little subtitle thing,
没有字幕的事情,

95
00:04:05,712 --> 00:04:08,179
There's value 1 and value 2, which is just like subtitle,
值1,值2,正如副标题,

96
00:04:08,248 --> 00:04:10,715
it's just that the little thing underneath is in
只是下面的小东西

97
00:04:10,784 --> 00:04:13,218
a different spot, it's either blue and
不同的地方,要么是蓝色的和

98
00:04:13,287 --> 00:04:17,588
to the left or it's kind of grayed off into the right but
到左边或者有点灰色的到正确的

99
00:04:17,657 --> 00:04:21,326
i's just how i's laying out the basic information there,
我就是我的布局的基本信息,

100
00:04:21,395 --> 00:04:23,995
Now a custom cell can have arbitrary UI
现在一个定制的细胞可以有任意的UI

101
00:04:24,063 --> 00:04:25,130
in it as you will see,
正如您将看到的,

102
00:04:26,533 --> 00:04:30,234
So how do we use a table view?
那么,我们如何使用表格视图?

103
00:04:30,303 --> 00:04:32,070
Okay, a table view is a UIView,
好的,UIView表视图,

104
00:04:32,139 --> 00:04:35,073
i's actually subclass UIScrollView because i's
我因为是子类

105
00:04:35,141 --> 00:04:38,176
scrolling through all those rows,
通过所有这些行滚动,

106
00:04:38,245 --> 00:04:40,495
Well 99% of the time, we use the special ViewController
99%的时间,我们使用特殊ViewController

107
00:04:40,496 --> 00:04:42,746
So how do we do it?
那么我们怎么做呢?

108
00:04:42,816 --> 00:04:45,884
called UITableViewController in UIKit,
叫UITableViewController UIKit,

109
00:04:45,952 --> 00:04:50,922
And UITableViewController is just a convenient package to
和UITableViewController只是一个方便的包装

110
00:04:50,991 --> 00:04:56,261
use UITableView in and its self,view is a UITableView,
使用UITableView及其自我,视图是一个UITableView,

111
00:04:56,330 --> 00:04:59,063
Okay, so you would only use a UITableViewController
好的,那么你只会使用UITableViewController

112
00:04:59,132 --> 00:05:02,066
when your entire self,view is going to be filled
当你的整个自我,视图将会填满

113
00:05:02,135 --> 00:05:04,035
with a table view,
表视图,

114
00:05:04,104 --> 00:05:06,771
And you can add one into your storyboard just by dragging it
你可以添加一个到你的故事板通过拖动它

115
00:05:06,840 --> 00:05:08,139
out as we always do,
我们总是一样,

116
00:05:08,208 --> 00:05:09,841
There's a thing called Table View Controller and
有一种东西叫做表格视图控制器

117
00:05:09,910 --> 00:05:10,675
it's just gonna drag it out,
它只是要拖出来,

118
00:05:10,744 --> 00:05:12,878
Now it's a controller, so when you drag it out,
现在这是一个控制器,所以当你拖出来,

119
00:05:12,946 --> 00:05:14,512
it looks like an MVC,
它看起来像MVC,

120
00:05:14,581 --> 00:05:16,314
But inside of that MVC,
但在MVC,

121
00:05:16,383 --> 00:05:18,316
there is a table view sitting there, okay?
有一个表格视图坐在那里,好吗?

122
00:05:18,385 --> 00:05:20,986
And so what you see here the controller,
所以你在这里看到的控制器,

123
00:05:21,055 --> 00:05:22,420
is a UITableViewController,
是一个UITableViewController,

124
00:05:22,489 --> 00:05:26,191
and the self,view of it is a UITableView,
和自我的观点UITableView,

125
00:05:26,260 --> 00:05:27,793
Okay, subclass of UIScrollView,
好的,UIScrollView的子类,

126
00:05:29,329 --> 00:05:31,662
Now like any other ViewController,
现在像其他ViewController一样,

127
00:05:31,731 --> 00:05:33,498
if you're going to do anything with this thing,
如果你要用这个东西,做任何事

128
00:05:33,567 --> 00:05:35,400
you need to subclass it, right?
你需要子类,对吧?

129
00:05:35,469 --> 00:05:37,302
Just like you create a calculator view controller or
就像你视图控制器或者创建一个计算器

130
00:05:37,370 --> 00:05:38,169
graph view controller,
图视图控制器,

131
00:05:38,237 --> 00:05:41,540
you need to subclass, your UITableViewController as well,
你需要子类,UITableViewController,

132
00:05:41,608 --> 00:05:43,074
And you do it the same way, right?
和你一样,对吧?

133
00:05:43,142 --> 00:05:44,910
New files are created,
创建新文件,

134
00:05:44,978 --> 00:05:48,146
It's gonna be a Cocoa Touch Class of course,
它会触控类当然,

135
00:05:48,214 --> 00:05:50,548
It's gonna be a subclass of UITableViewController,
它会UITableViewController的子类,

136
00:05:50,617 --> 00:05:51,549
Make sure you pick that,
确保你选择,

137
00:05:51,618 --> 00:05:53,585
Don't say it's a subclass of UIViewController,
不要说这是ui的一个子类,

138
00:05:53,654 --> 00:05:56,955
It has to be a subclass UITableViewController if you
它必须是一个子类UITableViewController如果你

139
00:05:57,023 --> 00:05:59,090
want it to work,
想要的工作,

140
00:05:59,158 --> 00:06:02,660
And then you just set it in the identity inspector
然后把它的身份检查

141
00:06:02,729 --> 00:06:03,995
Just exactly like any other controllers, just that it has
就像任何其他控制器,它

142
00:06:03,996 --> 00:06:05,262
to be your class,
您的课,

143
00:06:05,332 --> 00:06:08,033
to be subclass UITableViewController,
UITableViewController子类,

144
00:06:08,101 --> 00:06:11,002
This UITableViewController subclass
这UITableViewController子类

145
00:06:11,070 --> 00:06:14,739
is also going to serve as the data source and delegates,
也将作为数据源和代表,

146
00:06:14,808 --> 00:06:16,707
Okay, the data source is just a special kind of delegate for
好的,数据源是一种特殊的委托

147
00:06:16,776 --> 00:06:19,010
getting the data in the table,
表中的数据,

148
00:06:19,079 --> 00:06:21,045
For the table view that's inside of it,
里面的表视图,

149
00:06:21,114 --> 00:06:23,114
So, we're gonna talk a lot more about that
所以,我们要更多的谈论

150
00:06:23,183 --> 00:06:24,449
down the road here,
在路上,

151
00:06:24,517 --> 00:06:27,352
By the way, if you right click on the view controller and
顺便说一下,如果你右键单击视图控制器

152
00:06:27,421 --> 00:06:29,888
you get that black window to come up, you can actually see
黑色窗口出现,你可以看到

153
00:06:29,957 --> 00:06:31,623
it, if you look down towards the bottom there,
如果你向下看向底部,

154
00:06:31,691 --> 00:06:33,225
you see data source and delegate,
数据源和委托,

155
00:06:33,293 --> 00:06:35,560
Their properties and they're pre wired up for you,
属性和他们之前的连接给你,

156
00:06:35,628 --> 00:06:37,862
If you use this UITableViewController thing,
如果你使用这个UITableViewController的事情,

157
00:06:37,930 --> 00:06:39,431
just pre-wires it up,
pre-wires它,

158
00:06:39,500 --> 00:06:41,399
That the controller is the delegate and
控制器是委托

159
00:06:41,468 --> 00:06:44,335
data source of the table view,
数据源的表视图,

160
00:06:44,404 --> 00:06:46,304
If you don't use UITableViewController,
如果你不使用UITableViewController,

161
00:06:46,373 --> 00:06:48,373
by the way, this kinda pre-packaged one?
顺便说一下,这有点预包装的吗?

162
00:06:48,442 --> 00:06:50,375
Then you'll have to wire up the data source and
然后你将不得不数据源和连接

163
00:06:50,443 --> 00:06:52,811
delegate, you know, either in code by saying
委托,你知道,在代码中说

164
00:06:54,147 --> 00:06:57,215
tableView,delegate = self or something like that,
表视图,委托=自我之类的,

165
00:06:57,283 --> 00:06:59,150
You'll have to do it yourself but 99% of the time you're
你必须自己动手,但你99%的时间

166
00:06:59,219 --> 00:07:00,685
just gonna use this UITableViewController,
要使用这个UITableViewController,

167
00:07:00,754 --> 00:07:02,921
Cuz usually the best UI for a table view, is for
因为通常最好的表视图,UI

168
00:07:02,989 --> 00:07:05,156
it to take over the whole screen,
它接管整个屏幕,

169
00:07:05,225 --> 00:07:07,025
For it to fill the whole screen, it's rare that you can
填满整个屏幕,很少

170
00:07:07,094 --> 00:07:08,560
have a table view in part of your screen,
有一个表格视图在屏幕的一部分,

171
00:07:11,497 --> 00:07:14,866
So you can edit the attributes of the table view itself,
所以你可以编辑表格视图本身的属性,

172
00:07:14,935 --> 00:07:16,734
of course, by just clicking on it and
当然,只需点击它

173
00:07:16,803 --> 00:07:18,670
bringing up the attributes inspector,
将属性检查器,

174
00:07:18,738 --> 00:07:21,172
One thing that's a little frustrating about a table view
一件事有点令人沮丧的表视图

175
00:07:21,241 --> 00:07:24,309
is you've got the table view cells, which are UIViews,
你有表格视图细胞,ui视图,

176
00:07:24,377 --> 00:07:26,844
And then you've got the table view kind of that they're
然后你有他们的表视图类

177
00:07:26,913 --> 00:07:27,479
contained in,
包含在,

178
00:07:27,547 --> 00:07:29,147
That's a UIView also,
这是一个UIView也,

179
00:07:29,215 --> 00:07:31,149
And then you've got the table view controller behind it,
然后你有它背后的表格视图控制器,

180
00:07:31,218 --> 00:07:33,651
And you wanna set attributes on all of these things,
和你想要设置的属性在所有这些事情,

181
00:07:33,720 --> 00:07:38,523
So don't forget you can do Ctrl+Shift+Left-click, and
所以不要忘记你可以按Ctrl + Shift +左击,和

182
00:07:38,592 --> 00:07:39,424
it'll put up a little menu,
它会把一个小菜单,

183
00:07:39,492 --> 00:07:41,459
Says, okay, what thing under the mouse do you want?
说,好吧,什么事你想要在鼠标?

184
00:07:41,527 --> 00:07:44,796
Do you want the cell, the table view, or the controller?
你想要电池,表格视图,或控制器吗?

185
00:07:44,864 --> 00:07:48,800
And so that'll help you dig down to the thing you want,
这将帮助你挖到你想要的东西,

186
00:07:48,869 --> 00:07:50,368
All right, but once you have it selected,
好吧,但是一旦你已经选择它,

187
00:07:50,437 --> 00:07:52,203
whichever one you want, like the TableView or
哪个你想要的,像TableView或

188
00:07:52,272 --> 00:07:55,506
the Controller or the Cell, you can inspect it of course,
控制器或细胞,当然,你可以检查它

189
00:07:55,575 --> 00:07:59,877
Now, one important thing is this grouped versus plain that
现在,这是一个重要的分组和平原

190
00:07:59,946 --> 00:08:01,045
I showed you at the very beginning,
在一开始,我给你

191
00:08:01,114 --> 00:08:03,648
So here I'm gonna switch this one which is plain
这里我要换这一个平原

192
00:08:03,716 --> 00:08:05,182
over to grouped,
分组,

193
00:08:05,251 --> 00:08:07,352
So I'm just picking grouped in the style there,
所以我选择分组的风格,

194
00:08:07,421 --> 00:08:08,619
in the inspector,
在检查员,

195
00:08:08,688 --> 00:08:11,455
Another important attribute is dynamic versus static,
另一个重要的属性是动态和静态的,

196
00:08:11,524 --> 00:08:15,259
So dynamic is all the contents are coming from some database,
所以动态是所有的内容都来自一些数据库,

197
00:08:15,328 --> 00:08:18,363
And static is, I'm gonna put all the content right here in
和静态,我要把所有的内容在这里

198
00:08:18,431 --> 00:08:19,698
the story board, okay?
这个故事,好吗?

199
00:08:19,766 --> 00:08:21,199
So here we'll switch this one over to static,
这里我们将这个切换到静态的,

200
00:08:21,267 --> 00:08:25,570
So this is now a static, grouped table view,
这是现在一个静态,分组表视图,

201
00:08:25,639 --> 00:08:28,205
And I told you that usually static table views
我告诉你,通常静态表视图

202
00:08:28,274 --> 00:08:31,509
are grouped, and usually only grouped ones are static,
分组,通常只有分组是静态的,

203
00:08:31,577 --> 00:08:33,011
So usually these kinda go together,
通常这些有点混合在一起,

204
00:08:33,080 --> 00:08:35,880
They don't have to, they're separate properties, but
他们不需要,他们单独的属性,但是

205
00:08:35,949 --> 00:08:37,682
they generally go together,
他们通常一起去,

206
00:08:37,750 --> 00:08:41,051
Now the UI for these rows, most of the time you're
现在的UI这些行,你大部分的时间

207
00:08:41,120 --> 00:08:43,921
just going to build by dragging UI in,
要构建通过拖放界面,

208
00:08:43,990 --> 00:08:47,759
So here I'm just dragging the label in here, and you know,
这里我只是把标签拖在这里,你知道,

209
00:08:47,827 --> 00:08:51,429
maybe I'll change the name of the label, dragging the UI
也许我会改变标签的名称,拖动UI

210
00:08:51,498 --> 00:08:55,199
switch in there, cuz I want to set up some settings,
开关在那里,因为我要设置一些设置,

211
00:08:55,268 --> 00:08:58,569
Often times, by the way, this thing is used for settings and
通常,顺便说一下,这个是用于设置和

212
00:08:58,638 --> 00:08:59,737
things like that,
类似这样的事情,

213
00:08:59,806 --> 00:09:03,008
And then if I want to talk to these switches and
如果我想跟这些开关和

214
00:09:03,076 --> 00:09:06,410
labels that I brought in there, I'm actually gonna
标签,我带了,我真的会

215
00:09:06,479 --> 00:09:09,581
create outlets to my UITableViewController,
创建媒体UITableViewController,

216
00:09:09,649 --> 00:09:12,383
And since what's in this table is fixed for
因为在这张桌子是固定的

217
00:09:12,452 --> 00:09:14,485
all time in the storyboard,
在故事板中,

218
00:09:14,554 --> 00:09:15,954
I'm building it in a storyboard,
我是建筑在故事板,

219
00:09:16,022 --> 00:09:17,122
that's perfectly fine,
这是非常好,

220
00:09:17,190 --> 00:09:20,191
So I would just Ctrl + drag from them to my controller,
所以我就从他们Ctrl +拖动到控制器,

221
00:09:20,260 --> 00:09:23,061
which will work, and then I can create an outlet for
这将工作,然后我可以创建一个出口

222
00:09:23,130 --> 00:09:25,730
example, my feature enabled switch outlet and
我的功能开关插座和启用

223
00:09:25,799 --> 00:09:27,798
it'll create an outlet here,
这将创建一个出口,

224
00:09:27,867 --> 00:09:29,134
And then in my code and my controller,
然后在我的代码和控制器,

225
00:09:29,202 --> 00:09:31,969
I can obviously do whatever I want to that switch,
我可以做任何我想要的开关,

226
00:09:32,038 --> 00:09:35,573
So, it's almost like when you have a static table view, it's
所以,就像当你有一个静态表视图,它是

227
00:09:35,642 --> 00:09:38,843
almost just like a normal view that you would build UI in,
几乎就像一个正常的视图中,您将构建UI,

228
00:09:38,911 --> 00:09:40,845
It's just that it's divided into these rows,
只是它分为这些行,

229
00:09:40,913 --> 00:09:42,914
Which is nice for something like settings, right?
为类似的设置很好,对吧?

230
00:09:42,983 --> 00:09:45,549
If you think about the settings app, right,
如果你想设置应用程序,

231
00:09:45,618 --> 00:09:46,817
on your phone,
在你的手机上,

232
00:09:46,886 --> 00:09:50,355
It's got a lot of UI that's kind of in rows right, and
它有很多UI的行,和

233
00:09:50,423 --> 00:09:51,356
in tables,
在表中,

234
00:09:51,424 --> 00:09:53,958
So, if you really wanna see how static table view works,
所以,如果你真的想看到静态表视图是如何工作的,

235
00:09:54,027 --> 00:09:56,493
get your phone out, go to the general settings app and
拿出你的手机,去应用,一般设置

236
00:09:56,562 --> 00:09:57,662
just look around in there,
看看周围,

237
00:09:57,731 --> 00:10:01,232
That is table view after table view after table view where
表视图的表视图后表视图

238
00:10:01,300 --> 00:10:04,769
the rows are static built in some storyboard somewhere by
行是静态的一些故事板的地方建成的

239
00:10:04,838 --> 00:10:05,736
Apple,
苹果,

240
00:10:05,805 --> 00:10:11,075
All right, so that's pretty much it for static table,
好吧,这是几乎静态表,

241
00:10:11,144 --> 00:10:12,776
These are pretty straightforward to do,
这些都是很简单的,

242
00:10:12,845 --> 00:10:14,712
So I'm gonna clear this UI out of here,
所以我要清楚这个UI出去,

243
00:10:14,780 --> 00:10:17,649
this featured enabled out of there, then we're gonna talk
这个特点使出来,然后我们会说话

244
00:10:17,717 --> 00:10:21,252
about a different kind of table view, which is dynamic,
一种不同的表视图,这是动态的,

245
00:10:21,321 --> 00:10:24,555
So a dynamic table view, you set it here by picking dynamic
所以动态表视图,选择动态设置在这里

246
00:10:24,624 --> 00:10:27,992
property, prototypes, rather, there instead of static cells,
财产,原型,相反,而不是静态的细胞,

247
00:10:28,060 --> 00:10:30,694
really is a totally different kind of animal, and
真的是一种完全不同的动物,

248
00:10:30,763 --> 00:10:33,798
I'm gonna switch back to plain style because usually dynamic
我要切换回普通样式,因为通常是动态的

249
00:10:33,867 --> 00:10:35,700
tables are plain style,
表是简单的风格,

250
00:10:35,769 --> 00:10:39,003
These rows now instead of being something you're
现在这些行,而不是你的东西

251
00:10:39,071 --> 00:10:40,338
gonna build the UI and
要构建UI和

252
00:10:40,406 --> 00:10:43,274
they're static, instead they're prototypes,
它们是静态的,而不是他们的原型,

253
00:10:43,343 --> 00:10:46,043
They're things that are gonna be copied for every row,
他们会为每一行被复制的东西,

254
00:10:46,112 --> 00:10:48,813
So whatever UI you would build in one of these rows,
所以无论UI构建在这些行,

255
00:10:48,882 --> 00:10:50,381
And you can build customize UI,
您可以构建定制用户界面,

256
00:10:50,450 --> 00:10:52,116
like we saw with the static one,
像我们看到的静态,

257
00:10:52,185 --> 00:10:54,518
It's gonna be copied for every single row,
它会被复制对于每一行,

258
00:10:54,587 --> 00:10:55,419
So these are prototypes,
这是原型,

259
00:10:55,488 --> 00:10:56,721
You see what I mean by prototype?
你明白我的意思的原型?

260
00:10:56,790 --> 00:10:58,923
It's like a template that's gonna be copied over and
就像一个模板的复制过去,

261
00:10:58,992 --> 00:11:02,460
over and over to make your table,
一遍又一遍,让你的表,

262
00:11:02,529 --> 00:11:05,162
So that's a really different kind of
这是一个非常不同的

263
00:11:05,231 --> 00:11:06,197
way of looking at things,
看待事物的方式,

264
00:11:06,266 --> 00:11:08,232
Because this data that's gonna go into these rows is
因为这个数据是要进入这些行

265
00:11:08,301 --> 00:11:10,969
coming from some database somewhere probably and
可能来自一些数据库的某个地方

266
00:11:11,037 --> 00:11:12,403
filling out all this information,
填写这些信息,

267
00:11:12,472 --> 00:11:14,204
So it's a little more complicated to build
这是一个有点复杂

268
00:11:14,273 --> 00:11:16,641
a table like this, but not a lot more,
这样的表,但不是很多,

269
00:11:16,709 --> 00:11:19,977
So you can click on any one of the cells and
你可以点击任何一个细胞

270
00:11:20,046 --> 00:11:21,612
you can inspect it, right?
你可以检查它,对吧?

271
00:11:21,681 --> 00:11:22,947
The prototypes that you want,
你想要的原型,

272
00:11:23,016 --> 00:11:26,250
For example you could change its type from being custom
例如你可以改变它的类型被定义

273
00:11:26,319 --> 00:11:27,651
to being subtitle,
副标题,

274
00:11:27,720 --> 00:11:29,854
All right, so here's what a subtitle cell looks like,
好吧,这是一个副标题细胞是什么样子,

275
00:11:29,923 --> 00:11:31,956
Remember I showed you in the very second slide,
记住我给你的第二张幻灯片,

276
00:11:32,024 --> 00:11:34,391
it's one of the pre-canned types,
这是一个预定义的类型,

277
00:11:34,460 --> 00:11:35,693
And it just has, you know,
只是,你知道,

278
00:11:35,762 --> 00:11:38,463
a text field, like a little smaller text field,
一个文本字段,就像一个小文本字段,

279
00:11:38,531 --> 00:11:40,698
So that's a subtitle,
这是一个副标题,

280
00:11:40,767 --> 00:11:43,535
You can also set with accessory there,
你也可以设置与配件,

281
00:11:43,603 --> 00:11:45,536
a little thing that can appear on the right,
一件小事,可以出现在右边,

282
00:11:45,604 --> 00:11:48,506
It could be a little check mark that you turn on and off,
它可以是一个复选标记,你打开或关闭,

283
00:11:48,575 --> 00:11:49,873
It could be a disclosure indicator,
它可能是一个信息披露指标,

284
00:11:49,942 --> 00:11:52,544
which you want to put there if clicking on this row is going
你想把如果点击这一行吗

285
00:11:52,612 --> 00:11:53,845
to segue,
继续,

286
00:11:53,913 --> 00:11:56,514
Okay, that little disclosure indicator is just a little,
好吧,那个小披露指标只是一个小,

287
00:11:56,583 --> 00:11:58,716
kind of gray arrow thing that lets the user know,
灰色箭头的东西,可以让用户知道,

288
00:11:58,785 --> 00:12:00,918
hey if I click on this row, it's going to segue,
嘿,如果我点击这一行,它将继续,

289
00:12:00,987 --> 00:12:05,423
There's also kind of a special one called detail disclosure,
还有一种特殊的一个叫详细披露,

290
00:12:05,492 --> 00:12:06,857
And the detail disclosure looks like this,
和细节披露是这样的,

291
00:12:06,926 --> 00:12:08,292
it's a little "i" in a circle,
这是一个小“我”在一个圆,

292
00:12:08,361 --> 00:12:10,662
And what's really cool about that is you can segue by
有什么很酷,你可以继续

293
00:12:10,730 --> 00:12:13,898
clicking on the row, but if you click on the little blue
单击行,但如果你点击小蓝

294
00:12:13,967 --> 00:12:16,066
I, it does a different segue,
我,一个不同的segue,

295
00:12:16,135 --> 00:12:18,169
Okay, so you kind of have your row doing two different
好的,所以你有做两种不同的行

296
00:12:18,238 --> 00:12:20,438
segues, depending on whether they touch on the little i or
segue,取决于他们是否联系我或小

297
00:12:20,506 --> 00:12:21,573
touch somewhere else,
触摸别的地方,

298
00:12:21,641 --> 00:12:24,308
You see the little gray arrow next to the i?
你看到我旁边的小灰色箭头?

299
00:12:24,377 --> 00:12:26,277
That's the disclosure indicator,
披露的指标,

300
00:12:26,346 --> 00:12:28,579
So if I click on this row, it's going to segue,
如果我点击这一行,它将继续,

301
00:12:28,648 --> 00:12:29,914
If I click on the little i,
如果我点击小,

302
00:12:29,982 --> 00:12:32,350
it's gonna do some different segue,
它会做一些不同的继续,

303
00:12:32,418 --> 00:12:34,818
Maybe bring up some modal panel with some information or
可能带来一些模态与一些信息或面板

304
00:12:34,887 --> 00:12:36,287
something like that,
类似的,

305
00:12:36,355 --> 00:12:39,423
We'll talk about how that works in a second,
我们将讨论如何在第二个工作,

306
00:12:39,492 --> 00:12:41,225
All right, so I'm gonna go back to non-details,
好了,我要回到non-details,

307
00:12:41,293 --> 00:12:43,327
go ahead and get rid of that thing,
去摆脱那件事,

308
00:12:43,396 --> 00:12:45,997
But another style besides the four pre-canned
但另一个风格除了四个预定义

309
00:12:46,066 --> 00:12:48,433
ones I talked about in the beginning of this lecture
我讲的这节课的开始

310
00:12:48,502 --> 00:12:49,834
that you can pick is custom,
你可以选择自定义,

311
00:12:49,902 --> 00:12:53,438
So custom means that, that's just a UIView,
所以定制意味着,这只是一个UIView,

312
00:12:53,506 --> 00:12:55,606
that you can build any UI you want,
您可以构建任何你想要的用户界面,

313
00:12:55,675 --> 00:12:57,842
Again similar to that feature-enabled
再一次开启了类似

314
00:12:57,911 --> 00:12:59,911
with the switch that I showed,
我给的开关,

315
00:12:59,979 --> 00:13:01,779
But again, this UI is going to get copied over and
但是,这个UI将被复制过去

316
00:13:01,848 --> 00:13:05,550
over and over for
一遍又一遍的

317
00:13:05,618 --> 00:13:07,785
Notice, by the way, there are multiple prototypes,
注意,顺便说一下,有多个原型,

318
00:13:07,854 --> 00:13:10,421
That means you can have different setups of UI
这意味着你可以有不同的设置界面

319
00:13:10,489 --> 00:13:13,123
that you could use for different rows, okay?
你可以使用不同的行,好吗?

320
00:13:13,192 --> 00:13:15,493
And we're gonna name each of these prototypes so
我们要的名字每一个原型

321
00:13:15,562 --> 00:13:18,229
that in our code, we can pick which prototype we want for
在我们的代码,我们可以挑选我们想要的原型

322
00:13:18,298 --> 00:13:18,996
a certain row,
一个特定的行,

323
00:13:19,065 --> 00:13:20,632
It will copy that prototype,
它将复制原型,

324
00:13:21,868 --> 00:13:26,237
Now, these custom cells, you can resize them,
现在,这些定制的细胞,你可以调整它们,

325
00:13:26,306 --> 00:13:30,508
You can drag stuff into them, build UI you want,
你可以拖拽东西,你想要构建UI,

326
00:13:30,577 --> 00:13:32,376
Here, I've built this complicated UI with text
在这里,我已经建立了这个复杂的UI文本

327
00:13:32,445 --> 00:13:33,511
fields and an image,
字段和一个图像,

328
00:13:33,580 --> 00:13:36,214
This is very similar to a UI that I'm gonna build in
这非常类似于我要构建UI

329
00:13:36,282 --> 00:13:38,483
All right, now when you build this UI you're gonna want
好了,现在,当你建立这个UI你会想要的

330
00:13:38,484 --> 00:13:40,685
the demo,
演示,

331
00:13:40,753 --> 00:13:42,519
to use proper layout,
使用适当的布局,

332
00:13:42,588 --> 00:13:45,589
So stack views and hooking it to the edges just like you did
所以堆栈视图和连接到边缘就像你做的一样

333
00:13:45,658 --> 00:13:48,259
with the calculator or even stuff on the inside,
计算器甚至的东西在里面,

334
00:13:48,328 --> 00:13:49,827
I'll show you a little bit of that today,
我会给你一点,今天,

335
00:13:49,896 --> 00:13:51,228
a little more auto layout,
自动布局,

336
00:13:51,297 --> 00:13:54,431
Because if you do that, then the table view will be able to
因为如果你这样做,那么表格视图就可以

337
00:13:54,500 --> 00:13:58,436
figure out the size this thing needs to be dynamically,
算出尺寸这个东西需要动态,

338
00:13:58,505 --> 00:14:00,171
Okay, if you don't do the right auto layout then you
好吧,如果你不做正确的自动布局你

339
00:14:00,240 --> 00:14:02,273
kind of just have to fix the height of the rows, and
只需要修复的高度的行,和

340
00:14:02,341 --> 00:14:05,109
I'm going to talk about that in a minute as well,
我要谈论这个问题,

341
00:14:05,178 --> 00:14:07,144
So generally you want to do auto layout properly
所以通常你想做汽车布局更合理

342
00:14:07,213 --> 00:14:08,445
in there if you can,
如果你能,

343
00:14:08,514 --> 00:14:11,348
Now ther's no way I could wire up these
我现在没有办法连接

344
00:14:11,417 --> 00:14:13,184
elements directly to my controller,
元素直接向我的控制器,

345
00:14:13,252 --> 00:14:14,451
Do you see why?
你知道为什么吗?

346
00:14:14,520 --> 00:14:18,222
Because ther's only one outlet in my controller for
因为在我的控制器只有一个出口

347
00:14:18,291 --> 00:14:19,757
one of these labels,
其中一个标签,

348
00:14:19,826 --> 00:14:21,492
But there are hundreds of rows,
但也有数百行,

349
00:14:21,561 --> 00:14:22,794
So how is my one outlet gonna?
所以是我的一个出路如何?

350
00:14:22,862 --> 00:14:25,997
It can't be hooked up to 100 at once, okay,
不能连接到100,好吧,

351
00:14:26,066 --> 00:14:28,566
But I still need outlets because how am I gonna
但我仍然需要媒体,因为我要如何

352
00:14:28,635 --> 00:14:29,834
set these things?
设置这些东西?

353
00:14:29,903 --> 00:14:30,968
All right, and so
好吧,所以

354
00:14:31,037 --> 00:14:33,538
the way we're gonna deal with that is we're gonna wire these
我们要处理的是我们将线

355
00:14:33,606 --> 00:14:37,474
things up to outlets in the UITableViewCell,
东西在UITableViewCell网点,

356
00:14:37,543 --> 00:14:40,645
The UIView that contains them,
UIView包含,

357
00:14:40,714 --> 00:14:42,780
So I told you that this cell is a UIView,
所以我告诉你,这个细胞UIView,

358
00:14:42,848 --> 00:14:46,050
a UITableViewCell, and it contains all of these things,
UITableViewCell,它包含了所有的这些事情,

359
00:14:46,119 --> 00:14:47,485
these labels and stuff,
这些标签和东西,

360
00:14:47,554 --> 00:14:48,753
So, we're gonna have outlets in that,
所以,我们要在,

361
00:14:48,821 --> 00:14:50,488
Now this is the first time you've ever seen
这是你第一次见过

362
00:14:50,556 --> 00:14:53,390
outlet in anything but a controller and pretty much
插座一个控制器和差不多

363
00:14:53,459 --> 00:14:55,493
this is the only other time you're gonna have outlets,
这是你唯一一次会有网点,

364
00:14:55,561 --> 00:14:57,795
You can't have outlets in a regular view, but
你不能有媒体在普通视图中,但是

365
00:14:57,863 --> 00:15:01,699
you can have outlets in these special table view cells,
你可以在这些特殊的表视图细胞,

366
00:15:01,767 --> 00:15:04,569
All right, so let's see a little bit of how that works,
好吧,让我们看看一些这是如何工作的,

367
00:15:04,637 --> 00:15:07,238
So, one thing, if you're gonna have outlets,
所以,一件事,如果你要有网点,

368
00:15:07,306 --> 00:15:09,974
you know you're gonna need to have subclass, right?
你知道你会需要子类,对吧?

369
00:15:10,043 --> 00:15:12,476
Just like you have a controller, you can't use
就像你有一个控制器,你不能使用

370
00:15:12,545 --> 00:15:15,812
a generic UIViewController, can't put any outlets in that;
一个通用的ui,不能把任何媒体;

371
00:15:15,881 --> 00:15:19,050
you have to subclass it so you can wire out, same thing here,
你必须子类可以线,这里也一样,

372
00:15:19,118 --> 00:15:21,419
You're gonna have to make a custom subclass,
你需要自定义子类,

373
00:15:21,488 --> 00:15:22,686
a UITableViewCell,
UITableViewCell,

374
00:15:22,755 --> 00:15:24,288
You do that with New File,
你的新文件,

375
00:15:24,357 --> 00:15:27,058
It is still a Cocoa Touch Class, but here you're going
这仍然是一个可可触摸类,但是在这里你会

376
00:15:27,127 --> 00:15:29,459
to choose UITableViewCell as the super class,
选择UITableViewCell超类,

377
00:15:29,528 --> 00:15:31,028
not UITableViewController,
不是UITableViewController,

378
00:15:31,096 --> 00:15:32,830
UITableViewCell,
UITableViewCell,

379
00:15:32,899 --> 00:15:36,400
And again UITableViewCell is a subclass of UIView also,
再一次UITableViewCell也UIView的子类,

380
00:15:36,469 --> 00:15:37,619
All right, so you're going to pick a UITableViewCell,
好吧,那么你要选择一个UITableViewCell,

381
00:15:37,620 --> 00:15:38,770
by the way,
顺便说一下,

382
00:15:38,838 --> 00:15:41,605
call it something like MyTableViewCell or whatever,
称之为MyTableViewCell之类的,

383
00:15:41,674 --> 00:15:43,841
And then you're gonna do the exact same thing where you're
然后你会在你做同样的事情

384
00:15:43,910 --> 00:15:45,409
gonna have that cell selected,
会有细胞选择,

385
00:15:45,478 --> 00:15:47,478
And you're gonna go to the identity inspector,
你会去身份检查员,

386
00:15:47,547 --> 00:15:49,614
And you're gonna change it from being a generic
你会改变它从一个通用的

387
00:15:49,683 --> 00:15:51,882
UITableViewCell to being MyTableViewCell,
UITableViewCell MyTableViewCell,

388
00:15:51,951 --> 00:15:54,585
And this is gonna allow you to create outlets
这将允许您创建

389
00:15:54,654 --> 00:15:57,922
In MyTableViewCell to these things that are contained
在MyTableViewCell包含这些东西

390
00:15:57,991 --> 00:15:59,990
inside MyTableViewCell,
MyTableViewCell内部,

391
00:16:00,059 --> 00:16:02,092
Okay, so now we can wire them up,
好了,现在我们可以连接起来,

392
00:16:02,161 --> 00:16:04,696
So remember that static elements,
所以记住,静态元素,

393
00:16:04,764 --> 00:16:06,630
those things I showed you at the beginning,
在一开始,这些东西我给你

394
00:16:06,699 --> 00:16:08,533
those are wired up to the controller,
这些都是连接到控制器,

395
00:16:08,601 --> 00:16:11,468
Dynamic elements, where we have these prototypes,
我们有这些原型的动态元素,

396
00:16:11,537 --> 00:16:15,205
those are wired up to the TableViewCell outlets,
这些都是连接到TableViewCell网点,

397
00:16:15,274 --> 00:16:18,009
So what does it look like to wire them up?
所以它看起来像连接起来吗?

398
00:16:18,077 --> 00:16:20,244
I'm gonna have to do the same thing with the controller
我要做同样的事情与控制器

399
00:16:20,313 --> 00:16:23,781
where I'm gonna get the UI and the code on screen
在哪里我要去UI代码在屏幕上

400
00:16:23,849 --> 00:16:25,349
at the same time with the assistant editor,
同时,助理编辑,

401
00:16:25,418 --> 00:16:29,153
By the way, when you do that, if you're in automatic mode,
顺便说一下,当你这样做,如果你在自动模式下,

402
00:16:29,221 --> 00:16:30,388
there, see where it says automatic?
,看到说自动?

403
00:16:30,457 --> 00:16:31,722
It's pointing at automatic,
指着自动,

404
00:16:31,791 --> 00:16:34,992
It's not going to bring up the UITableViewCell, even if you
它不会打开UITableViewCell,即使你

405
00:16:35,061 --> 00:16:37,261
have the TableViewCell selected in the UI,
已经选择了TableViewCell在UI中,

406
00:16:37,330 --> 00:16:39,696
It's still gonna bring up the controller, okay?
它仍然会打开控制器,对吧?

407
00:16:39,765 --> 00:16:42,566
So if you want to wire up outlets to a TableViewCell,
所以如果你想连接TableViewCell网点,

408
00:16:42,635 --> 00:16:44,034
you have to manually or
你必须手动或

409
00:16:44,103 --> 00:16:46,670
forcibly get that TableViewCell- not
强行TableViewCell——不是

410
00:16:46,739 --> 00:16:49,840
the TableViewController- TableViewCell, on this side,
表——TableViewCell,在这边,

411
00:16:49,908 --> 00:16:53,044
So one way you can do it is by switching from Automatic
所以你可以做到的一种方法是通过从自动切换

412
00:16:53,112 --> 00:16:56,146
to Manual and then navigating over to finding your
手册,然后导航到找到你

413
00:16:56,215 --> 00:16:58,649
TableViewCell,swift class, right?
TableViewCell,斯威夫特类,对吧?

414
00:16:58,718 --> 00:17:00,017
And then choosing that,
然后选择,

415
00:17:00,086 --> 00:17:01,052
And now you're in manual mode,
现在你在手动模式,

416
00:17:01,121 --> 00:17:02,620
you've got the TableViewCell on the right, and
你右边的TableViewCell,

417
00:17:02,689 --> 00:17:03,987
you've got your storyboard on the left,
你有你的故事板在左边,

418
00:17:04,056 --> 00:17:05,656
So, now you can Ctrl+drag, right?
所以,现在你可以按Ctrl +阻力,对吧?

419
00:17:05,725 --> 00:17:06,991
You just need to be able to Ctrl+drag
你只需要按Ctrl +阻力

420
00:17:07,060 --> 00:17:08,091
between them is the problem,
他们之间的问题,

421
00:17:08,160 --> 00:17:10,094
So you gotta have them both on screen,
所以你必须有他们两个在屏幕上,

422
00:17:10,163 --> 00:17:11,828
All right, so then, once I have them on screen,
好吧,那么,一旦我让他们在屏幕上,

423
00:17:11,897 --> 00:17:14,965
I Ctrl+drag, just absolutely normally,
我按Ctrl +拖动,就完全正常,

424
00:17:15,034 --> 00:17:17,167
And it's gonna do all the things that an outlet does,
要做所有的事情,一个出口,

425
00:17:17,236 --> 00:17:18,870
it's gonna ask me, an outlet or action,
它会问我,一个出口或行动,

426
00:17:18,938 --> 00:17:20,337
By the way, you can do outlet or action here,
顺便说一下,你可以做出口或动作,

427
00:17:20,406 --> 00:17:21,371
And it's gonna ask,
会问,

428
00:17:21,440 --> 00:17:24,141
So here, I've picked that photo, the blue thing,
这里,我选择照片,蓝色的东西,

429
00:17:24,210 --> 00:17:26,043
Let's say it's a photo,
假设这是一个照片,

430
00:17:26,112 --> 00:17:28,112
And I'm calling this my photoImageView,
我称之为photoImageView,

431
00:17:28,181 --> 00:17:30,081
And it creates an outlet here,
这里创建了一个出口,

432
00:17:30,149 --> 00:17:31,782
Okay, so that's great,
好了,这很好,

433
00:17:31,851 --> 00:17:35,152
Now this TableViewCell code can talk to that photo,
现在这个TableViewCell代码可以跟这张照片,

434
00:17:35,221 --> 00:17:38,055
The ImageView could for example set the image or
ImageView可以设置图像或为例

435
00:17:38,123 --> 00:17:39,122
whatever,
无论如何,

436
00:17:39,191 --> 00:17:42,360
But of course it needs to know what information to put
当然,它需要知道什么信息

437
00:17:42,428 --> 00:17:44,829
in that photo for that row, right?
在这张照片这一行,对吧?

438
00:17:44,898 --> 00:17:47,765
This thing is gonna be repeated 100 times, and
这个东西是重复100次,

439
00:17:47,834 --> 00:17:51,068
each one needs to know what its row's photo is,
每一个需要知道什么是连续的照片,

440
00:17:51,136 --> 00:17:54,472
So you're also gonna need some public API on your
所以你也需要一些公共API

441
00:17:54,540 --> 00:17:58,376
TableViewCell which gives it the data it needs to fill up
TableViewCell给它所需要的数据填满

442
00:17:58,444 --> 00:17:59,643
all its outlets,
所有的媒体,

443
00:17:59,712 --> 00:18:02,246
Okay, so you're gonna have some var, which I've
好的,所以你会有一些var,这我

444
00:18:02,315 --> 00:18:06,183
called infoShownByThisCell, could be of any type you want,
叫infoShownByThisCell,可能是你想要的任何类型的,

445
00:18:06,252 --> 00:18:09,319
And somebody is gonna set it, you'll see soon who sets it,
有人会把它,你很快就会看到谁使它,

446
00:18:09,388 --> 00:18:11,822
And once it sets it, now we can update the UI and
一旦它集,现在我们可以更新UI

447
00:18:11,891 --> 00:18:15,026
put all this information into the outlets,
把所有这些信息,

448
00:18:15,094 --> 00:18:18,028
Okay, so this is how the information at each row in
好吧,这是在每一行的信息

449
00:18:18,097 --> 00:18:21,098
the table is going to be put into these UI elements,
表是放在这些UI元素,

450
00:18:21,167 --> 00:18:23,067
You all following me so far?
到目前为止你们都跟着我?

451
00:18:24,804 --> 00:18:28,305
All right, let's talk about these two protocols,
好吧,让我们来谈谈这两个协议,

452
00:18:28,374 --> 00:18:31,142
the dataSource and the delegate, okay,
数据源和委托,

453
00:18:31,210 --> 00:18:33,277
They're critical to making UITableView work,
他们使UITableView工作的关键,

454
00:18:33,346 --> 00:18:35,980
UITableView is a class that literally cannot function
UITableView是字面上的类不能函数

455
00:18:36,049 --> 00:18:37,915
without its dataSource and delegate,
没有它的数据源和委托,

456
00:18:37,983 --> 00:18:40,650
It's not really like split view controller where, eh, you
这不是真的喜欢拆分视图控制器,呃,你

457
00:18:40,719 --> 00:18:43,454
don't have to do anything with a delegate if you don't want,
不需要做任何委托如果你不想要,

458
00:18:43,523 --> 00:18:44,388
it'll still work,
它仍然会工作,

459
00:18:44,457 --> 00:18:46,022
This, you really have to do it,
你真的要做,这

460
00:18:46,091 --> 00:18:47,157
Especially the dataSource,
特别是数据源,

461
00:18:47,226 --> 00:18:49,059
If you don't give it a dataSource, the only
如果你不给它一个数据源,唯一

462
00:18:49,128 --> 00:18:51,262
way a table view would work without its delegate and
一个表格视图的工作方式没有委托和

463
00:18:51,330 --> 00:18:53,597
dataSource is if it were purely static table,
数据源是如果是纯粹的静态表,

464
00:18:53,666 --> 00:18:55,833
Like the table that had the feature enabled with
像表启用该特性

465
00:18:55,902 --> 00:18:56,467
the switch,
开关,

466
00:18:56,535 --> 00:18:58,435
That you could deal without the dataSource,
你可以交易没有数据源,

467
00:18:58,504 --> 00:19:00,771
But otherwise, if it's providing dynamic data,
但除此之外,如果它是提供动态数据,

468
00:19:00,840 --> 00:19:01,806
obviously it needs the data,
显然需要大量的数据,

469
00:19:01,874 --> 00:19:03,574
And the only way it can get data is
它可以得到数据的唯一方法

470
00:19:03,643 --> 00:19:05,042
through its dataSource,
通过其数据源,

471
00:19:05,111 --> 00:19:07,745
So, as I already told you, UITableViewController
所以,我已经告诉过你,UITableViewController

472
00:19:07,813 --> 00:19:10,848
automatically sets itself as its delegate and dataSource,
自动设置本身作为其代表和数据源,

473
00:19:10,916 --> 00:19:13,284
So you can just put your code for these delegate methods
所以你可以把你的代码对这些委托的方法

474
00:19:13,352 --> 00:19:15,953
right in your subclass of UITableViewController, right,
在你的子类UITableViewController,

475
00:19:16,021 --> 00:19:21,858
MyTableViewController, or whatever, and put it in there,
MyTableViewController等等,把它放在那里,

476
00:19:21,927 --> 00:19:25,596
Also, there's a cool var in TableViewController called
此外,表中有一个很酷的var

477
00:19:25,665 --> 00:19:29,633
tableView, which is basically gonna return self,view, but
表视图,这基本上是要返回自我,视图,但是

478
00:19:29,702 --> 00:19:31,034
as a UITableView,
UITableView,

479
00:19:31,103 --> 00:19:34,171
And that way you can talk to the UITableView that your
这样你可以跟UITableView

480
00:19:34,240 --> 00:19:36,740
UITableViewController is controlling,
UITableViewController控制,

481
00:19:36,809 --> 00:19:39,343
So when do we need to implement the dataSource?
所以,当我们需要实现数据源吗?

482
00:19:39,412 --> 00:19:41,812
Anytime we have dynamic data, non-static,
只要我们有动态数据,非静态,

483
00:19:41,881 --> 00:19:44,748
There are three really important methods in this
有三个非常重要的方法

484
00:19:44,817 --> 00:19:46,467
One is, how many sections are in my table?
一是,我的表中有多少部分?

485
00:19:46,468 --> 00:19:48,118
protocol,
议定书,

486
00:19:48,187 --> 00:19:49,654
Could be one section if the whole thing is just
可如果整件事只是一个部分

487
00:19:49,722 --> 00:19:50,221
a bunch of rows,
一群行,

488
00:19:50,289 --> 00:19:51,521
How many sections, and
有多少部分,和

489
00:19:51,590 --> 00:19:53,691
then how many rows are in each section?
然后在每个部分有多少行?

490
00:19:53,759 --> 00:19:55,359
You're gonna be asked one by one,
你要问一个接一个地

491
00:19:55,428 --> 00:19:56,326
How many rows in this section?
在这一节中有多少行?

492
00:19:56,395 --> 00:19:57,995
How many rows in this section? How many are in this section?
在这一节中有多少行?

493
00:19:58,064 --> 00:20:00,231
So it knows how many rows are in every section,
所以它知道在每一节中,有多少行

494
00:20:00,300 --> 00:20:03,200
And then most importantly, give me one of those
然后最重要的是,给我其中的一个

495
00:20:03,268 --> 00:20:06,103
UITableViewCells to draw this row,
uitableviewcell池画这一行,

496
00:20:06,172 --> 00:20:09,339
Okay, so for each row that the TableView wants to draw,
好的,所以对于TableView想画的每一行,

497
00:20:09,408 --> 00:20:11,675
i's going to ask you, okay, give me a UITableViewCell now,
我问你,好吧,给我一个UITableViewCell现在,

498
00:20:11,744 --> 00:20:14,011
cuz I'm going to draw this row,
因为我要画这一行,

499
00:20:14,080 --> 00:20:14,978
Okay, so that's how it works,
好了,这是它是如何起作用的,

500
00:20:15,047 --> 00:20:16,714
that's fundamentally how this works,
本质上这是如何工作的,

501
00:20:16,782 --> 00:20:19,717
Now, all these methods are in the UITableViewDataSource
现在,所有这些方法都需要

502
00:20:19,785 --> 00:20:20,884
protocol,
议定书,

503
00:20:20,953 --> 00:20:23,420
So let's look at the last one, the give me a UITableViewCell,
让我们看看最后一个,给我一个UITableViewCell,

504
00:20:23,489 --> 00:20:24,755
cuz it's the most complicated,
因为它是最复杂的,

505
00:20:24,824 --> 00:20:27,158
The other ones are super, super simple,
其他的都是超级,超级简单,

506
00:20:27,226 --> 00:20:30,894
So the way that you are going to give a UITableViewCell
所以你要给一个UITableViewCell

507
00:20:30,963 --> 00:20:34,965
back to the TableView when it's time to draw a certain
回到了TableView的时候画一个确定

508
00:20:35,034 --> 00:20:37,367
row is by a method being called,
行是由一个方法被调用,

509
00:20:37,436 --> 00:20:39,770
Now, you might be worried here, it's like woah,
现在,你可能会担心在这里,就像哇,

510
00:20:39,839 --> 00:20:43,173
I'm gonna have this big UI with all these labels and
我要与所有这些标签和这么大的UI

511
00:20:43,242 --> 00:20:47,477
image views in it, and I have, what if I have 100,000 rows?
形象的观点,我有,如果我有100000行吗?

512
00:20:47,546 --> 00:20:48,846
I'm going to make 100,000 views,
我要做100000的观点,

513
00:20:48,915 --> 00:20:52,115
Surely that's going to be terrible performance,
无疑这将是糟糕的性能,

514
00:20:52,184 --> 00:20:54,451
And in fact, that would be terrible performance, okay,
事实上,这将是糟糕的表现,好吧,

515
00:20:54,520 --> 00:20:55,353
Views are not cheap,
观点是不便宜,

516
00:20:56,655 --> 00:20:59,957
But no worries, because all your UITableViewCells,
但是不用担心,因为你所有的uitableviewcell池,

517
00:21:00,025 --> 00:21:03,861
these UIViews that draw the rows, they're reused,
这些ui视图绘制行,他们重用,

518
00:21:03,930 --> 00:21:06,897
So only the visible ones have UITableViewCells,
所以只有可见的uitableviewcell池,

519
00:21:06,966 --> 00:21:09,900
As you scroll around, the ones that scroll off the top
你滚动,滚动的顶部

520
00:21:09,969 --> 00:21:13,770
get picked up and put around and used on the bottom, okay?
拾起,把周围和底部使用,好吗?

521
00:21:13,839 --> 00:21:16,340
And the new data keeps getting pumped into them,
新的数据不断注入,

522
00:21:16,409 --> 00:21:17,474
Do you see what I'm saying?
你看到我在说什么吗?

523
00:21:17,543 --> 00:21:18,876
So those cells, only the,
所以这些细胞,只有,

524
00:21:18,945 --> 00:21:20,845
maybe the ones on the screen plus two or
也许那些在屏幕上加两个或两个

525
00:21:20,913 --> 00:21:23,547
three on either side are actually getting created,
三两侧实际上是创建,

526
00:21:23,616 --> 00:21:24,815
They're just getting reused,
他们只是得到重用,

527
00:21:24,884 --> 00:21:26,884
As you scroll up and down, they keep getting reused,
当你上下滚动,他们越来越重用,

528
00:21:28,754 --> 00:21:30,287
Now, the thing about that reuse,
现在,重用的事,

529
00:21:30,356 --> 00:21:31,422
I want you to be very careful of,
我想要你非常小心,

530
00:21:31,490 --> 00:21:32,255
I put it in red,
我把它放在红色,

531
00:21:32,324 --> 00:21:34,191
When I put it in red, you know that means wake up and
当我把它放在红色,你知道这意味着醒来

532
00:21:34,260 --> 00:21:36,427
watch out, cuz your homework,
小心,因为你的家庭作业,

533
00:21:36,496 --> 00:21:38,795
When you're doing multithreaded things,
当你做多线程的事情,

534
00:21:38,864 --> 00:21:39,530
you've got to be careful,
你要小心,

535
00:21:39,599 --> 00:21:42,366
because by the time you come back from something you asked
因为你回来的时候你问的东西

536
00:21:42,435 --> 00:21:47,471
to do on another thread, your cell might be reused, okay,
在另一个线程,你的细胞会被重用,好吧,

537
00:21:47,540 --> 00:21:49,773
And so you've got to be prepared for that,
所以你要做好准备,

538
00:21:49,842 --> 00:21:52,609
You gotta understand whether you're still the cell you
你必须明白你是否你仍然细胞

539
00:21:52,678 --> 00:21:55,346
thought you were when you sent something off to go in
还以为你当你把东西送去了进去

540
00:21:55,414 --> 00:21:56,646
another thread,
另一个线程,

541
00:21:56,715 --> 00:21:58,715
Okay, so I'm warning you,
我警告你,

542
00:21:58,784 --> 00:22:01,518
So what does this method look like that the UITableView is
所以这个方法是什么样子,UITableView

543
00:22:01,587 --> 00:22:03,954
gonna send to its data source to say,
要发送给它的数据源,

544
00:22:04,023 --> 00:22:05,355
give me a UITableViewCell?
给我一个UITableViewCell ?

545
00:22:05,424 --> 00:22:08,425
It's called cellForRowAt indexPath,
它被称为cellForRowAt indexPath,

546
00:22:08,494 --> 00:22:09,827
You see it right there,
你看到它,

547
00:22:09,895 --> 00:22:11,094
That's its signature,
这是它的签名,

548
00:22:11,163 --> 00:22:14,165
It really only has that one argument, indexPath,
真的只有一个参数,indexPath,

549
00:22:14,233 --> 00:22:16,700
The indexPath is just a little container of
indexPath只是一个小的容器

550
00:22:16,769 --> 00:22:18,469
the section and row,
部分和行

551
00:22:18,537 --> 00:22:20,704
You could imagine this is even called cellForRowAt
你甚至可以想象这是叫cellForRowAt

552
00:22:20,772 --> 00:22:21,505
section and row,
部分和行,

553
00:22:21,573 --> 00:22:23,974
But it just puts them in one argument called
但它把它们装进一个参数

554
00:22:24,043 --> 00:22:25,275
an indexPath, okay,
一个indexPath,好吧,

555
00:22:25,344 --> 00:22:27,577
And then all you return is a UITableViewCell,
然后你返回是一个UITableViewCell,

556
00:22:27,646 --> 00:22:30,047
And it's gonna use that UITableViewCell to draw
它会用UITableViewCell画

557
00:22:30,115 --> 00:22:31,048
that row,
这一行,

558
00:22:31,117 --> 00:22:33,651
So it really couldn't be a simpler API,
这实在是一个简单的API,

559
00:22:33,719 --> 00:22:36,687
It's at the heart of exactly what it's asking you to do,
它的核心是问你做什么,

560
00:22:36,756 --> 00:22:38,555
Now, what are you gonna do inside this method?
现在,在这个方法你要做什么?

561
00:22:38,624 --> 00:22:41,859
Well, first you're going to have to get the data from your
首先,你必须要得到从你的数据

562
00:22:41,928 --> 00:22:44,628
model that you want to show in that row,
你想在这一行显示模型,

563
00:22:45,732 --> 00:22:46,463
Okay,
好吧,

564
00:22:46,532 --> 00:22:47,998
And you can do this any way you want,
你可以做任何你想要的方式,

565
00:22:48,066 --> 00:22:50,234
I have a very convenient data structure here called
我在这里有一个非常方便的数据结构

566
00:22:50,302 --> 00:22:52,569
myInternalDataStructure that happens to be divided
myInternalDataStructure发生分裂

567
00:22:52,637 --> 00:22:54,038
in sections and rows,
在部分和行,

568
00:22:54,107 --> 00:22:55,639
So I can just index into it,
所以我可以指数,

569
00:22:55,708 --> 00:22:57,508
But you might have a different data structure,
但你可能会有不同的数据结构,

570
00:22:57,576 --> 00:22:59,543
But you've gotta take the section and row so
但你得把部分和行

571
00:22:59,611 --> 00:23:01,912
that you know which row you're talking about, and
你知道你正在谈论哪一行,和

572
00:23:01,981 --> 00:23:03,347
get the data out of your model,
获取数据的模型,

573
00:23:03,416 --> 00:23:04,949
Maybe you're doing a database query,
也许你正在做一个数据库查询,

574
00:23:05,017 --> 00:23:07,685
Maybe you're even doing a network query in another
也许你甚至在另一个做网络查询

575
00:23:07,753 --> 00:23:10,921
thread and it's gonna return and fill this out, whatever,
线程,它会返回,并填这张表好,无论如何,

576
00:23:10,989 --> 00:23:12,889
You need to figure out how to get your data,
你需要找出如何让你的数据,

577
00:23:12,958 --> 00:23:15,959
Now, once you have your data, you're gonna create a cell,
现在,一旦你有了你的数据,你要创建一个细胞,

578
00:23:16,028 --> 00:23:17,328
I'm gonna show you how to do that in a second,
我要告诉你怎么做,

579
00:23:17,396 --> 00:23:19,029
And then you're just gonna load up that cell
然后你要负载细胞

580
00:23:19,098 --> 00:23:19,764
with the data,
的数据,

581
00:23:21,200 --> 00:23:23,733
So let's talk about how we create that cell and
所以让我们来谈谈我们如何创建细胞

582
00:23:23,802 --> 00:23:24,902
So I'm gonna take this little piece of code, and
所以我要把这一小段代码,和

583
00:23:24,903 --> 00:23:26,003
load it up,
负载,

584
00:23:26,072 --> 00:23:28,605
I'm gonna keep it on screen while I go back to showing you
我要让它在屏幕上虽然我回去给你们看

585
00:23:28,674 --> 00:23:31,408
what's happening in the UI here,
在UI中,发生了什么

586
00:23:31,477 --> 00:23:37,147
So first let's talk about a cell that's not a custom cell,
首先让我们来谈谈一个细胞,这不是一个定制的细胞,

587
00:23:37,216 --> 00:23:38,648
It's just a regular cell like subtitle,
这只是一个常规的细胞像字幕,

588
00:23:38,717 --> 00:23:40,450
You see subtitle up there?
你看到字幕?

589
00:23:40,519 --> 00:23:43,687
Okay, so we're gonna use this method here called
好的,所以我们要使用这个方法

590
00:23:43,756 --> 00:23:47,925
dequeueReusableCell(withIdent- ifier: for: indexPath),
dequeueReusableCell withIdent(ifier - indexPath)::

591
00:23:47,993 --> 00:23:50,461
And that's just gonna return us a UITableViewCell,
要返回我们UITableViewCell,

592
00:23:50,530 --> 00:23:53,630
Now, again, this is a reused UITableViewCell,
现在,再一次,这是一个重用UITableViewCell,

593
00:23:53,699 --> 00:23:57,468
Okay, being reused,
好吧,被重用,

594
00:23:57,536 --> 00:24:01,438
now if this cell, if there's not enough been created yet,
如果这个单元格,如果没有足够的创建,

595
00:24:01,507 --> 00:24:03,573
then it will create one based on your prototype,
然后它会创建一个基于你的原型,

596
00:24:03,642 --> 00:24:05,776
Whatever your prototype you pick in there,
无论你的原型你选择,

597
00:24:05,845 --> 00:24:08,979
And you pick which prototype with this string,
和你选的原型与这个字符串,

598
00:24:09,047 --> 00:24:10,281
the identifier string
标识符的字符串

599
00:24:10,349 --> 00:24:13,650
which you set in the inspector for the cell,
设置单元格的检查员,

600
00:24:13,719 --> 00:24:15,652
So, it's just in there, it's called identifier,
所以,只是在那里,它被称为标识符,

601
00:24:15,721 --> 00:24:18,489
the utilities inspector on the right is inspecting that cell,
右边的公用事业公司检查员检查细胞,

602
00:24:18,558 --> 00:24:20,424
that top cell that says title, subtitle,
顶细胞说标题、副标题、

603
00:24:20,492 --> 00:24:21,258
it's inspecting that,
这是检查,

604
00:24:21,326 --> 00:24:23,761
And I'm just setting the identifier of my cell, so
我只是设置标识符我的细胞,所以

605
00:24:23,829 --> 00:24:26,596
now in my code when I say, dequeueReuseableCellwithIdent-
现在在我的代码当我说,dequeueReuseableCellwithIdent -

606
00:24:26,665 --> 00:24:30,634
ifier of MyCell, it's gonna make a copy of that prototype,
MyCell丰厚,它会复制的原型,

607
00:24:31,737 --> 00:24:33,303
Unless there's some to be reused,
除非有一些被重用,

608
00:24:33,372 --> 00:24:34,638
then it'll just reuse them,
然后它会重用他们,

609
00:24:34,706 --> 00:24:36,339
But until it gets enough to reuse,
但是,直到它得到足够的重用,

610
00:24:36,408 --> 00:24:37,273
it uses that prototype and
它使用原型和

611
00:24:37,342 --> 00:24:39,043
just makes copies of it as necessary,
只是复制它是必要的,

612
00:24:40,479 --> 00:24:43,680
Now, this is a non-custom cell, so
这是一个非定制手机,所以

613
00:24:43,749 --> 00:24:46,149
the only, well there's a few fields you can set,
唯一,你可以设置有几个字段,

614
00:24:46,218 --> 00:24:50,787
You can go look at the API for UITableViewCell to find out,
你可以去看看API UITableViewCell为了找到答案,

615
00:24:50,856 --> 00:24:54,325
But the cell, set those two pieces of text, title and
但细胞,设置两块文本,标题和

616
00:24:54,393 --> 00:24:55,258
subtitle there,
副标题,

617
00:24:55,327 --> 00:24:58,362
You just, you use textlabel,text and
你,你使用textlabel,文本和

618
00:24:58,430 --> 00:25:00,530
detailtextlabel,text,
detailtextlabel、文本

619
00:25:00,599 --> 00:25:02,399
Those are optional, so they could be nil,
这些都是可选的,所以他们可能是零,

620
00:25:02,468 --> 00:25:04,134
because if there's a custom cell, for
因为如果有一个定制的细胞,

621
00:25:04,203 --> 00:25:05,469
example, it might be nil,
的例子中,它可能是零,

622
00:25:06,606 --> 00:25:08,472
So anyway that's it, you just set those,
总之就是这样,你把这些,

623
00:25:08,541 --> 00:25:09,673
those are just UILabels,
这些只是uilabel,

624
00:25:09,742 --> 00:25:12,842
And so you just set the text, it couldn't be easier,
所以你只是设置文本,它不容易,

625
00:25:12,911 --> 00:25:13,710
And that's true for
这是真的

626
00:25:13,779 --> 00:25:16,279
all the pre-canned ones, you're gonna set these,
所有预定义的,你要设置这些,

627
00:25:16,348 --> 00:25:18,849
There is actually, I can show it, but there's an image also,
实际上,我可以带它,但是有一个图像,

628
00:25:18,918 --> 00:25:22,419
that you can set, a little image in the cell,
你可以设置,图像在细胞中,

629
00:25:22,488 --> 00:25:23,920
And that's also in the pre-canned ones,
这也是在预定义的,

630
00:25:23,989 --> 00:25:25,889
so you could do that as well, okay?
你可以这样做,好吗?

631
00:25:25,957 --> 00:25:28,125
So that's it, that's just simple,
就是这样,这就是简单,

632
00:25:28,194 --> 00:25:30,761
that's all you need to do to provide your data
这是所有您需要做的提供数据

633
00:25:30,829 --> 00:25:33,764
to the TableViewCell is just dequeue one of these cells,
TableViewCell只是出列一个细胞,

634
00:25:33,832 --> 00:25:35,599
Just load it up and return it, and
加载并返回它,

635
00:25:35,668 --> 00:25:38,868
now the tableView will use that to draw,
现在画的表视图将使用,

636
00:25:38,937 --> 00:25:41,838
But let's talk about a custom cell, so
但让我们来谈谈一个定制的细胞,所以

637
00:25:41,907 --> 00:25:43,974
now I'm talking about the second row down,
现在我谈论第二行,

638
00:25:44,042 --> 00:25:45,342
And look at its type,
看看它的类型,

639
00:25:45,410 --> 00:25:48,278
it's custom- it's not subtitle- it's custom,
自定义——它不是副标题——这是定制的,

640
00:25:48,346 --> 00:25:50,647
Little different for a custom cell,
小不同的一个定制的细胞,

641
00:25:50,716 --> 00:25:53,383
You're still gonna do dequeueReusableCellwithIdenti-
你仍然要做dequeueReusableCellwithIdenti -

642
00:25:53,452 --> 00:25:54,751
fier for index path, okay?
菲尔对索引路径?

643
00:25:54,820 --> 00:25:57,688
But of course you're going to use a different identifier,
当然你要使用一个不同的标识符,

644
00:25:57,756 --> 00:26:00,524
cuz now I'm talking about the second cell down which I'm
因为现在我谈论我第二个单元格

645
00:26:00,593 --> 00:26:01,758
calling my custom cell,
叫我定制的细胞,

646
00:26:01,827 --> 00:26:06,029
Now here there's no title and subtitle in that second row,
现在这里没有标题和副标题,第二行,

647
00:26:06,098 --> 00:26:08,298
Presumably there's that image and
大概有这一形象

648
00:26:08,366 --> 00:26:10,868
the thing under text under it and text on the side,
下的文本在它和文本,

649
00:26:10,937 --> 00:26:12,735
All the things, whatever your UI switch,
所有的事情,无论你的UI开关,

650
00:26:12,804 --> 00:26:15,138
whatever you built in this custom cell,
无论你在这个自定义单元格,

651
00:26:15,207 --> 00:26:18,274
And all that stuff has got outlets hooked up to
和所有这些东西有插座连接

652
00:26:18,343 --> 00:26:21,879
the UITableViewCell containing it, remember all that we did?
UITableViewCell包含它,还记得我们所做的吗?

653
00:26:21,947 --> 00:26:25,549
So you need to just pass the data to that UITableViewCell
所以你需要将数据传递给UITableViewCell

654
00:26:25,618 --> 00:26:28,752
and it's responsible for loading up all the UI,
它负责装载所有的用户界面,

655
00:26:28,821 --> 00:26:30,153
Now how do you do that?
现在你怎么做呢?

656
00:26:30,222 --> 00:26:31,955
First thing you need to do is take that dequeued
你需要做的第一件事就是把它列中移除

657
00:26:32,023 --> 00:26:36,126
thing that came back, which is of type UITableViewCell,
回来,这是UITableViewCell类型,

658
00:26:36,195 --> 00:26:38,895
And cast it with "as" to be of
,它的“作为”

659
00:26:38,964 --> 00:26:41,765
the type of your subclass of UITableViewCell,
你的UITableViewCell子类的类型,

660
00:26:41,834 --> 00:26:44,000
Otherwise you won't be able to call any of this API,
否则你将无法调用这些API,

661
00:26:44,069 --> 00:26:47,871
Okay, so you're just gonna do, if I can let this cell equal
好的,所以你要做的,如果我可以让这个细胞相等

662
00:26:47,940 --> 00:26:50,574
the dequeued thing as MyTableViewCell,
列中移除的MyTableViewCell,

663
00:26:50,642 --> 00:26:54,444
Then I'm going to talk to MyTableViewCell using its API
然后我要跟MyTableViewCell使用它的API

664
00:26:54,513 --> 00:26:58,148
and set, for example, infoShownByThisCell to be
并设置,例如infoShownByThisCell

665
00:26:58,217 --> 00:27:01,084
the data that's app that section in row,
行数据的应用程序部分,

666
00:27:01,153 --> 00:27:04,087
Okay, so to go back to the code I was showing before,
所以回到我之前展示的代码,

667
00:27:04,156 --> 00:27:07,191
that info shown by the cell is that var right there,
信息显示的细胞是var,

668
00:27:08,928 --> 00:27:11,628
The var that I made public in MyTableViewCell,
我在MyTableViewCell公开的var,

669
00:27:11,697 --> 00:27:14,331
And then it's gonna update UI and set all of its outlets and
然后它会更新UI和所有的媒体和设置

670
00:27:14,400 --> 00:27:14,931
all of that,
所有这一切,

671
00:27:15,000 --> 00:27:16,933
Okay, so that's it, that how it works,
好吧,就是这样,它是如何工作的,

672
00:27:17,002 --> 00:27:19,236
Those are the two cases, the kind of pre-canned one and
这两个案例中,这种预定义的和

673
00:27:19,304 --> 00:27:21,271
the custom one,
自定义一个,

674
00:27:21,339 --> 00:27:23,540
They're almost identical, you're still dequeuing cells,
他们几乎一模一样,你还是退出队列细胞,

675
00:27:23,609 --> 00:27:26,676
you just set the data a little bit differently,
你刚刚设置的数据有点不同,

676
00:27:26,745 --> 00:27:32,149
Okay, the data source also has to know how many sections and
好的,数据源,也知道有多少部分

677
00:27:32,218 --> 00:27:32,815
rows,
行,

678
00:27:32,884 --> 00:27:33,650
It's really simple,
这很简单,

679
00:27:33,719 --> 00:27:35,919
there's a method called numberOfSections in tableView,
有一个方法叫做numberOfSections在表视图,

680
00:27:35,988 --> 00:27:37,287
And that's going to return int,
会返回int,

681
00:27:37,356 --> 00:27:38,788
how many sections there are,
有多少部分,

682
00:27:38,857 --> 00:27:39,989
By the way that one is optional;
顺便说一下,一个是可选的;

683
00:27:40,058 --> 00:27:41,558
you don't have to implement that one,
你没有实现,

684
00:27:41,626 --> 00:27:43,927
If you don't, it will assume there's one section,
如果你不,假设有一个部分,

685
00:27:43,996 --> 00:27:46,629
that all the rows are in this one big section,
中的所有行这一个大的部分,

686
00:27:46,698 --> 00:27:49,466
The other one though, which is numberOfRowsInSection where it
不过,另一个numberOfRowsInSection它也

687
00:27:49,535 --> 00:27:50,900
passes you a section number, and
你经过一段号码

688
00:27:50,969 --> 00:27:53,003
you have to say how many rows are in the section,
你说有多少行部分,

689
00:27:53,071 --> 00:27:54,171
That is not optional,
这不是可选的,

690
00:27:54,239 --> 00:27:57,140
that is mandatory, and you must answer this question for
这是强制性的,你必须回答这个问题

691
00:27:57,208 --> 00:27:59,976
every single section that you claim that your table has
每一个部分,你声称你的表

692
00:28:00,045 --> 00:28:03,513
with numberOfSections in table, okay?
与numberOfSections表,好吗?

693
00:28:03,581 --> 00:28:06,450
So that's it, that's simple, why does it need to know how
就是这样,很简单,为什么它需要知道

694
00:28:06,519 --> 00:28:08,751
many rows and all of the sections, by the way?
许多行和所有的部分,顺便说一下吗?

695
00:28:08,820 --> 00:28:11,155
Cuz it's a scroll view and it needs to know how big a thing,
因为这是一个滚动视图,它需要知道一件事,多大

696
00:28:11,223 --> 00:28:13,457
it needs to set it's content size basically, right?
它需要设置它的内容大小基本上,对吧?

697
00:28:13,525 --> 00:28:15,992
It needs to know how big a thing it's scrolling over, so
它需要知道多大的一件事是滚动的,所以

698
00:28:16,061 --> 00:28:16,826
it needs to know,
它需要知道,

699
00:28:16,895 --> 00:28:20,296
But it also needs to know when to ask you for the data and
但它也需要知道什么时候问你的数据

700
00:28:20,365 --> 00:28:23,066
all that, so it's pretty obvious it needs to know that,
这一切,所以很明显需要知道,

701
00:28:23,135 --> 00:28:24,534
In a static table by the way,
在静态表,

702
00:28:24,603 --> 00:28:26,102
it's not gonna ask you these questions,
不会问你这些问题,

703
00:28:26,171 --> 00:28:27,437
So don't even worry about that,
所以不担心,

704
00:28:27,506 --> 00:28:29,906
The static table is fixed in the StoryBoard, so
在故事板静态表是固定的,所以

705
00:28:29,975 --> 00:28:32,142
it's never asking you for the data,
它从来没有问你的数据,

706
00:28:32,211 --> 00:28:35,312
So it's never gonna ask you how many rows and sections and
所以是不会问你多少行和部分

707
00:28:35,381 --> 00:28:37,113
all that stuff there is,
所有这些,

708
00:28:37,182 --> 00:28:39,849
So the summary is you set the tableView's data source,
总结是你设置视图的数据来源,

709
00:28:39,918 --> 00:28:42,219
That's automatic if you're using UITableViewController,
如果你使用UITableViewController自动,

710
00:28:42,287 --> 00:28:44,888
You implement numberOfSections and numberOfRowsInSection,
你实现numberOfSections numberOfRowsInSection,也

711
00:28:44,957 --> 00:28:47,090
And then you implement cellForRowAt,
然后你实现cellForRowAt,

712
00:28:47,159 --> 00:28:48,324
And give back a tableView cell,
和回馈表视图单元,

713
00:28:48,393 --> 00:28:50,527
either a custom subclass if you're doing custom,
如果你做定制的自定义子类,

714
00:28:50,595 --> 00:28:54,431
or just setting the detailed text label and
或者只是设置详细的文本标签和

715
00:28:54,499 --> 00:28:57,501
then the normal text label if you're not, question?
然后如果你不是正常的文本标签,有问题吗?

716
00:28:57,570 --> 00:28:59,303
Okay, so the question is, what do I answer for
好了,问题是,我回答

717
00:28:59,371 --> 00:29:01,972
that number of sections thing if, over time,
这一数字的部分,如果随着时间的推移,

718
00:29:02,041 --> 00:29:03,707
my tableView is growing, right?
我的表视图正在增长,对吧?

719
00:29:03,775 --> 00:29:05,541
Maybe data is coming in from the network, or
数据来自网络,或

720
00:29:05,610 --> 00:29:08,378
the user is clicking on things that makes more table happen,
用户点击更表发生的事情,

721
00:29:08,446 --> 00:29:11,948
You can answer it that differently in any time, but
你可以回答它在任何时间不同,但是

722
00:29:12,017 --> 00:29:15,619
what you're basically saying is, what if my model changes?
基本上你说的是什么,如果我的模型变化?

723
00:29:15,688 --> 00:29:18,455
I need my UI, right, to keep up with it,
我需要我的UI,跟上,

724
00:29:18,524 --> 00:29:21,090
If my model gets bigger, then I need more rows,
如果我的模型变大,那么我需要更多的行,

725
00:29:21,159 --> 00:29:23,960
Well, you're gonna see that it's really important to,
好吧,你会看到它是非常重要的,

726
00:29:24,029 --> 00:29:25,529
every time your model changes,
每次你的模型的变化,

727
00:29:25,598 --> 00:29:27,697
you need to tell the tableView about it,
你需要告诉tableView,

728
00:29:27,766 --> 00:29:28,931
And you're gonna tell it things like
你会告诉它的东西

729
00:29:29,000 --> 00:29:30,667
I've added a new section,
我添加了一个新的部分,

730
00:29:30,736 --> 00:29:31,501
And then it will come back and
然后它会回来

731
00:29:31,570 --> 00:29:34,404
ask you all these questions again, all right,
再次问你这些问题,

732
00:29:34,473 --> 00:29:35,839
So, that's how it works,
这是它是如何起作用的,

733
00:29:35,907 --> 00:29:37,907
It might come back and ask you these questions including
它可能包括回来问你这些问题

734
00:29:37,976 --> 00:29:40,043
cellForRowAt over and over and over,
cellForRowAt一遍又一遍,

735
00:29:40,112 --> 00:29:42,178
As you tell it that you've changed your model,
当你告诉你已经改变你的模型,

736
00:29:42,247 --> 00:29:44,047
But of course, your model can change over time,
当然,您的模型可以改变随着时间的推移,

737
00:29:46,519 --> 00:29:48,184
By the way, the titles of the sections,
顺便说一下,标题的部分,

738
00:29:48,253 --> 00:29:50,153
remember when I showed you the countries and it had Japan and
还记得我给你们的国家和日本

739
00:29:50,222 --> 00:29:51,220
Mexico as titles,
墨西哥的头衔,

740
00:29:51,289 --> 00:29:53,056
Those are considered part of the data,
那些被认为是数据的一部分,

741
00:29:53,125 --> 00:29:56,026
So, those are part of the UITableViewDataSource
所以,这些都是需要显示的一部分

742
00:29:56,095 --> 00:29:57,193
protocol as well,
协议,

743
00:29:57,262 --> 00:30:01,164
This method title for header or footer in section, and
这种方法标题页眉或页脚的节

744
00:30:01,232 --> 00:30:02,933
you pass the section number and it gives you the thing,
你通过节号,它给你的东西,

745
00:30:03,002 --> 00:30:06,002
You can also do it with a view, using the delegate,
你也可以用一个视图,使用委托,

746
00:30:06,071 --> 00:30:07,537
But if you want to just do it as a string,
但如果你想做它作为一个字符串,

747
00:30:07,606 --> 00:30:09,840
you'd use the data source,
你会使用的数据源,

748
00:30:09,909 --> 00:30:11,641
There's a lot of other methods in the protocol,
还有很多其他方法的协议,

749
00:30:11,710 --> 00:30:12,776
I'm not gonna really talk about them,
我不会谈论他们,

750
00:30:12,844 --> 00:30:15,278
they have to do with things like deleting rows or
他们与删除行或之类的东西

751
00:30:15,347 --> 00:30:18,348
rearranging the rows, things like that,
重新安排行,类似这样的事情,

752
00:30:18,416 --> 00:30:20,450
If your model allows those things to happen,
如果你的模型允许这些事情发生,

753
00:30:20,519 --> 00:30:21,484
like things being deleted,
像被删除,

754
00:30:21,553 --> 00:30:23,786
Then you're gonna have to teach yourself this,
然后你要自学,

755
00:30:23,855 --> 00:30:26,089
Most of you will probably end up doing this for
你们中的大多数最终很可能会这样做

756
00:30:26,158 --> 00:30:27,157
your final project,
你最后的项目,

757
00:30:27,225 --> 00:30:28,692
I'm not gonna ask you to do it in the homework, but
我不会要求你去做作业,但是

758
00:30:28,761 --> 00:30:30,093
you'll probably do it for your final project,
你可能会做你的最后一个项目,

759
00:30:30,161 --> 00:30:31,360
It's extra credit in the homework,
额外的学分在作业,

760
00:30:31,429 --> 00:30:34,130
if you wanna get a head start on that,
如果你想要在,

761
00:30:34,199 --> 00:30:36,733
All right let's talk about seguing from a row,
好吧让我们谈谈哪一行,

762
00:30:36,802 --> 00:30:38,234
So I've got a row there, okay,
所以我有一个行,好的,

763
00:30:38,303 --> 00:30:41,270
this one actually has a detail disclosure in there as well,
这一个有一个细节披露,

764
00:30:41,339 --> 00:30:44,474
And I wanna segue out of that thing, how do I do that?
我想继续那件事,我该怎么做?

765
00:30:45,511 --> 00:30:46,409
Very simple,
很简单,

766
00:30:46,478 --> 00:30:49,179
I do it just like any other segueing from the button,
我就像任何其他segue的按钮,

767
00:30:49,248 --> 00:30:53,483
I'm just gonna Ctrl+drag from the row to the MVC I want to
我要按Ctrl +拖行到MVC我想

768
00:30:53,551 --> 00:30:54,318
segue to,
跟着你,

769
00:30:54,386 --> 00:30:56,386
And it's going to put up this black window,
这是要把这个黑色的窗口,

770
00:30:56,454 --> 00:30:57,187
Now, this black window
现在,这个黑色的窗口

771
00:30:57,256 --> 00:30:58,622
is a little different than other segues,
比其他segue有点不同,

772
00:30:58,690 --> 00:31:02,459
Because you see it has two sections, Selection Segue and
因为你看到它有两个部分,选择Segue和

773
00:31:02,528 --> 00:31:04,761
Accessory Action, okay?
辅助动作,好吗?

774
00:31:04,830 --> 00:31:07,697
So the Selection Segue is if they click on the row and
所以选择Segue如果他们点击行和

775
00:31:07,766 --> 00:31:09,099
the Accessory Action is if they click on
如果他们点击辅助动作

776
00:31:09,168 --> 00:31:10,234
the little accessory button,
小附件按钮,

777
00:31:12,303 --> 00:31:16,639
But it's just a normal segue, once you create the segue,
但这只是一个正常segue,一旦你创建segue,

778
00:31:16,708 --> 00:31:20,109
you can click on it and inspect it,
你可以点击它,检查它,

779
00:31:20,178 --> 00:31:21,778
Just like any other segue,
就像任何其他segue,

780
00:31:21,847 --> 00:31:24,848
you can set its identifier up there to something,
你可以设置它的标识符,

781
00:31:24,917 --> 00:31:26,683
And then you're gonna have prepare for segue,
然后你要准备segue,

782
00:31:26,752 --> 00:31:30,053
So, here I've set the identifier to be AbcSegue,
所以,在这里我AbcSegue设置标识符,

783
00:31:30,122 --> 00:31:32,088
So lets take a look at what prepare for
我们看看准备

784
00:31:32,157 --> 00:31:35,092
segue looks like when you're doing this kinda segue,
segue看起来就像当你这样做有点segue,

785
00:31:35,160 --> 00:31:36,893
It looks almost exactly the same,
看起来几乎完全一样,

786
00:31:36,961 --> 00:31:38,761
here I've got a prepare for segue,
在这里我有一个准备segue,

787
00:31:38,830 --> 00:31:40,964
I've noticed that the sender there is Any,
我注意到发送方有任何,

788
00:31:41,033 --> 00:31:43,200
And when you're segueing into tableView,
当你segue表视图,

789
00:31:43,269 --> 00:31:45,836
what do you think that Any is gonna be?
你认为是吗?

790
00:31:45,904 --> 00:31:49,272
UITableViewCell, okay, that view that contains the row,
UITableViewCell,包含行,这一观点

791
00:31:49,340 --> 00:31:51,008
So that is going to be the sender,
这是发送者,

792
00:31:52,577 --> 00:31:53,710
Just like a button is the sender
就像一个按钮是发送方的

793
00:31:53,779 --> 00:31:55,812
if you click on a button to segue, the row,
如果你点击一个按钮来segue,行,

794
00:31:55,881 --> 00:31:58,382
the UITableViewCell, is the sender in that case,
UITableViewCell,发送方在这种情况下,

795
00:32:00,085 --> 00:32:01,785
So the first thing you're gonna wanna
所以你要想的第一件事

796
00:32:01,853 --> 00:32:04,554
do is convert the sender to a TableViewCell,
做的是把发送方TableViewCell,

797
00:32:04,623 --> 00:32:08,191
And specifically to your subclass or table view cell,
特别是你的子类或表视图单元格,

798
00:32:08,260 --> 00:32:11,327
If you have a custom cell in case you wanna
如果你有一个定制的细胞,以防你想

799
00:32:11,396 --> 00:32:13,830
do anything that's specific to your TableView cell,
做任何特定于您的表视图单元格,

800
00:32:13,898 --> 00:32:17,534
If not then you can just do it to UITableViewCell,
如果不是那么你可以做到UITableViewCell,

801
00:32:17,603 --> 00:32:20,570
And then you wanna get the index path of that cell so
然后你想要得到的索引路径细胞

802
00:32:20,638 --> 00:32:23,272
that you know what row where you're segueing from,
你知道行你segue是从哪里来的,

803
00:32:23,341 --> 00:32:25,975
Because every row, you can click on it, it will segue,
因为每一行,你可以点击它,它会继续,

804
00:32:26,044 --> 00:32:27,410
So, you need to know which row,
所以,你需要知道哪一行,

805
00:32:27,479 --> 00:32:31,547
And you do that by
你这样做

806
00:32:31,616 --> 00:32:34,083
And you can't pass any to that, you have to pass
你不能通过任何,你必须通过

807
00:32:34,152 --> 00:32:37,754
UITableViewCell or subclass thereof, indexPath(for: cell),
UITableViewCell或子类,indexPath(:细胞),

808
00:32:37,823 --> 00:32:39,289
Now, I'm gonna give you one of those index path
现在,我要给你一个索引路径

809
00:32:39,357 --> 00:32:42,492
things remember?
的事情还记得吗?

810
00:32:42,561 --> 00:32:44,660
and row,
行,

811
00:32:44,729 --> 00:32:48,398
Then, you're gonna get your seguedToMVC as usual,
然后,你会得到你seguedToMVC像往常一样,

812
00:32:48,467 --> 00:32:53,069
And you're going to prepare your Segue to public API, and
你要准备你Segue公共API,和

813
00:32:53,137 --> 00:32:56,739
you're going to do it using the data in your model based
你要在模型中使用的数据

814
00:32:56,808 --> 00:32:59,776
on the section and row that was clicked on,
在点击的部分和行,

815
00:33:01,446 --> 00:33:02,812
Got it?
明白了吗?

816
00:33:02,881 --> 00:33:04,614
So pretty easy segue from it,
所以很容易segue,

817
00:33:06,118 --> 00:33:07,750
So yes you're gonna use your public API of your
是的你要使用你的公共API

818
00:33:07,819 --> 00:33:08,585
segue to MVC,
MVC跟着你,

819
00:33:09,688 --> 00:33:11,321
What about the table view's delegate?
表视图的代表呢?

820
00:33:11,390 --> 00:33:12,222
We talked about the data
我们讨论了数据

821
00:33:12,290 --> 00:33:13,890
source; what about the table view's delegate?
源;表视图的代表呢?

822
00:33:13,958 --> 00:33:15,592
It's got a kind of a miscellaneous
它有一种杂项

823
00:33:15,660 --> 00:33:18,194
bunch of stuff in there but generally the delegate
很多东西但一般委托

824
00:33:18,263 --> 00:33:21,030
is talking about how the table view is displayed, and
在谈论如何显示表格视图,然后呢

825
00:33:21,099 --> 00:33:24,967
the data source is what data is actually in the table,
数据源是数据表中,

826
00:33:25,036 --> 00:33:25,769
Okay so that's the difference,
好,这就是区别,

827
00:33:25,837 --> 00:33:30,039
So the delegate we're talking about things,
所以委托我们谈论的事情,

828
00:33:30,108 --> 00:33:31,574
yeah they're usually the same object,
是的他们通常是相同的对象,

829
00:33:31,643 --> 00:33:36,246
So the delegate also has all the will, did, should things,
所以委托也,,应该的事情,

830
00:33:36,314 --> 00:33:38,448
That you could watch what's happening in the table view,
你可以在表格视图,看发生了什么

831
00:33:38,516 --> 00:33:40,750
This row did get selected, things like that,
这一行做了选择,类似这样的事情,

832
00:33:40,819 --> 00:33:44,988
For example, here's table view target action, so
举例来说,这里的表视图的目标行动

833
00:33:45,057 --> 00:33:47,356
if when you click on a row, if you don't want a segue, but
如果当你点击一行,如果你不想继续,但

834
00:33:47,425 --> 00:33:49,859
you just want to be target action like a button,
你只是想成为目标动作像一个按钮,

835
00:33:49,928 --> 00:33:50,960
well you can't really do that,
你不能这样做,

836
00:33:51,029 --> 00:33:53,163
You can't do target action because a row is not
你不能做目标行动,因为行不

837
00:33:53,232 --> 00:33:54,030
a UIButton,
UIButton a,

838
00:33:54,099 --> 00:33:56,766
But you can implement this delegate method tableView
但你可以实现tableView这个委托方法

839
00:33:56,835 --> 00:33:58,801
didSelectRowAt indexPath,
didSelectRowAt indexPath,

840
00:33:58,870 --> 00:34:00,736
And when someone touches on that row,
当有人涉及这一行,

841
00:34:00,805 --> 00:34:02,104
this is gonna get called,
这是会被调用,

842
00:34:02,173 --> 00:34:03,506
So, it's just like target action right,
所以,就像目标动作正确,

843
00:34:03,575 --> 00:34:05,542
It told you what happened,
它告诉你发生了什么事,

844
00:34:05,610 --> 00:34:08,211
So, now you can look at the index path row in section to
所以,现在你可以看看索引路径行部分

845
00:34:08,280 --> 00:34:11,681
know which row was selected so we call that target action,
知道哪一行被选中我们称之为目标动作,

846
00:34:11,750 --> 00:34:13,550
You did the same thing with that detail
你也做了同样的事情的细节

847
00:34:13,618 --> 00:34:14,551
disclosure by the way,
信息披露的方式,

848
00:34:14,619 --> 00:34:17,119
So I'm gonna click on the detail disclosure we're gonna
所以我要点击详细披露我们会

849
00:34:17,188 --> 00:34:18,889
get this method in your delegate called
调用这个方法在你的委托

850
00:34:18,957 --> 00:34:22,058
accessoryButtonTappedForRow- With indexPath,
与indexPath accessoryButtonTappedForRow -,

851
00:34:22,127 --> 00:34:23,560
Okay, so now you know which row is that,
好的,现在你知道这行,

852
00:34:23,628 --> 00:34:26,162
So when things are clicked on, you can use segue or
所以,当点击,您可以使用segue或

853
00:34:26,230 --> 00:34:28,898
you can use these to find out things were clicked on and
您可以使用这些被点击,找到东西

854
00:34:28,966 --> 00:34:29,699
do whatever you want,
做任何你想要的,

855
00:34:31,136 --> 00:34:33,135
So yeah, a lot of wills and dids and all those things,
是的,很多遗嘱和做所有这些事情,

856
00:34:33,204 --> 00:34:35,137
You can look at the documentation for
你可以查看的文档

857
00:34:35,206 --> 00:34:37,340
UITableViewDelegate,
UITableViewDelegate,

858
00:34:37,408 --> 00:34:39,142
Now back to what this guy was asking before,
现在回到之前这家伙问什么,

859
00:34:39,210 --> 00:34:40,710
What happens if my model changes?
如果我的模型变化?

860
00:34:40,778 --> 00:34:41,444
It gets bigger?
它变大吗?

861
00:34:41,512 --> 00:34:43,279
Or even gets smaller or whatever?
甚至变小什么的?

862
00:34:43,348 --> 00:34:45,949
One thing you can do that's kind of a hammer is
一件事你可以做的锤子

863
00:34:46,018 --> 00:34:47,850
reloadData,
reloadData,

864
00:34:47,919 --> 00:34:50,286
If you go reloadData on your table view it's going to call
如果你去reloadData表视图的电话

865
00:34:50,355 --> 00:34:51,988
all of your data source methods again,
你所有的数据源的方法,

866
00:34:52,056 --> 00:34:54,257
How many sections you got, how many rows in each section?
你有多少部分,每个部分有多少行?

867
00:34:54,325 --> 00:34:56,158
Give me a cell for every single visible row,
给我一个细胞对于每一个可见的行,

868
00:34:56,227 --> 00:34:56,759
You see what I mean?
你明白我的意思吗?

869
00:34:56,828 --> 00:34:58,695
It's going to do the whole thing all over again,
这是要做整件事都一遍又一遍,

870
00:34:58,763 --> 00:35:01,230
It's kind of a hammer because if you know that you only
这是一种锤,因为如果你只知道你

871
00:35:01,299 --> 00:35:03,599
changed one section okay?
改变一段好吗?

872
00:35:03,668 --> 00:35:06,169
Then you can call something like reloadRows (at
然后你可以叫类似reloadRows(

873
00:35:06,237 --> 00:35:07,403
indexPaths,,,),
indexPaths,,,),

874
00:35:07,472 --> 00:35:09,939
And indexPaths would tell the sections and rows,
indexPaths告诉部分和行,

875
00:35:10,008 --> 00:35:11,474
With some animation,
一些动画,

876
00:35:11,543 --> 00:35:14,677
And animations can be like fade in or
可以像淡入或和动画

877
00:35:14,746 --> 00:35:17,614
slide from the bottom or things like that,
从底部幻灯片或类似的东西,

878
00:35:17,683 --> 00:35:19,349
So there are lighter weight ones you can call,
所以有较轻的重量,你可以叫

879
00:35:19,417 --> 00:35:20,716
And I'm actually gonna show you in the demo,
我将给你演示,

880
00:35:20,785 --> 00:35:23,720
we're gonna call one where we're just gonna tell
我们会打电话给一个我们要告诉

881
00:35:23,788 --> 00:35:26,122
the table view that we inserted a section and
我们插入一段的表视图

882
00:35:26,191 --> 00:35:28,657
it's going to immediately just ask me
它会立即就问我

883
00:35:28,726 --> 00:35:32,294
the data source message about that section and nothing else,
数据源信息部分,没有别的,

884
00:35:32,363 --> 00:35:35,531
So you do need to tell the table view
所以你需要告诉表格视图

885
00:35:35,600 --> 00:35:37,667
every time you change your model,
每次你改变你的模型,

886
00:35:37,736 --> 00:35:38,601
If you change your model in
如果你改变你的模型

887
00:35:38,670 --> 00:35:41,404
any way that would change the number of sections and rows,
任何方式,改变部分和行数,

888
00:35:41,473 --> 00:35:42,672
Or even the display of a row,
甚至一行显示,

889
00:35:42,741 --> 00:35:44,708
you need to tell the table view,
你需要告诉表视图,

890
00:35:44,776 --> 00:35:46,242
So, just always think about that when you're
所以,当你总是思考

891
00:35:46,311 --> 00:35:47,210
writing table view code,
写表格视图代码,

892
00:35:47,279 --> 00:35:49,679
Change my model, tell the table view,
改变我的模型,表视图,

893
00:35:49,748 --> 00:35:50,379
Right away,
马上,

894
00:35:50,448 --> 00:35:52,215
You want to tell the table view right away,
你想马上告诉表视图,

895
00:35:52,283 --> 00:35:54,684
And change your model first, then change your table view,
首先,改变您的模型,然后改变你的表视图,

896
00:35:54,753 --> 00:35:55,852
Because when you tell your table view
因为当你告诉你的表格视图

897
00:35:55,920 --> 00:35:58,588
things have changed, it's gonna go back and ask you, so
事情已经发生了变化,它会回去问你,所以

898
00:35:58,656 --> 00:36:00,357
for IndexPath, number of sections,
IndexPath,数量的部分,

899
00:36:00,425 --> 00:36:02,725
it'll ask you those questions, some of them again,
它会问你这些问题,他们中的一些人,

900
00:36:02,794 --> 00:36:04,593
So make sure your models are already changed and
已经改变了,所以确保你的模型

901
00:36:04,662 --> 00:36:06,996
ready to answer those questions,
准备好回答这些问题,

902
00:36:07,065 --> 00:36:08,932
Le's talk about the height of rows,
勒的谈论的行高,

903
00:36:10,501 --> 00:36:11,334
The height of the row
这一行的高度

904
00:36:11,403 --> 00:36:13,702
generally set in the Storyboard,
一般设置在故事板中,

905
00:36:13,771 --> 00:36:17,373
So you could resize it and set it and tha's what it is but
所以你可以调整它并设置它,那是它是什么

906
00:36:17,442 --> 00:36:20,110
you can also ask the delegate,
你也可以问委托,

907
00:36:20,178 --> 00:36:22,845
You can also implement a method in the delegate and
你也可以委托和实现方法

908
00:36:22,914 --> 00:36:25,915
it'll ask the delegate, what height should this row be?
它会问委托,身高这一行应该是什么?

909
00:36:25,984 --> 00:36:28,784
This might be very useful in your homework, by the way,
这可能是非常有用的在你的家庭作业,顺便说一下,

910
00:36:28,853 --> 00:36:31,688
But this is for when you have
但这是当你有

911
00:36:31,757 --> 00:36:34,991
the rows that change height in some calculated way,
行改变高度在某些计算方法,

912
00:36:36,228 --> 00:36:37,393
Maybe you have an image in there, and
也许你有一个图像

913
00:36:37,462 --> 00:36:41,097
it's got different aspect ratios, for example,
它有不同的纵横比,例如,

914
00:36:41,165 --> 00:36:43,266
And so it's different heights sometimes, whatever,
所以有时不同高度,无论如何,

915
00:36:43,335 --> 00:36:44,901
So you can answer it this way,
你可以这样回答,

916
00:36:46,304 --> 00:36:48,304
Of course, the other way you can control the height
当然,你可以控制高度

917
00:36:48,373 --> 00:36:50,440
is by doing auto layout, and
通过自动布局,

918
00:36:50,509 --> 00:36:53,443
setting your height to be automatic dimension,
设置你的身高自动维度,

919
00:36:53,512 --> 00:36:56,780
If you set your height to be UITableViewAutomaticDimension,
如果你设置你的身高UITableViewAutomaticDimension,

920
00:36:56,848 --> 00:37:00,450
that means go figure it out from the auto layout please,
这意味着从自动布局请去弄明白,

921
00:37:00,518 --> 00:37:02,051
So those are the three was you can set the height,
这是三个你可以设置高度,

922
00:37:02,120 --> 00:37:05,554
Set it fixed in the story board, answer this delegate
把它固定在故事板,回答这个委托

923
00:37:05,623 --> 00:37:07,657
method here, heightForRowAt indexPath,
方法在这里,heightForRowAt indexPath,

924
00:37:07,726 --> 00:37:10,092
or set it to the automatic dimension,
或者将其设置为自动维度,

925
00:37:10,161 --> 00:37:13,863
If you do the automatic ways then you also probably want to
如果你自动那么你也可能想方法

926
00:37:13,932 --> 00:37:16,232
set the estimated row height,
估计的行高,

927
00:37:16,301 --> 00:37:19,302
That just tells the table view calculate from auto layout but
这只是告诉表格视图计算从自动布局

928
00:37:19,370 --> 00:37:22,238
for all those cells the 100,000 cells that aren't
所有这些细胞没有的100000个细胞

929
00:37:22,306 --> 00:37:26,075
on screen please don't do auto layout for 100,000 cells,
在屏幕上请不要做自动布局100000个细胞,

930
00:37:26,144 --> 00:37:28,711
Just estimate them to be about this and as they start to come
估计他们是这当他们开始

931
00:37:28,780 --> 00:37:30,846
on screen then it's gonna do the auto layout and
在屏幕上就会自动布局和

932
00:37:30,915 --> 00:37:33,749
pick the exact right height okay,
选择的合适的高度好,

933
00:37:33,818 --> 00:37:35,118
So that's why you need to estimate,
这就是为什么你需要估计,

934
00:37:35,186 --> 00:37:36,419
And there's also a delicate method,
还有一个微妙的方法,

935
00:37:36,488 --> 00:37:39,856
estimated height per row at whatever,
估计高度每一行,

936
00:37:39,924 --> 00:37:42,892
So there's dozens of methods also, in table view itself,
也有很多方法,在表视图,

937
00:37:42,961 --> 00:37:45,795
Not in its delegates, but in table view itself,
不代表,但在表视图本身,

938
00:37:45,864 --> 00:37:48,597
You can scroll to a row cuz it's a scroll view,
你可以滚动到一行因为滚动视图,

939
00:37:48,666 --> 00:37:49,632
It knows how to do scrolling,
它知道如何做滚动,

940
00:37:49,701 --> 00:37:53,002
You can control the look, the separators between rows,
你可以控制看,行之间的分隔符,

941
00:37:53,071 --> 00:37:54,003
All those kind of things,
所有这些事情,

942
00:37:54,071 --> 00:37:56,406
So you're definitely want to familiarize yourself
所以你一定要熟悉

943
00:37:56,475 --> 00:37:58,708
with the table view API itself,
表格视图API本身,

944
00:37:58,777 --> 00:37:59,508
Don't forget about that,
不要忘记,

945
00:37:59,577 --> 00:38:02,478
All right, so I'm not coming back to this slide,
好了,所以我不回到这张幻灯片,

946
00:38:02,547 --> 00:38:04,881
So just give you a quick coming up here,
只是给你一个快速的到来,

947
00:38:04,949 --> 00:38:06,382
We have collection view on Friday,
我们周五集合视图,

948
00:38:06,451 --> 00:38:08,551
So collection view is very similar to table view,
集合视图非常类似于表视图,

949
00:38:08,620 --> 00:38:11,454
but the layout doesn't have to be in a strict table,
但布局并不必须在严格的表,

950
00:38:11,522 --> 00:38:13,689
It can be kind of laid out any way you want,
它可以提出任何你想要的方式,

951
00:38:13,758 --> 00:38:15,691
But it's the same kind of thing where there's data and
但同样的事情,那里的数据和

952
00:38:15,760 --> 00:38:18,561
it's gonna ask you how many sections there, how many row,
它会问你有多少部分,有多少行,

953
00:38:18,629 --> 00:38:21,430
not rows but items in that section, then it's gonna have
而不是行项目部分,那么它会

954
00:38:21,499 --> 00:38:23,633
this little extra mechanism for doing a lay out,
这个小额外的机制做了布置,

955
00:38:23,702 --> 00:38:24,601
So it's really awesome,
这真是太棒了,

956
00:38:24,669 --> 00:38:26,836
I'd love to have time to teach it in lecture not in
我想有时间教它在课堂上不是

957
00:38:26,905 --> 00:38:29,438
the optional section but I've got so much to teach in this
可选的部分,但我有这么多教

958
00:38:29,507 --> 00:38:32,142
course and you really need to understand TableView first,
课程,你真的需要了解TableView第一,

959
00:38:32,210 --> 00:38:34,210
which is a little simpler, before you can move onto
之前有点简单,你可以继续

960
00:38:34,279 --> 00:38:36,379
CollectionView- but really don't miss Friday,
周五CollectionView——但是真的不要错过,

961
00:38:36,448 --> 00:38:40,282
It will be a good way to really it much more powerful
这将是一个真正的好方法更强大

962
00:38:40,351 --> 00:38:42,719
kind of data presentation UI,
数据显示界面,

963
00:38:42,787 --> 00:38:45,221
And then next week we gonna talk about Core Data,
然后下周我们将谈论核心数据,

964
00:38:45,289 --> 00:38:47,756
which is the object-oriented database in iOS,
这是iOS的面向对象的数据库,

965
00:38:47,825 --> 00:38:49,959
really powerful mechanism,
非常强大的机制,

966
00:38:50,028 --> 00:38:52,995
Right now, I'm gonna be doing a big demo that shows
现在,我要做一个演示程序,展示了

967
00:38:53,064 --> 00:38:54,730
how to do all this TableView stuff and
这一切TableView东西,怎么做呢

968
00:38:54,799 --> 00:38:56,999
also TextField and some other things,
也TextField和一些其他的事情,

969
00:38:57,068 --> 00:38:58,634
And your Assignment 4 is out,
和你的任务4,

970
00:38:58,703 --> 00:39:01,537
and it's due in one week, on Wednesday and it's
它将在一个星期,周三的

971
00:39:01,606 --> 00:39:05,241
basically to take what I do today and build a better one,
今天基本上采取我所做的,建立一个更好的,

972
00:39:05,310 --> 00:39:07,343
More feature-full,
更feature-full,

973
00:39:07,412 --> 00:39:08,210
So that's why you
这就是为什么你

974
00:39:08,279 --> 00:39:10,780
always want to understand what I'm doing in lecture, because
总是想明白我在演讲,因为

975
00:39:10,848 --> 00:39:13,115
I'm almost always just asking you to do the same thing,
我几乎总是要求你做同样的事情,

976
00:39:13,184 --> 00:39:14,984
Okay so I'm gonna build a completely
好的,我要建立一个完全

977
00:39:15,053 --> 00:39:16,286
fresh app from scratch,
新的应用程序从头开始,

978
00:39:16,354 --> 00:39:18,554
Like I said before it's gonna be a Twitter client,
就像我之前说的它会是一个Twitter客户端,

979
00:39:18,623 --> 00:39:21,790
We're gonna be doing Twitter searches,
我们要做的Twitter搜索,

980
00:39:21,859 --> 00:39:23,927
It's gonna be a single view app,
它会单一视图应用程序,

981
00:39:23,995 --> 00:39:26,079
i'm gonna call it Smashtag, kind of like hashtag,
我要叫它Smashtag,有点像标签,

982
00:39:26,080 --> 00:39:28,164
As always,
像往常一样,

983
00:39:28,233 --> 00:39:30,099
This is gonna be an iPhone-only app,
这是一个专用的应用程序,

984
00:39:30,168 --> 00:39:32,034
And that's true for your homework as well,
这是对你的家庭作业,

985
00:39:32,103 --> 00:39:34,570
Okay, iPhone-only, we're not gonna do an iPad thing,
专用的,我们不会做iPad的事情,

986
00:39:34,639 --> 00:39:36,439
You already learned that with assignment three,
你已经知道与分配三个,

987
00:39:36,508 --> 00:39:39,208
Trying to keep what you're learning
试图让你学习

988
00:39:39,277 --> 00:39:41,243
as new as possible with each one,
与每一个尽可能新,

989
00:39:41,312 --> 00:39:44,113
I'm gonna put this where I always put everything,
我要把这个我总是把一切的地方,

990
00:39:44,182 --> 00:39:47,350
Here we go, I'm gonna get rid of some of these things over
好了,我要摆脱这些事情

991
00:39:47,419 --> 00:39:50,120
here that we don't really use very much,
在这里,我们并不真正使用,

992
00:39:50,188 --> 00:39:52,955
Actually I'm gonna leave plist as you'll see,
实际上我要离开plist您将看到,

993
00:39:53,024 --> 00:39:57,427
New group, we'll do Supporting Files here, and
新组,我们会支持文件,

994
00:39:57,495 --> 00:39:59,428
I will move that down,
我将下来,

995
00:39:59,497 --> 00:40:02,498
Now I'm gonna start by taking my Storyboard here and
现在我要先把我的故事板

996
00:40:02,567 --> 00:40:04,167
just totally wiping it out,
完全抹去,

997
00:40:04,235 --> 00:40:06,402
Okay, I'm just gonna take the one controller that I got,
好了,我要带我的一个控制器,

998
00:40:06,470 --> 00:40:07,670
the free one, and just delete it,
自由,就删除它,

999
00:40:07,738 --> 00:40:09,939
I'm even gonna go over to this code right here and
我甚至会去这里的代码

1000
00:40:10,008 --> 00:40:12,408
delete that, same thing I did in the last demo,
删除,我过去做的演示,

1001
00:40:12,477 --> 00:40:14,344
Cuz I don't need any of that,
因为我不需要任何,

1002
00:40:14,412 --> 00:40:17,212
I'm gonna start from scratch here,
我要从头开始,

1003
00:40:17,281 --> 00:40:18,748
So, we're building a table view app, so
所以,我们正在构建一个表格视图应用程序,所以

1004
00:40:18,817 --> 00:40:21,551
let's grab a table view, I'm gonna scroll down here,
让我们抓住一个表格视图,我要在这里向下滚动,

1005
00:40:21,620 --> 00:40:24,287
Here's a table view right here, I just drag it out,
这里有一个表格视图,我只是拖出来,

1006
00:40:24,355 --> 00:40:28,558
Now this table view if we wanna use it as a delegate and
现在这个表格视图作为代表,如果我们想使用它

1007
00:40:28,627 --> 00:40:31,260
data source, or if we wanna have outlets to it, we,
数据源,或者如果我们想有网点,我们

1008
00:40:31,329 --> 00:40:32,795
of course, need a subclass of it,
当然,需要一个子类,

1009
00:40:32,864 --> 00:40:37,533
So let's go ahead and do that, New > File, okay,
让我们继续这样做,新的>文件,好吧,

1010
00:40:37,602 --> 00:40:40,102
It's gonna be a Cocoa Touch subclass,
它会是一个可可触摸子类,

1011
00:40:40,171 --> 00:40:42,471
namely a UITableViewController,
即UITableViewController,

1012
00:40:42,540 --> 00:40:45,374
And I'm gonna call this my TweetTableViewController,
我将称之为TweetTableViewController,

1013
00:40:45,443 --> 00:40:47,510
because it's gonna show tweets,
因为它会显示微博,

1014
00:40:47,578 --> 00:40:49,812
All right, and I'm gonna be very careful to put it here,
好吧,我要非常小心地把它放在这里,

1015
00:40:49,881 --> 00:40:52,215
not at the top level of my project there,
不是我的项目的顶层,

1016
00:40:53,584 --> 00:40:56,185
And here we go, here's our code right here,
在这里,我们走,这是我们的代码,

1017
00:40:56,254 --> 00:40:59,656
I'm gonna delete this View Controller Lifecycle
我要删除这个视图控制器生命周期

1018
00:40:59,724 --> 00:41:00,656
stuff, as usual,
的东西,像往常一样,

1019
00:41:00,725 --> 00:41:02,124
But you'll notice the TableViewController
但是你会注意到表

1020
00:41:02,193 --> 00:41:03,826
also has some extra stuff,
也有一些额外的东西,

1021
00:41:03,895 --> 00:41:06,629
You recognize those methods, numberOfSections, okay,
你认识这些方法,numberOfSections,好吧,

1022
00:41:06,697 --> 00:41:10,133
numberOfRowsInSection, and cellForRowAt indexPath,
numberOfRowsInSection,也和cellForRowAt indexPath,

1023
00:41:10,202 --> 00:41:15,604
These are the key UITableViewDataSource
这些都是需要显示的关键

1024
00:41:15,673 --> 00:41:17,674
methods here,
方法在这里,

1025
00:41:17,742 --> 00:41:20,476
Now there's some other UITableViewDataSource
现在有其他的需要

1026
00:41:20,545 --> 00:41:22,678
methods here as well, these are for
方法在这里,这些都是

1027
00:41:22,747 --> 00:41:25,181
things like deleting rows, moving rows,
删除行、行移动,

1028
00:41:25,250 --> 00:41:27,149
So when you're doing your extra credit, or
所以当你做额外的信贷,或

1029
00:41:27,218 --> 00:41:28,817
when you're doing your final project,
当你在做你的最后一个项目,

1030
00:41:28,886 --> 00:41:30,486
you'll be wanting to not delete those,
你会想要删除这些,

1031
00:41:30,555 --> 00:41:34,390
But I will delete those just to make our code a little bit
但我将删除那些只是为了让我们的代码

1032
00:41:34,459 --> 00:41:36,359
cleaner here,
清洁,

1033
00:41:36,428 --> 00:41:37,893
So that's our UITableViewController
这就是我们UITableViewController

1034
00:41:37,962 --> 00:41:40,129
subclass, we'll have to implement these in a second,
子类,我们必须实现这些,

1035
00:41:40,198 --> 00:41:41,898
But let's go back to our Storyboard,
但让我们回到我们的故事板,

1036
00:41:41,966 --> 00:41:47,103
We also obviously wanna set our identity here to instead
显然我们还想套我们的身份来代替

1037
00:41:47,171 --> 00:41:51,641
of being just generic UITableViewController,
仅仅是通用UITableViewController,

1038
00:41:51,709 --> 00:41:55,978
we want it to be a TweetTableViewController,
我们希望它是一个TweetTableViewController,

1039
00:41:56,046 --> 00:41:57,780
Also, where's our arrow coming in?
同时,我们的箭头来在哪里?

1040
00:41:57,849 --> 00:42:00,482
There's no arrow, so let's select it again and
没有箭头,让我们再次选择它,

1041
00:42:00,551 --> 00:42:03,953
go back to attributes and pick is initial view controller, so
回到属性和选择初始视图控制器,所以

1042
00:42:04,022 --> 00:42:05,621
we get this arrow coming in,
我们得到这个箭头,

1043
00:42:05,690 --> 00:42:07,656
Okay, otherwise, when we launch our app,
好吧,否则,当我们启动应用程序,

1044
00:42:07,725 --> 00:42:10,926
it's not gonna know what MVC to start with, all right?
它不会知道MVC开始,好吗?

1045
00:42:10,995 --> 00:42:13,830
Now whenever we have a new MVC,
现在每当我们有一个新的MVC,

1046
00:42:13,898 --> 00:42:16,632
what's one of the first things we always wanna do?
的第一件事是什么,我们总是想做什么?

1047
00:42:16,701 --> 00:42:18,200
Define its model,
定义它的模型,

1048
00:42:18,269 --> 00:42:21,103
Understand what this MVC is all about,
了解这MVC,

1049
00:42:21,172 --> 00:42:23,639
What does it show or do?
它显示或做什么?

1050
00:42:23,707 --> 00:42:29,645
And I'm going to pick my model to be an array of tweets,
我要选择我的模型是一个tweet数组,

1051
00:42:29,714 --> 00:42:31,313
Okay, I'm gonna call it tweets,
好的,我会叫它微博,

1052
00:42:31,382 --> 00:42:34,883
But I'm actually gonna make it be an array
但我要让它成为一个数组

1053
00:42:34,952 --> 00:42:37,253
of array of tweets,
阵列的微博,

1054
00:42:37,322 --> 00:42:40,890
Okay, why am I making an array of an array of tweets?
好的,我为什么让一个数组的数组的推文?

1055
00:42:40,959 --> 00:42:44,160
Because I'm going to be able to put some tweets in my table
因为我能放一些推在我的桌子上

1056
00:42:44,228 --> 00:42:46,629
and then go fetch some more and put more in,
然后去获取更多的投入更多,

1057
00:42:46,697 --> 00:42:49,432
And every time I put more in, I'm gonna put it as a new
每次我把更多的,我要把它作为一个新的

1058
00:42:49,500 --> 00:42:52,101
section, okay, table view section,
节,表视图部分,

1059
00:42:52,170 --> 00:42:54,904
So each array on the inside of this array
所以每个数组的内部数组

1060
00:42:54,973 --> 00:42:56,438
is another batch of tweets,
是另一批微博,

1061
00:42:56,507 --> 00:42:58,808
And the outer array is all of my sections,
外层数组是我所有的部分,

1062
00:42:58,876 --> 00:43:00,376
So I have a really nice data structure here,
所以我在这里有一个很好的数据结构,

1063
00:43:00,444 --> 00:43:02,578
It really matches up nicely with table view,
它与表格视图匹配很好,

1064
00:43:02,647 --> 00:43:05,748
And it's kind of nice to have that kind of data structure,
和这是一种很高兴这样的数据结构,

1065
00:43:05,817 --> 00:43:07,817
And I kind of recommend that in the homework if you can
我建议,如果你能在作业

1066
00:43:07,885 --> 00:43:10,219
make your data structure match up with sections and
让你的数据结构和匹配部分

1067
00:43:10,288 --> 00:43:12,055
rows, then it makes the implementation
行,然后实现

1068
00:43:12,123 --> 00:43:14,757
of all these methods down here a lot simpler,
所有的这些方法简单得多,

1069
00:43:16,026 --> 00:43:19,294
All right, so, I've got another part of my model,
好吧,那么,我有另一个我的模型的一部分,

1070
00:43:19,363 --> 00:43:22,064
though, which is some searchText,
不过,这是一些searchText,

1071
00:43:22,133 --> 00:43:24,400
So the searchText is like #stanford,
所以searchText就像#斯坦福大学,

1072
00:43:24,469 --> 00:43:26,936
that's what I wanna search for,
这就是我想要寻找,

1073
00:43:27,004 --> 00:43:29,271
So this searchText is what I'm searching for
这searchText就是我寻找

1074
00:43:29,340 --> 00:43:30,740
to find my tweets,
找到我的微博,

1075
00:43:30,809 --> 00:43:32,141
And I'm making this one public,
我公开这一个,

1076
00:43:32,209 --> 00:43:34,410
this is gonna be a public part of my model,
这是一个公共的一部分我的模型,

1077
00:43:34,478 --> 00:43:37,779
So anyone using my MVC, they set the search text,
所以有人使用我的MVC,他们设置搜索文本,

1078
00:43:37,848 --> 00:43:40,082
I will show those tweets,
我将展示这些推文,

1079
00:43:40,151 --> 00:43:40,917
That's what I do,
这是我做的,

1080
00:43:42,519 --> 00:43:45,188
All right, and I'm gonna do that by populating this part
好的,我要做的,通过填充这部分

1081
00:43:45,256 --> 00:43:47,623
of my model over here to show them,
我的模型在这里给他们,

1082
00:43:47,691 --> 00:43:51,393
So what do I need to do if the searchText is set?
所以我需要做什么如果searchText设置?

1083
00:43:51,462 --> 00:43:54,163
So I need to do some didSet here, so the public model,
所以我需要做一些didSet,所以公共模型,

1084
00:43:54,231 --> 00:43:56,699
if something sets it, I have to react well to it,
如果有什么东西使它,我必须反应良好,

1085
00:43:56,767 --> 00:43:59,469
I mean, one thing that I'm gonna wanna do is remove
我的意思是,我要想做的一件事是删除

1086
00:43:59,537 --> 00:44:02,138
all the tweets that are already in my table,
已经在我的表,所有的微博

1087
00:44:02,207 --> 00:44:05,340
And when I remove those from my model up here,
当我把这些从我的模型,

1088
00:44:05,409 --> 00:44:07,743
I need to tell the table view about it,
我需要告诉表视图,

1089
00:44:07,812 --> 00:44:10,479
So I'm gonna have the tableView,reloadData(), which
所以我要有tableView,reloadData(),

1090
00:44:10,548 --> 00:44:13,382
is the hammer, which is okay, because I removed everything,
锤子,这是好的,因为我删除一切,

1091
00:44:13,451 --> 00:44:15,250
so the hammer's gonna be pretty light,
所以锤子会很轻,

1092
00:44:15,319 --> 00:44:16,619
a little ball-peen hammer,
一个小榔头,

1093
00:44:16,687 --> 00:44:18,754
Okay, just going to clear the table out, so
好了,要收拾桌子了

1094
00:44:18,823 --> 00:44:20,723
tha's perfectly fine in this case,
在这种情况下,那是非常好的

1095
00:44:22,059 --> 00:44:22,591
What else do I need to do?
我需要做什么?

1096
00:44:22,660 --> 00:44:25,093
Well, I, now I need to search for tweets,
好吧,我,我现在需要寻找微博,

1097
00:44:25,162 --> 00:44:27,963
So I have to write a function to do that to search for
所以我要写一个函数来搜索

1098
00:44:28,032 --> 00:44:28,998
some tweet,
一些推特,

1099
00:44:29,067 --> 00:44:32,501
I'm also gonna set my title equal to the searchText,
我也会把我标题等于searchText

1100
00:44:32,569 --> 00:44:34,703
That way if I happen to be in a navigation controller or
这样如果我碰巧在导航控制器或

1101
00:44:34,772 --> 00:44:37,272
something like that, it'll show whatever I'm searching
这样,它会显示无论我搜索

1102
00:44:37,341 --> 00:44:40,208
for, #stanford or whatever at the top, so
#斯坦福之类的顶部,所以

1103
00:44:40,277 --> 00:44:43,613
I'll just make my UI look nice there,
我会使我的UI看起来不错,

1104
00:44:44,815 --> 00:44:45,547
All right, so
好吧,那么

1105
00:44:45,616 --> 00:44:48,384
we got to do this private func searchForTweets,
我们要做这个私人func searchForTweets,

1106
00:44:50,888 --> 00:44:53,055
Okay, so this is the thing that needs to go off and
这是需要去和

1107
00:44:53,124 --> 00:44:58,060
find these tweets, and so we'll do that in a moment,
找到这些tweet,我们会这样做,

1108
00:44:58,128 --> 00:45:00,395
One thing I'm also gonna do is I'm gonna do viewDidLoad,
我还要做的一件事就是我要做viewDidLoad,

1109
00:45:00,464 --> 00:45:01,531
just for testing purposes,
只是为了测试目的,

1110
00:45:01,599 --> 00:45:04,466
You notice I do this a lot when I'm developing, and
你注意到我这样做当我发展,和

1111
00:45:04,535 --> 00:45:05,868
I wanna have some testing,
我想有一些测试,

1112
00:45:05,937 --> 00:45:08,137
I'm gonna just set my model to something,
我要把我的模型,

1113
00:45:08,206 --> 00:45:11,740
So we'll do #stanford, okay, just for testing,
所以我们要做#斯坦福大学,好的,只是为了测试,

1114
00:45:11,809 --> 00:45:13,509
Once we're got our MVC working,
一旦我们得到了MVC的工作,

1115
00:45:13,577 --> 00:45:17,012
its public API is working, then we will remove this code,
它的公共API是工作,那么我们将删除这段代码,

1116
00:45:17,081 --> 00:45:17,914
It's just testing code,
这只是测试代码,

1117
00:45:19,050 --> 00:45:20,916
Okay, now, we have an error here,
好的,现在,我们这里有一个错误,

1118
00:45:20,985 --> 00:45:24,586
And this error is Swift saying excuse me,
这个错误是斯威夫特说对不起,

1119
00:45:24,655 --> 00:45:25,755
What is tweet?
推特是什么?

1120
00:45:27,358 --> 00:45:28,991
What is that type?
那是什么类型?

1121
00:45:29,060 --> 00:45:32,094
And I didn't really want you to be wasting your time in
我真的不希望你浪费你的时间

1122
00:45:32,163 --> 00:45:35,231
your homework figuring out how to go fetch
你的作业如何去获取

1123
00:45:35,299 --> 00:45:38,167
a tweet from Twitter and do a request and all that,
推特公司的一条微博,做一个请求,

1124
00:45:38,236 --> 00:45:41,703
So I wrote a framework that did it for you,
所以我写了一个框架,为你做的,

1125
00:45:41,772 --> 00:45:44,440
And by framework, I mean a framework like this,
框架,我的意思是这样的一个框架,

1126
00:45:44,508 --> 00:45:48,076
Like UIKit, right, UIKit is this like library of a whole
像UIKit,正确,这是UIKit像图书馆的一个整体

1127
00:45:48,145 --> 00:45:50,746
bunch of data structures that you can use to build your app,
堆数据结构,您可以使用它们来构建您的应用程序,

1128
00:45:50,815 --> 00:45:54,083
Well, I wrote one for you that will do Twitter stuff for it,
好吧,我为你写了一个Twitter会做东西,

1129
00:45:54,152 --> 00:45:55,718
And it has something in it called tweet,
和它叫微博,

1130
00:45:55,786 --> 00:45:57,620
And it also has something called request that lets
和它也有所谓的请求,允许

1131
00:45:57,689 --> 00:45:59,655
you make a Twitter request,
你让一个Twitter的请求,

1132
00:45:59,723 --> 00:46:02,925
All right, so that thing is right over here,
好了,这东西在这里,

1133
00:46:02,994 --> 00:46:06,195
Now, how do frameworks work?
现在,框架如何工作?

1134
00:46:06,264 --> 00:46:08,731
How do you use them when they're not built into
你如何使用它们时不内置

1135
00:46:08,799 --> 00:46:10,265
the system like Apple?
系统像苹果?

1136
00:46:10,334 --> 00:46:14,903
And the answer is, you need to build a higher level structure
答案是,您需要构建一个更高层次的结构

1137
00:46:14,972 --> 00:46:18,006
for Xcode to work with called a workspace,
在Xcode使用称为工作区,

1138
00:46:18,075 --> 00:46:21,343
So I'm actually gonna close this project,
所以我真的要关闭这个项目,

1139
00:46:21,412 --> 00:46:22,745
I'm closing this project,
我关闭这个项目,

1140
00:46:22,814 --> 00:46:25,648
And I'm going to Xcode, and I'm gonna create a new thing,
我要Xcode,我要创建一个新的东西,

1141
00:46:25,717 --> 00:46:28,184
which you've never seen before, called a workspace,
你从未见过的,称为工作区,

1142
00:46:29,253 --> 00:46:30,485
Now when I create this workspace,
现在当我创建工作区,

1143
00:46:30,554 --> 00:46:31,620
it wants to know where to put it,
它想知道把它放在哪里,

1144
00:46:31,688 --> 00:46:32,722
Be careful here, look,
小心这里,看,

1145
00:46:32,790 --> 00:46:34,957
it's trying to put it inside my Smashtag project,
它试图把在我Smashtag项目,

1146
00:46:35,026 --> 00:46:36,325
which I don't wanna do that,
我不想这样做,

1147
00:46:36,394 --> 00:46:39,995
I wanna put it up the top of my Developer level here,
我想把它放在我的开发人员水平的顶部,

1148
00:46:40,064 --> 00:46:41,630
same place I put all of my projects, okay,
同一个地方我把我所有的项目,好吧,

1149
00:46:41,699 --> 00:46:43,565
so really be careful about that,
所以很小心,

1150
00:46:43,634 --> 00:46:46,502
So I'm gonna call this L9, this is lecture 9, so
所以我要称之为L9,这是讲座9,所以

1151
00:46:46,571 --> 00:46:47,703
we'll call it L9,
我们叫它L9,

1152
00:46:47,772 --> 00:46:50,006
And I hit Save, and this created this workspace,
我点击保存,这个创建工作区,

1153
00:46:50,074 --> 00:46:52,341
But notice in the navigator, there's nothing there,
但要注意在navigator,什么也没有,

1154
00:46:53,610 --> 00:46:55,177
So what do we put in a workspace?
我们将在一个工作区吗?

1155
00:46:55,246 --> 00:46:57,980
Well, what we put in a workspace are other projects,
好吧,我们将在一个工作区中其他项目,

1156
00:46:58,048 --> 00:47:00,649
And this workspace is just gonna collect all those
这个空间是要收集所有这些

1157
00:47:00,718 --> 00:47:02,651
projects, because they kind of go together,
项目,因为他们一起去,

1158
00:47:02,719 --> 00:47:05,821
And obviously, this Twitter framework that I'm providing
很明显,这个Twitter框架,我提供

1159
00:47:05,890 --> 00:47:08,291
to you right here goes together with Smashtag,
你在这里Smashtag一起,

1160
00:47:08,359 --> 00:47:11,694
which is this thing we've been working on so far,
这是我们一直在做这件事到目前为止,

1161
00:47:11,762 --> 00:47:14,830
Now what you drag down in here is the ,xcodeproj,
现在你在这里是拖累,xcodeproj,

1162
00:47:14,899 --> 00:47:18,334
because it's the project itself that you wanna put in
因为它是项目本身,你想

1163
00:47:18,402 --> 00:47:19,535
this workspace,
这个工作空间,

1164
00:47:19,603 --> 00:47:21,670
So you just drag that in for both of them, so
所以你就拖,他们两人,

1165
00:47:21,739 --> 00:47:23,639
I'm gonna open this one as well,
我要打开这一个,

1166
00:47:23,708 --> 00:47:26,609
Here's the Xcode project for this Twitter thing,
这是Twitter的Xcode项目的事情,

1167
00:47:26,678 --> 00:47:29,378
Drag in, now be careful not to put it inside,
现在拖,小心不要把它里面,

1168
00:47:29,447 --> 00:47:32,481
see how that's trying to put it inside Smashtag there?
看看这是试图把它放进Smashtag吗?

1169
00:47:32,550 --> 00:47:35,217
Put it outside, so that they're siblings,
外,他们的兄弟姐妹,

1170
00:47:35,285 --> 00:47:38,454
Now I have this workspace right here that has two
现在我有两个这里的工作区

1171
00:47:38,523 --> 00:47:43,359
projects in it, and you even go here and hide others,
项目,你甚至去这里和隐藏,

1172
00:47:43,427 --> 00:47:46,028
And if we look in the Smashtag one, woo, looks familiar,
如果我们Smashtag一看,哇,看起来很熟悉,

1173
00:47:46,097 --> 00:47:48,997
This is the code we were just working on, right?
这是我们的代码只是工作,对吧?

1174
00:47:49,066 --> 00:47:50,599
If we look in the Twitter one,
如果我们在推特上,

1175
00:47:50,668 --> 00:47:52,134
this is the code I am providing you,
这是我给你的代码,

1176
00:47:52,203 --> 00:47:53,702
Now, what's in here?
现在,在这里是什么?

1177
00:47:53,771 --> 00:47:56,005
Here's tweet which is this struct and
这是这个结构体和微博

1178
00:47:56,074 --> 00:47:58,874
it's got all the things you would expect in a tweet,
它有所有你期望在一条微博,

1179
00:47:58,943 --> 00:48:01,210
The text of the tweet, the user who created it,
推特的文本,创建它的用户,

1180
00:48:01,279 --> 00:48:03,279
which is another thing, user right here,
这是另一件事,这里的用户,

1181
00:48:03,347 --> 00:48:06,082
and the user has a screen name that's at sign something,
和用户有一个屏幕名称的标志,

1182
00:48:06,150 --> 00:48:09,318
the actual name, a unique identifier for the user,
实际的名称,用户的惟一标识符,

1183
00:48:09,387 --> 00:48:12,888
Back to tweet, it's also got a unique identifier,
回推,它也有一个惟一的标识符,

1184
00:48:12,956 --> 00:48:15,858
It's also got things that are embedded in the tweet like
也有东西嵌在推特

1185
00:48:15,927 --> 00:48:16,858
other hashtags and
其他标签和

1186
00:48:16,927 --> 00:48:19,294
other users that are referenced inside the tweet,
引用的其他用户在推特,

1187
00:48:19,363 --> 00:48:21,163
And even media cuz you know a lot of times
甚至媒体因为你知道很多次了

1188
00:48:21,231 --> 00:48:23,899
tweets have an image with them too,
微博也有一个图像与他们,

1189
00:48:23,967 --> 00:48:26,301
And the other thing that's of importance in this Twitter
和另一件事的重要性的Twitter

1190
00:48:26,370 --> 00:48:28,637
framework that I'm giving you is this class Request,
框架,我给你的是这个类的请求,

1191
00:48:28,706 --> 00:48:30,305
Twitter Request right here,
Twitter的请求,

1192
00:48:30,374 --> 00:48:34,510
And this Request class is the thing you use to make requests
和这个请求类是您使用请求

1193
00:48:34,579 --> 00:48:35,544
for Twitter,
的推特上

1194
00:48:35,612 --> 00:48:39,248
Now, you don't need to look at any of the implementation
现在,你不需要看任何的实现

1195
00:48:39,316 --> 00:48:41,683
of any of this, and in fact, you can go and
的,事实上,你可以去

1196
00:48:41,752 --> 00:48:44,119
do assistant editor,
做助理编辑,

1197
00:48:44,188 --> 00:48:46,989
And if you do assistant editor on something like this,
如果你在这样的助理编辑,

1198
00:48:47,058 --> 00:48:50,426
you're actually gonna see its public API here,
你会看到它的公共API,

1199
00:48:50,494 --> 00:48:53,229
See all those public, public public, public,
看到所有这些公众,公众公开,公开的,

1200
00:48:53,297 --> 00:48:57,433
public; now we have not seen this public keyword before,
公众;现在我们还没有见过这个公共关键字,

1201
00:48:57,502 --> 00:49:00,435
all we've seen is private or fileprivate,
我们所看到的是私人或fileprivate,

1202
00:49:00,504 --> 00:49:02,771
So what does this public thing mean?
所以这个公共的事情是什么意思?

1203
00:49:02,840 --> 00:49:06,608
Look, I put public in all this these things over here,
看,我把在这里的这些东西,

1204
00:49:06,677 --> 00:49:10,078
Public means that not only is it not private but
公共意味着不仅不是私人

1205
00:49:10,147 --> 00:49:12,781
you can see it even if this framework is being used by
你可以看到它,即使这个框架被

1206
00:49:12,850 --> 00:49:14,583
some other project,
一些其他的项目,

1207
00:49:14,651 --> 00:49:18,754
So public means public outside of this framework, right,
所以公共意味着公共这个框架之外的,对吧,

1208
00:49:18,823 --> 00:49:19,421
make sense?
有意义吗?

1209
00:49:19,490 --> 00:49:21,656
So in UIKit a lot of things are marked public,
所以在UIKit很多东西都标记为公开,

1210
00:49:21,725 --> 00:49:23,659
All the things you can use have to be marked public cuz
您可以使用的一切必须标记为公开因为

1211
00:49:23,727 --> 00:49:25,460
it's in a different framework than your app,
它比你的应用在不同的框架,

1212
00:49:25,529 --> 00:49:30,098
Your app is kind of a framework, in a sense, so
你的应用程序是一种框架,在某种意义上,所以

1213
00:49:30,167 --> 00:49:30,666
that's public,
这是公共的,

1214
00:49:30,735 --> 00:49:32,501
And then, also notice farther down,
然后,还要注意进一步下降,

1215
00:49:32,569 --> 00:49:35,070
these methods are marked internal; that means I can
这些方法标记内部,这意味着我可以

1216
00:49:35,139 --> 00:49:38,641
only use them inside my framework, so I can't call any
只使用它们在我的框架,所以我不能调用任何

1217
00:49:38,709 --> 00:49:41,643
of these methods from Smashtag, they're internal,
Smashtag的这些方法,他们内部,

1218
00:49:41,712 --> 00:49:44,412
This actually, you haven't seen this keyword because
事实上,你没见过这个字,因为

1219
00:49:44,481 --> 00:49:47,449
it's the default, all the methods you've ever created
这是默认的,所有你曾经创建的方法

1220
00:49:47,517 --> 00:49:51,152
that you didn't mark private or fileprivate are internal,
马克,你没有私人或fileprivate内部,

1221
00:49:51,221 --> 00:49:52,221
It's the default, so
这是默认的,所以

1222
00:49:52,290 --> 00:49:55,858
you haven't put the word internal there, okay,
你还没有把这个词内部,好吧,

1223
00:49:55,926 --> 00:49:56,859
So, let's look at the public API,
所以,让我们来看看公共API,

1224
00:49:56,927 --> 00:49:58,994
Let's not even pay any attention to that, and
我们甚至没有注意,和

1225
00:49:59,063 --> 00:50:00,429
look at the public API,
看公共API,

1226
00:50:00,498 --> 00:50:03,398
This public API of Request, for making requests,
这种公共API的请求,发出请求,

1227
00:50:03,467 --> 00:50:05,200
we're only going to use three things,
我们只会使用三件事,

1228
00:50:05,269 --> 00:50:07,736
One is this convenience initializer
这是一个方便的初始化器

1229
00:50:07,804 --> 00:50:10,205
where you just give it something to search for and
你只是给它一些搜索

1230
00:50:10,274 --> 00:50:12,174
how many results you want,
有多少你想要的结果,

1231
00:50:12,243 --> 00:50:15,010
And then this method fetchTweets where you just
然后该方法fetchTweets你而已

1232
00:50:15,079 --> 00:50:18,314
give it this closure which it will call when it's done,
给它这个闭包,它将调用完成后,

1233
00:50:18,382 --> 00:50:20,416
It's gonna go off and do it on another thread and
它会去和在另一个线程

1234
00:50:20,485 --> 00:50:22,251
when it's done it will call,
当它结束的时候,它将调用,

1235
00:50:22,319 --> 00:50:24,653
And that's going to have an array of the tweets it found
这将有一个数组的tweet

1236
00:50:24,722 --> 00:50:27,389
that match your search,
匹配你的搜索,

1237
00:50:27,458 --> 00:50:28,724
what we're gonna use is this one down here, newer where if
我们将要使用的是下面这个,更新如果

1238
00:50:28,725 --> 00:50:29,991
And then last,
然后,最后

1239
00:50:30,061 --> 00:50:32,161
you ask it a request, give me a newer request,
你问它请求,给我一个更新的要求,

1240
00:50:32,230 --> 00:50:35,197
It'll give your request that you can use to get newer
它会给你的请求,您可以使用它们来得到更新

1241
00:50:35,266 --> 00:50:35,731
tweets,
微博,

1242
00:50:35,799 --> 00:50:37,065
Tweets that have been tweeted after
推特,推特

1243
00:50:37,134 --> 00:50:38,967
the previous one that you've got,
你的前一个,

1244
00:50:39,036 --> 00:50:39,968
So, that's all we're gonna use here,
所以,我们要在这里使用,

1245
00:50:40,037 --> 00:50:42,905
We're not really gonna use any of the other API
我们不使用任何其他的API

1246
00:50:42,973 --> 00:50:43,939
in this request,
在这个请求,

1247
00:50:44,008 --> 00:50:46,708
In your homework, you'll have to know this API here of
在你的作业,你必须知道这个API

1248
00:50:46,777 --> 00:50:48,777
Tweet cause you'll have to be able to get the text and
推特让你得能和的文本

1249
00:50:48,846 --> 00:50:52,047
the user information and also MediaItems so
用户信息和MediaItems

1250
00:50:52,116 --> 00:50:57,285
you can get the URLs of images that are in there, etc,
你可以得到图像的url,等,

1251
00:50:57,354 --> 00:50:59,521
But you never have to look at the private implementation of
但是你从来没有看私人的实现

1252
00:50:59,590 --> 00:51:01,924
this framework so don't even waste your time looking there,
这个框架所以不浪费你的时间,

1253
00:51:01,992 --> 00:51:04,026
Just look at things marked public,
看看事情标记为公开,

1254
00:51:04,095 --> 00:51:07,462
there's not a lot of things marked public- that's the only
没有很多事情标记为公开——这是唯一的

1255
00:51:07,531 --> 00:51:09,698
thing you're going to look for,
你要找,

1256
00:51:09,767 --> 00:51:12,334
Now how do I use this framework,
现在我该如何使用这个框架,

1257
00:51:12,402 --> 00:51:14,970
this Twitter framework in Smashtag?
这个Twitter Smashtag框架?

1258
00:51:15,039 --> 00:51:16,472
Well, you have to do one step,
好吧,你要做的一步,

1259
00:51:16,540 --> 00:51:18,807
You can't just put them in the same workspace and
你不能只是把它们放在同一个工作区和

1260
00:51:18,876 --> 00:51:20,075
start working,
开始工作,

1261
00:51:20,144 --> 00:51:24,245
Well, two steps, one is I need to say import Twitter,
两个步骤,一个是我需要进口推特说,

1262
00:51:24,314 --> 00:51:26,748
Just like I say import UIKit, if I want to use this Twitter
进口UIKit就像我说的,如果我想使用这个推特

1263
00:51:26,817 --> 00:51:29,118
framework up here I have to say import Twitter,
框架在这里我不得不说进口推特,

1264
00:51:29,186 --> 00:51:31,620
That's gonna cause this tweet to start being
这微博开始的原因

1265
00:51:31,689 --> 00:51:34,323
recognized as a type because it's gonna see this
公认的一种类型,因为它会看到这个

1266
00:51:34,392 --> 00:51:36,292
tweet type right over here,
微博类型,

1267
00:51:36,360 --> 00:51:40,062
But the other important thing, don't forget,
但另一件重要的事情,不要忘记,

1268
00:51:40,131 --> 00:51:44,500
is you need to tell Xcode that when you build Smashtag that
你需要告诉Xcode,当你建立Smashtag呢

1269
00:51:44,569 --> 00:51:47,269
app includes Twitter in it,
应用包括推特,

1270
00:51:47,337 --> 00:51:50,806
And you do that by going to the Smashtag project, okay,
和你去看Smashtag项目,好吧,

1271
00:51:50,874 --> 00:51:51,640
the project settings,
项目设置,

1272
00:51:51,709 --> 00:51:53,175
And go all the way to the bottom where it says
,一直到下面说

1273
00:51:53,244 --> 00:51:54,776
Embedded Binaries,
嵌入二进制文件,

1274
00:51:54,845 --> 00:51:58,980
And just pick up the product of your Twitter framework,
就拿起你的Twitter的产品框架,

1275
00:51:59,049 --> 00:52:00,549
You see where it says Products right here?
你看到它说产品呢?

1276
00:52:00,618 --> 00:52:04,653
Just pick that up and drag it in here, and that says,
刚接,并将其拖在这里,说,

1277
00:52:04,722 --> 00:52:08,891
please put Twitter framework into my Smashtag,
请把到我Smashtag Twitter框架,

1278
00:52:08,960 --> 00:52:10,058
because my Smashtag uses it,
因为我的Smashtag使用它,

1279
00:52:10,127 --> 00:52:12,694
If you don't do this step, then it'll all compile but
如果你不做这一步,那么它会编译不过

1280
00:52:12,763 --> 00:52:15,130
then when Smashtag runs, Twitter won't be there, and
当Smashtag运行时,Twitter不会,

1281
00:52:15,198 --> 00:52:15,965
so it will fail,
所以它将会失败,

1282
00:52:18,569 --> 00:52:20,068
Now, I'm gonna make you do that step as part of
现在,我要让你做这一步的

1283
00:52:20,137 --> 00:52:20,969
your homework,
你的家庭作业,

1284
00:52:21,038 --> 00:52:23,638
I will post this code for Smashtag, but
我将这段代码Smashtag,但是

1285
00:52:23,707 --> 00:52:26,208
I'm not gonna post the workspace, so
我不会把工作空间

1286
00:52:26,277 --> 00:52:29,945
you're gonna have to build the workspace on your own,
你必须建立自己的工作区,

1287
00:52:30,014 --> 00:52:30,913
All right, so let's continue,
好吧,让我们继续,

1288
00:52:30,982 --> 00:52:32,981
Now that we've got this array of tweets,
现在我们有这个数组的tweet,

1289
00:52:33,050 --> 00:52:35,283
what are we gonna do with this array of tweets?
我们要怎么处理这个数组的推文?

1290
00:52:35,352 --> 00:52:40,555
Let's start by doing a fetch for our search text,
我们先来做一个获取搜索文本,

1291
00:52:40,624 --> 00:52:41,790
So we got our search text,
我们有我们的搜索文本,

1292
00:52:41,858 --> 00:52:44,092
we wanna go fetch all those things on there,
我们想去获取所有这些事情,

1293
00:52:44,161 --> 00:52:45,995
That's what we're supposed to do in search for tweets,
这就是我们应该做在搜索微博,

1294
00:52:47,064 --> 00:52:48,096
Let's make another function here,
让我们做另一个函数,

1295
00:52:48,165 --> 00:52:50,065
another little private func,
另一个小私有函数,

1296
00:52:50,133 --> 00:52:52,801
I'm gonna call it twitterRequest,
我要叫它twitterRequest,

1297
00:52:52,870 --> 00:52:56,104
which is gonna return a Twitter,Request,
它会返回一个Twitter,请求,

1298
00:52:56,173 --> 00:52:57,973
But yeah, here's another thing,
但,是的,这是另一件事,

1299
00:52:58,041 --> 00:53:00,809
This I can call tweet because I'm importing this Twitter
这个我可以叫推特,因为我进口Twitter

1300
00:53:00,878 --> 00:53:03,678
framework and there's no other class called tweet, so
框架和没有其他的类称为tweet,

1301
00:53:03,747 --> 00:53:04,780
i just have to call it tweet,
我只需要称之为微博,

1302
00:53:04,849 --> 00:53:07,983
Its full name is actually Twitter,Tweet,
它的全名是推特,推特,

1303
00:53:08,052 --> 00:53:11,720
Just like, you know, UITableViewController,
就像,你知道,UITableViewController,

1304
00:53:11,789 --> 00:53:15,490
it's full name is UIKit,UITableViewController,
它的全称是UIKit UITableViewController,

1305
00:53:15,559 --> 00:53:16,892
use Twitter,Tweet because I think in Assignment 5, you
使用推特,推特,因为我认为在赋值5,你

1306
00:53:16,893 --> 00:53:18,226
Now i'm gonna
现在我要

1307
00:53:18,295 --> 00:53:21,530
might end up wanting to have you own local tweet class,
可能会想有你自己的地方推类,

1308
00:53:21,598 --> 00:53:23,164
So I'm gonna use Twitter,Tweet and
所以我要使用推特,推特

1309
00:53:23,233 --> 00:53:26,034
Twitter,Request everywhere but I wouldn't have to as long as
Twitter,请求无处不在但我不会只要

1310
00:53:26,102 --> 00:53:28,670
I didn't have a class called Tweet or Request otherwise,
我没有一个类称为Tweet或者请求,否则,

1311
00:53:28,739 --> 00:53:31,840
But this is a pretty generic name request so putting
但这是一个非常通用的名称请求把

1312
00:53:31,909 --> 00:53:35,644
the Twitter dot on front might be kind of a good idea anyway,
Twitter点面前可能是一个好主意,

1313
00:53:36,781 --> 00:53:37,713
All right so
好

1314
00:53:37,781 --> 00:53:40,282
the Twitter,Request function here is just going to return
Twitter,请求函数就会返回

1315
00:53:40,351 --> 00:53:44,386
a Twitter request that matches this search text,
一个Twitter请求匹配该搜索文本,

1316
00:53:44,455 --> 00:53:45,420
And that's really, really simple,
这是真的,真的很简单,

1317
00:53:45,489 --> 00:53:48,556
I'm just gonna say, if I can let the query for
我只是想说,如果我能让查询

1318
00:53:48,625 --> 00:53:51,393
the search term equal the search text,
搜索词等于搜索文本,

1319
00:53:51,461 --> 00:53:55,030
And I wanna make sure that that query is not empty,
我想确保查询并不是空的,

1320
00:53:55,098 --> 00:53:58,800
So I don't wanna search for nil or for the empty string,
所以我不想寻找零或为空字符串,

1321
00:53:58,869 --> 00:54:01,503
So I'm just keeping that out of it right here,
我只是保持在这里,

1322
00:54:01,572 --> 00:54:04,305
And otherwise I'm just gonna return a Twitter request using
,否则我要返回一个Twitter请求使用

1323
00:54:04,374 --> 00:54:07,042
that convenient initializer I told you about called Search,
方便我跟你说过初始化称为搜索,

1324
00:54:08,245 --> 00:54:11,046
And I'm just gonna pass that query and,
和我要通过查询,

1325
00:54:11,115 --> 00:54:12,781
well let's get 100 of them,
我们得到100,

1326
00:54:12,850 --> 00:54:15,351
Okay, so we're gonna, we'll grab 100 tweets at a time,
好的,所以我们会,我们会抓住一次100条,

1327
00:54:17,021 --> 00:54:20,188
And if that's not true, if the search term is nil or
如果这不是真的,如果零或搜索词

1328
00:54:20,257 --> 00:54:23,391
it's empty, then I'm gonna return nil from this,
它是空的,然后我将返回nil,

1329
00:54:23,460 --> 00:54:25,628
So let's make this be, you know, optional,
所以让我们做这个,你知道,可选的,

1330
00:54:27,164 --> 00:54:28,563
Okay, so everyone understand what this function does?
好的,所以大家都理解这个函数到底做了些什么?

1331
00:54:28,632 --> 00:54:31,800
It just makes a Twitter request that will search for
它只是让一个Twitter搜索请求

1332
00:54:31,869 --> 00:54:35,036
our searchText, that's all it does,
我们searchText,,

1333
00:54:35,105 --> 00:54:36,538
So now down here in searchForTweets,
所以现在在searchForTweets下面,

1334
00:54:36,606 --> 00:54:41,343
I can say if I can let request equal the twitterRequest,
我只能说如果我能等于twitterRequest让请求,

1335
00:54:41,412 --> 00:54:43,111
which hopefully it can make,
希望它能使,

1336
00:54:43,180 --> 00:54:46,047
Okay, now I have a request,
好了,现在我有一个请求,

1337
00:54:46,116 --> 00:54:50,819
Now I just need to cause that request to happen,
现在我只需要使该请求发生时,

1338
00:54:50,888 --> 00:54:58,727
So I'm just gonna say this Twitter request,fetchTweets,
所以我想说这个Twitter请求,fetchTweets,

1339
00:54:58,796 --> 00:55:02,364
So this fetchTweets function right there, you see it?
这fetchTweets函数,你看到了吗?

1340
00:55:02,433 --> 00:55:03,765
The top one, okay,
上面的,

1341
00:55:03,834 --> 00:55:07,603
it takes this closure right here as an argument,
它以这个闭包作为参数,

1342
00:55:07,671 --> 00:55:11,172
I'm gonna double click on it, to show what it does here,
我要双击它,给它,

1343
00:55:11,241 --> 00:55:14,309
I'm going to use trailing closure syntax to get rid of
我将使用后关闭摆脱语法

1344
00:55:14,377 --> 00:55:16,345
the parentheses there,
括号,

1345
00:55:16,413 --> 00:55:17,179
Now what's this?
现在这是什么?

1346
00:55:17,248 --> 00:55:19,648
This is the only argument in my closure,
这是唯一的论点在我关闭,

1347
00:55:19,717 --> 00:55:21,783
Those are the tweets that it fetched,
这些微博获取,

1348
00:55:21,852 --> 00:55:23,351
See it's an array of tweets,
看到微博的一个数组,

1349
00:55:23,420 --> 00:55:24,286
I'll call this newTweets,
我叫newTweets,

1350
00:55:24,355 --> 00:55:26,522
Okay, so that's going to be an array of tweets,
好了,这就是一个tweet数组,

1351
00:55:26,590 --> 00:55:29,490
I don't even need the parentheses here by the way,
我甚至不需要括号在这里顺便说一下,

1352
00:55:29,559 --> 00:55:30,192
So I have newTweets,
所以我有newTweets,

1353
00:55:30,260 --> 00:55:32,394
So newTweets is gonna be an array of Tweet that it
所以newTweets会推它的数组

1354
00:55:32,463 --> 00:55:33,695
fetched; now, of course,
获取;现在,当然,

1355
00:55:33,764 --> 00:55:35,763
it's doing this off the main queue, right?
这样做主要的队列,对吧?

1356
00:55:35,832 --> 00:55:38,066
It's gotta go do that Twitter request,
这是要去干,Twitter的要求,

1357
00:55:38,135 --> 00:55:40,168
what if it's a really slow network?
如果它真的是一个缓慢的网络呢?

1358
00:55:40,237 --> 00:55:43,572
Or Twitter is really slow that time or whatever,
或Twitter是很慢,时间等等,

1359
00:55:43,640 --> 00:55:45,106
I finally got these new tweets back, what do I wanna do?
我终于这些新推回来,我想做什么?

1360
00:55:45,107 --> 00:55:46,573
So inside here,
所以在这里,

1361
00:55:46,643 --> 00:55:50,913
Well I just want to add them on to the end of my model,
我只是想将它们添加到我的模型,

1362
00:55:50,981 --> 00:55:52,748
Here's my model, it's an array of array of tweets,
这是我的模型,它是一个数组,数组的微博,

1363
00:55:52,749 --> 00:55:54,516
right?
对吧?

1364
00:55:54,584 --> 00:55:58,853
Here's an array, so I'm just going to take my model, and
这是一个数组,所以我要把我的模型,和

1365
00:55:58,922 --> 00:56:02,257
append onto it this array of tweets,
添加到这个数组的tweet,

1366
00:56:02,325 --> 00:56:05,727
And actually, I'm not gonna append it on the end because
实际上,我不会添加结束,因为

1367
00:56:05,796 --> 00:56:08,830
I want all my new tweets to show up at the beginning,
我想让我的新微博出现在一开始,

1368
00:56:08,899 --> 00:56:11,200
so in section zero at the beginning, so
所以部分零开始

1369
00:56:11,268 --> 00:56:14,369
I'm gonna insert these new tweets at 0 in my array,
我要插入这些新微博(0)我的数组,

1370
00:56:14,438 --> 00:56:15,570
So right at the top,
所以正确的顶部,

1371
00:56:15,639 --> 00:56:17,573
So my new tweets are gonna come in at the top,
我的新微博要进来,

1372
00:56:18,809 --> 00:56:19,374
Make sense?
有意义吗?

1373
00:56:19,443 --> 00:56:21,109
Now, we have an error there,
现在,我们有一个错误,

1374
00:56:21,178 --> 00:56:24,112
Can anyone guess why this error is here before I
谁能猜出这个错误在这里在我吗

1375
00:56:24,181 --> 00:56:24,746
open it?
打开它吗?

1376
00:56:24,815 --> 00:56:25,447
>> Mutating,
> >变异,

1377
00:56:25,516 --> 00:56:27,249
>> What? >> Yeah, mutating,
> >什么?

1378
00:56:27,318 --> 00:56:27,949
>> Mutating,
> >变异,

1379
00:56:28,018 --> 00:56:29,484
That's a good guess but no,
这是一个很好的猜测,但没有,

1380
00:56:29,553 --> 00:56:34,489
It's because self, it's the old closure cycle problem,
这是因为自我,这是旧的闭合循环的问题,

1381
00:56:34,558 --> 00:56:35,490
right?
对吧?

1382
00:56:35,559 --> 00:56:37,392
Since we're accessing self here,
因为我们这里访问的自我,

1383
00:56:37,460 --> 00:56:39,228
these tweets as part of our self,
这些tweet作为自我的一部分,

1384
00:56:39,296 --> 00:56:41,630
We need to explicitly say that so
我们需要显式地说

1385
00:56:41,698 --> 00:56:44,433
that we can notice, we might have a memory cycle,
我们可以注意到,我们可能有一个记忆周期,

1386
00:56:44,501 --> 00:56:46,668
And do we have a memory cycle here?
我们这里有一个记忆周期吗?

1387
00:56:46,737 --> 00:56:48,536
In fact we do,
事实上,我们做的,

1388
00:56:48,605 --> 00:56:51,106
Because what if this view controller goes off to
因为如果这个视图控制器熄灭

1389
00:56:51,175 --> 00:56:53,374
fetch some tweets and it takes forever,
获取一些推特,要花很多时间,

1390
00:56:53,443 --> 00:56:57,078
And so the person says, I'll search for something else,
人说,我将寻找别的东西,

1391
00:56:57,147 --> 00:56:59,014
Now they said the search text is on the else and
现在他们说,搜索文本和其他

1392
00:56:59,083 --> 00:57:00,482
another fetch goes off,
另一个拿了,

1393
00:57:00,551 --> 00:57:03,652
And now here comes the first fetch and it's irrelevant now
现在来了第一个获取和现在无关紧要了

1394
00:57:03,720 --> 00:57:05,453
because I already looked for something else,
因为我已经找别的东西,

1395
00:57:05,522 --> 00:57:08,823
So we do here, want to be careful to ignore
所以我们所做的,要小心,不容忽视

1396
00:57:08,892 --> 00:57:12,460
this when it comes back and we also, if someone searches and
这个时候我们还,如果有人搜索和

1397
00:57:12,529 --> 00:57:15,130
it's taking forever and they hit back, we want our view
永远和他们予以回击,我们希望我们的观点

1398
00:57:15,199 --> 00:57:17,833
controllers to be able to leave memory as well,
控制器能够留下记忆,

1399
00:57:17,902 --> 00:57:19,701
So we don't want the closure, the cycle here,
所以我们不希望关闭,这里的周期,

1400
00:57:19,770 --> 00:57:21,936
we don't want this closure holding our self in memory,
我们不希望这个闭包在内存中保留自我,

1401
00:57:22,005 --> 00:57:24,639
So we don't want this to be a strong pointer and
所以我们不希望这是一个强指针

1402
00:57:24,708 --> 00:57:27,709
we need to check to make sure that when we get back,
我们需要检查以确保当我们回来时,

1403
00:57:27,778 --> 00:57:29,877
it's still what we're interested in,
它仍然是我们感兴趣的,

1404
00:57:29,946 --> 00:57:31,880
So how can we break this cycle?
所以我们怎样才能打破这个循环?

1405
00:57:31,949 --> 00:57:33,915
We're just gonna use our friend weak self, okay?
我们要用我们的朋友弱自我,明白吗?

1406
00:57:33,916 --> 00:57:35,882
That's easy,
这很简单,

1407
00:57:35,952 --> 00:57:37,552
And that turns this into an optional,
把这变成一个可选的,

1408
00:57:37,621 --> 00:57:39,253
So we added a question mark,
我们添加了一个问号,

1409
00:57:39,322 --> 00:57:40,422
Boom, we broke that cycle,
繁荣,我们打破这个循环,

1410
00:57:40,491 --> 00:57:42,457
So even if this fetch is sitting out there fetching,
所以即使这种获取是坐在那里获取,

1411
00:57:42,525 --> 00:57:44,325
it's not gonna be keeping our view controller in memory,
它不会让我们的视图控制器在内存中,

1412
00:57:44,394 --> 00:57:46,060
Our view control can leave memory, and
我们认为控制可以把内存和

1413
00:57:46,129 --> 00:57:46,795
if it comes back and
如果它回来

1414
00:57:46,864 --> 00:57:49,897
it's gone, then this line of code will not execute,
它走了,然后这行代码不会执行,

1415
00:57:49,966 --> 00:57:52,267
How about dealing with the fact that our request might
如何处理我们的请求可能吗

1416
00:57:52,336 --> 00:57:53,635
have changed?
已经改变了吗?

1417
00:57:53,704 --> 00:57:54,969
Well, to do that,
嗯,要做到这一点,

1418
00:57:55,038 --> 00:57:59,073
I'm gonna have to keep track of our lastTwitterRequest,
我要跟踪lastTwitterRequest,

1419
00:57:59,142 --> 00:58:02,211
actually we've got to put it inside here,
我们必须把它在这里,

1420
00:58:04,181 --> 00:58:08,349
Okay, I'm gonna keep track of it, and
好的,我会跟踪它,

1421
00:58:08,418 --> 00:58:13,388
then in here I'm not going to do this unless our
在这里我不打算这样做,除非我们

1422
00:58:13,457 --> 00:58:18,060
request equals the lastTwitterRequest,
请求= lastTwitterRequest,

1423
00:58:18,128 --> 00:58:21,029
So if this request that came back is not the last one we
如果这个要求不是我们最后一个回来

1424
00:58:21,098 --> 00:58:22,797
issued, then I'm not gonna do it,
发布了,那么我不会这样做,

1425
00:58:22,866 --> 00:58:24,866
And so let me go up here and
所以我来这里

1426
00:58:24,935 --> 00:58:28,169
say private var lastTwitterRequest and
说私人var lastTwitterRequest和

1427
00:58:28,238 --> 00:58:32,907
that's going to be a Twitter,Request of course,
这就是Twitter,请求当然,

1428
00:58:32,976 --> 00:58:38,079
Request, optional, is not always set,
请求,可选的,并不总是集,

1429
00:58:38,148 --> 00:58:39,914
Everyone kinda see what I'm doing there?
每个人都看到我在做什么吗?

1430
00:58:39,983 --> 00:58:42,583
And of course this is saying self again, so we'll put self
当然这是说自己,所以我们会把自我

1431
00:58:42,652 --> 00:58:44,920
in there and of course self is weak so we'll do that,
当然,自我是弱所以我们会这样做,

1432
00:58:46,056 --> 00:58:46,988
So that's all good,
这就是好,

1433
00:58:47,057 --> 00:58:48,957
Any other problems you can see with this?
任何其他问题你可以看到吗?

1434
00:58:49,026 --> 00:58:51,493
I don't see any so far,
我没有看到任何迄今为止,

1435
00:58:52,529 --> 00:58:53,428
So it's all good, So,
所以这都是好的,所以,

1436
00:58:53,497 --> 00:58:55,363
before we go hooking up our table view,
在我们去勾搭表视图,

1437
00:58:55,432 --> 00:58:59,167
let's just make sure that our Twitter fetches are working,
我们确保我们的Twitter获取工作,

1438
00:58:59,236 --> 00:59:02,137
And I'm gonna do that by putting a didSet
我要用一个didSet

1439
00:59:02,206 --> 00:59:06,007
up here on my model, and every time my model changes,
在我的模型,每一次我的模型变化,

1440
00:59:06,076 --> 00:59:08,310
I'm just gonna print the tweets out,
我要打印消息,

1441
00:59:08,379 --> 00:59:09,778
Now luckily I've made it so
幸运的是我做了

1442
00:59:09,847 --> 00:59:11,979
the tweet is CustomStringConvertible,
CustomStringConvertible推特,

1443
00:59:12,048 --> 00:59:13,615
it implements description,
它实现了描述,

1444
00:59:13,683 --> 00:59:15,383
It can print itself as a string so
它可以打印作为字符串

1445
00:59:15,452 --> 00:59:16,885
this is an array of those,
这是一个数组,

1446
00:59:16,953 --> 00:59:19,521
So this will print out an array, actually an array
实际上这将会打印出一个数组,数组

1447
00:59:19,589 --> 00:59:22,224
of an array of this tweet printed out as a string,
数组的tweet打印出来作为一个字符串,

1448
00:59:22,293 --> 00:59:26,294
So we're just gonna print it out there,
所以我们要打印出来,

1449
00:59:26,363 --> 00:59:27,695
Just seems like it should work?
只是似乎应该工作吗?

1450
00:59:27,764 --> 00:59:30,865
Let's go give it a try and find out,
让我们去试一试,找到答案,

1451
00:59:30,934 --> 00:59:33,068
We'll do this on iPhone 7,
我们将做这个在iPhone上7,

1452
00:59:37,107 --> 00:59:38,706
Pay attention right now because this
注意现在因为这个

1453
00:59:38,775 --> 00:59:40,742
is not in fact going to work,
不去工作,

1454
00:59:40,810 --> 00:59:43,177
And this won't work for you either and you're gonna need
这也不会为你工作,你需要

1455
00:59:43,246 --> 00:59:45,581
to do a couple of things to make a Twitter fetch work,
要做的几件事情让一个Twitter获取工作,

1456
00:59:46,917 --> 00:59:49,951
By the way you see we have these prototype cells that
顺便说一下你看到我们有这些原型细胞

1457
00:59:50,020 --> 00:59:53,055
have to have reuse identifiers; gotta remember to
需要重用标识符;要记住吗

1458
00:59:53,123 --> 00:59:55,356
fix that later,
解决这个问题后,

1459
00:59:55,425 --> 01:00:00,762
Alright, so we run, and look at this thing it puts up here,
好的,我们跑,看看这个东西了,

1460
01:00:00,831 --> 01:00:02,964
Smashtag would like to access Twitter accounts,
Smashtag想访问Twitter账户,

1461
01:00:03,033 --> 01:00:05,166
So you're not allowed to write an app that just starts
所以你不可以编写一个应用程序,只是开始

1462
01:00:05,235 --> 01:00:07,935
posting things for people on Twitter behind the scenes,
在Twitter上发布的东西的人在幕后,

1463
01:00:08,004 --> 01:00:11,806
Okay, when you write an app it is always going to ask,
好的,当你写一个应用程序总是要问,

1464
01:00:11,875 --> 01:00:14,709
the first time you try to use Twitter, whether it's allowed,
你第一次尝试使用Twitter,不管它是允许的,

1465
01:00:14,777 --> 01:00:18,513
So I'll click okay, and let's go look in our console and
所以我点击好了,让我们去看看我们的控制台

1466
01:00:18,582 --> 01:00:19,214
see if it printed,
是否打印,

1467
01:00:21,384 --> 01:00:24,218
It didn't, all it printed out here is, couldn't discover
它没有,它打印出来是,无法发现

1468
01:00:24,287 --> 01:00:27,689
Twitter account type, hm, why would it say that?
Twitter帐户类型,嗯,为什么它会这样说?

1469
01:00:27,757 --> 01:00:31,026
Well, that's because your simulator, it's just a device,
嗯,那是因为你的模拟器,它只是一个装置,

1470
01:00:31,094 --> 01:00:34,229
it needs to have Twitter, a Twitter account, basically,
它需要有推特,一个Twitter账号,基本上,

1471
01:00:34,298 --> 01:00:35,463
your device needs a Twitter account, so
你的设备需要一个Twitter账号,所以

1472
01:00:35,531 --> 01:00:36,331
where do we set that?
我们在哪里集合?

1473
01:00:36,399 --> 01:00:38,299
So let's go back to our simulator,
让我们回到我们的模拟器,

1474
01:00:38,368 --> 01:00:42,737
here it is, I'm gonna go hardware, home button, okay,
在这里,我要硬件、家庭按钮,好吧,

1475
01:00:42,805 --> 01:00:44,405
you can also do command, shift, F,
你也可以命令,转变,F,

1476
01:00:44,474 --> 01:00:45,306
Is hardware home button,
是硬件按钮,

1477
01:00:45,375 --> 01:00:49,477
And I'm gonna go over to the Settings app on my simulator,
和我要去设置应用程序在我的模拟器,

1478
01:00:49,546 --> 01:00:51,512
But you can do it on your device as well,
但是你可以在你的设备,

1479
01:00:51,581 --> 01:00:54,082
And if you go down in settings, here's Twitter,
如果你去设置,这是Twitter,

1480
01:00:54,151 --> 01:00:54,916
Look at that,
看,

1481
01:00:54,985 --> 01:00:55,550
Twitter right there,
推特,

1482
01:00:55,619 --> 01:00:57,218
And here's where you type in your
这是你输入你的地方

1483
01:00:57,287 --> 01:00:58,386
Twitter username and password,
Twitter用户名和密码,

1484
01:00:58,455 --> 01:00:59,854
And if you don't type this in,
如果你不类型的,

1485
01:00:59,923 --> 01:01:03,391
then no apps on your system can access Twitter,
然后应用程序在您的系统上无法访问Twitter,

1486
01:01:03,460 --> 01:01:06,094
Cuz how would they- they'd have to know who you are,
因为他们会如何——他们必须知道你是谁,

1487
01:01:06,163 --> 01:01:08,730
So I'm gonna type this here, I'm gonna do it off screen cuz
所以我要类型在这里,因为我要做掉屏幕

1488
01:01:08,799 --> 01:01:11,466
I don't want you to see my password,
我不想让你看到我的密码,

1489
01:01:11,535 --> 01:01:14,269
So now I am logged in on Twitter,
所以现在我在Twitter上登录,

1490
01:01:15,539 --> 01:01:17,139
So now if I go back and start my app
所以现在如果我回去并开始应用

1491
01:01:18,875 --> 01:01:21,876
It will both be in allowed because I clicked OK,
它都将被允许因为我点击OK,

1492
01:01:21,945 --> 01:01:23,878
And I'll be logged in so
我将登录

1493
01:01:23,947 --> 01:01:25,980
it'll have an actual Twitter user that can do it,
它将有一个实际的Twitter用户,可以这样做,

1494
01:01:26,049 --> 01:01:27,782
And sure enough, look down here at the bottom,
果然,看下面的底部,

1495
01:01:27,850 --> 01:01:31,186
We're getting all kinds of tweets being printed out here,
我们得到各种各样的推文被打印出来,

1496
01:01:31,255 --> 01:01:32,387
So here's a tweet,
这是一条微博,

1497
01:01:32,455 --> 01:01:34,756
Here's its unique ID,
这是其惟一的ID,

1498
01:01:34,824 --> 01:01:36,691
Here's the person who tweeted it,
这是在推特上它的人,

1499
01:01:36,760 --> 01:01:38,559
Here's when it was tweeted,
这是推的时候,

1500
01:01:38,628 --> 01:01:41,729
Here is the text of the tweet,
这是推特的文本,

1501
01:01:41,798 --> 01:01:44,432
This one's got an embedded URL, etc,
这一个有一个嵌入式URL等等,

1502
01:01:44,501 --> 01:01:45,700
So we're doing well,
所以我们做的很好,

1503
01:01:45,769 --> 01:01:47,702
We've got our tweets coming in,
我们有我们的微博,

1504
01:01:47,771 --> 01:01:50,638
So now all we need to do is load them up into our
现在我们需要做的就是它们加载到我们

1505
01:01:50,707 --> 01:01:51,506
table view,
表视图,

1506
01:01:51,575 --> 01:01:53,608
So what do we need to do to load this thing up in
我们需要加载这个东西

1507
01:01:53,676 --> 01:01:54,409
the table view?
表视图?

1508
01:01:54,478 --> 01:01:57,879
Now, surprisingly simple actually, the two pieces we
现在,令人惊讶的是简单的实际,我们两块

1509
01:01:57,948 --> 01:02:01,249
have to do, one is every time we change our model we have
每次都要做的,一个是我们改变我们的模型

1510
01:02:01,317 --> 01:02:04,519
to tell the table view that it changed and then we have
告诉表视图,然后我们有改变

1511
01:02:04,587 --> 01:02:07,989
to implement those table view data source methods,
要实现这些数据源表视图方法,

1512
01:02:08,057 --> 01:02:09,323
So let's start with the first one,
让我们从第一个开始,

1513
01:02:09,392 --> 01:02:12,760
Actually we have already changed our model once,
实际上我们已经改变了我们的模型,

1514
01:02:12,829 --> 01:02:14,962
Right here, we changed our model and
在这里,我们改变了我们的模型

1515
01:02:15,031 --> 01:02:17,965
we told the table view about it, so that's good,
我们对表格视图,这样很好,

1516
01:02:18,034 --> 01:02:20,001
Here we're changing our model,
这里我们改变我们的模型,

1517
01:02:20,070 --> 01:02:23,137
So we need to tell the table view about it,
所以我们需要告诉表视图,

1518
01:02:23,206 --> 01:02:26,207
So self?,tableView,
表视图,自我?

1519
01:02:26,276 --> 01:02:27,909
And what did I do here to my model?
这里我做了什么我的模型吗?

1520
01:02:27,977 --> 01:02:30,611
I just inserted a section at the beginning,
在一开始,我只是插入一段

1521
01:02:30,680 --> 01:02:34,882
So there happens to be a tableView method called
这恰好是一个视图方法调用

1522
01:02:34,951 --> 01:02:36,484
insertSection,
insertSection,

1523
01:02:36,553 --> 01:02:38,419
And it just says, you inserted some sections,
它只是说,你插入的部分,

1524
01:02:38,488 --> 01:02:39,720
Which ones?
哪一个?

1525
01:02:39,789 --> 01:02:41,289
ask you about those and put the rows in there for you,
问你关于这些,把行给你,

1526
01:02:41,290 --> 01:02:42,790
I will go and
我将去

1527
01:02:42,859 --> 01:02:44,792
And this sections is an index set,
这部分是一个索引集,

1528
01:02:44,861 --> 01:02:47,428
which you can give it an array literal,
你可以给它一个数组文字,

1529
01:02:47,497 --> 01:02:49,697
So I just inserted section zero,
所以我就插入部分零,

1530
01:02:49,766 --> 01:02:52,066
So I'll just put an array with just zero in it,
所以我就把数组只有零,

1531
01:02:52,135 --> 01:02:54,702
And I'm gonna use the fade animation
我要使用渐变动画

1532
01:02:54,771 --> 01:02:56,138
to show that fading in,
表明,衰落,

1533
01:02:58,208 --> 01:02:59,507
So, insertSections,
所以,insertSections,

1534
01:02:59,575 --> 01:03:02,777
So, this is me telling the tableView, I changed my model,
这是我告诉tableView,我改变了我的模型,

1535
01:03:02,845 --> 01:03:04,379
so ask me again,
所以再次问我,

1536
01:03:04,447 --> 01:03:05,780
Ask me those tableView data source,
问我这些tableView数据源,

1537
01:03:05,849 --> 01:03:08,483
Now, since I told it exactly what I did it's only gonna ask
现在,既然我告诉它我也只是要问什么

1538
01:03:08,551 --> 01:03:11,252
me about that section, which is nice, higher performance,
部分的我,很好,更高的性能,

1539
01:03:11,321 --> 01:03:13,488
Then reloadData, the hammer reloadData,
然后reloadData,锤子reloadData,

1540
01:03:13,557 --> 01:03:16,124
in which case it would ask me for all rows in all sections
在这种情况下,它会问我所有部分的所有行

1541
01:03:16,193 --> 01:03:20,361
again; so here I know exactly what I did,
再次,所以我知道我所做的,

1542
01:03:20,430 --> 01:03:24,365
Now this actually is dangerous code here,
这实际上是危险的代码,

1543
01:03:24,434 --> 01:03:26,334
This is really easy to add this line of code and
这是很容易添加这行代码

1544
01:03:26,403 --> 01:03:28,102
now your app just acts weird,
现在应用程序行为怪异,

1545
01:03:28,171 --> 01:03:30,204
It just acts weird all the time,
它行为怪异,

1546
01:03:30,273 --> 01:03:33,240
Can anyone, want, guess why this
谁能想,猜一猜为什么

1547
01:03:33,309 --> 01:03:36,144
adding this line of code would cause my app to go all weird?
添加这行代码会导致我的程序去所有奇怪的吗?

1548
01:03:37,647 --> 01:03:42,149
It's because this is a UI call,
这是因为这是一个用户界面,

1549
01:03:42,218 --> 01:03:46,153
And what queue are we on here?
我们和队列在这里吗?

1550
01:03:46,222 --> 01:03:47,622
Some queue, not the main queue,
一些队列,而不是主要的队列,

1551
01:03:47,691 --> 01:03:50,725
Whatever queue we fetched those tweets on, okay?
我们无论队列获取这些tweet,好吗?

1552
01:03:50,794 --> 01:03:52,159
So we're not on the main queue,
所以我们不是主要的队列,

1553
01:03:52,228 --> 01:03:54,862
So we can't make a UI call here,
所以我们不能在这里打个UI,

1554
01:03:54,931 --> 01:04:00,035
Right, so we have to dispatch this back to the main queue,
对的,所以我们必须派遣这回到主队列,

1555
01:04:01,971 --> 01:04:03,138
So this is something that,
所以这是,

1556
01:04:03,207 --> 01:04:04,839
will just take some getting used to for
只是需要一些时间来适应吗

1557
01:04:04,907 --> 01:04:06,474
you guys with this multithreading,
你们用这个多线程,

1558
01:04:06,543 --> 01:04:08,910
cuz you're gonna do these things in this other queue,
因为你会做这些事情在这其他队列,

1559
01:04:08,978 --> 01:04:11,479
and you're gonna update your table view, and then
你要更新你的表视图,然后

1560
01:04:11,548 --> 01:04:14,215
it's like what's going on my app is just acting so strange,
就像发生了什么在我的应用程序只是真是奇怪,

1561
01:04:14,283 --> 01:04:15,817
And that's why- because you can do
这就是为什么——因为你可以做

1562
01:04:15,886 --> 01:04:17,151
UI stuff on the main queue,
UI主要队列上的东西,

1563
01:04:17,220 --> 01:04:19,387
And it's not gonna warn you or necessarily crash,
这并不是要警告你或必然崩溃,

1564
01:04:19,455 --> 01:04:22,023
it might eventually crash, it's just gonna act all weird,
它可能最终崩溃,它只是将所有奇怪的行为,

1565
01:04:22,091 --> 01:04:27,161
So, fixed that,
所以,固定,

1566
01:04:27,230 --> 01:04:28,096
This is good,
这很好,

1567
01:04:28,165 --> 01:04:30,064
We've got the table view updating our model and we've
我们有更新我们的模型,我们的表视图

1568
01:04:30,133 --> 01:04:32,333
got the table view knowing about change to the model,
有表格视图了解变化模型,

1569
01:04:32,402 --> 01:04:35,236
So now all we need to do is implement this
现在我们需要做的就是实现这个

1570
01:04:35,305 --> 01:04:38,707
UITableViewDataSource protocol so
所以需要协议

1571
01:04:38,775 --> 01:04:42,077
that it can get the data from us,
它可以从我们获得的数据,

1572
01:04:42,145 --> 01:04:43,044
So let's do it,
让我们来做,

1573
01:04:43,113 --> 01:04:47,849
Number of sections, how many sections are in our table?
数量的部分,我们的表中有多少部分?

1574
01:04:47,918 --> 01:04:49,784
Anyone know?
有人知道吗?

1575
01:04:51,488 --> 01:04:54,488
Yeah,
是的,

1576
01:04:54,557 --> 01:04:57,992
Exactly, candy thrown at you cuz that's exactly right,
没错,糖果扔在你因为这是完全正确的,

1577
01:04:58,061 --> 01:04:59,426
tweets,count,
推特、数

1578
01:04:59,495 --> 01:05:03,464
It's just the number of arrays that we have in our model here
只是数组的数量,我们已经在我们的模型中

1579
01:05:03,533 --> 01:05:07,602
because each of this arrays inside here are a section, so
因为这个数组里面的每一个部分,所以

1580
01:05:07,671 --> 01:05:08,502
perfect,
完美的,

1581
01:05:08,571 --> 01:05:11,106
And then what about this one?
然后这个呢?

1582
01:05:11,174 --> 01:05:15,443
Here we're being asked how many rows are there in tweets
我们被要求在微博有多少行

1583
01:05:15,512 --> 01:05:17,044
subsection?
分段吗?

1584
01:05:17,113 --> 01:05:20,215
That's just count also,
这只是数也,

1585
01:05:21,752 --> 01:05:23,484
So we've designed our data structure so
所以我们设计的数据结构

1586
01:05:23,553 --> 01:05:25,152
that these are super easy to implement,
这些是超级容易实现,

1587
01:05:25,221 --> 01:05:26,888
which I highly recommend if you can do it,
我强烈建议,如果你能做到,

1588
01:05:26,957 --> 01:05:27,788
You can't always do it,
你不能总是这样做,

1589
01:05:27,857 --> 01:05:29,758
But if you can it's nice,
但如果你能很高兴,

1590
01:05:29,826 --> 01:05:32,527
So now a little more difficult, only a little
所以现在更困难,只有一点点

1591
01:05:32,596 --> 01:05:35,596
though, is cellForRowAt index path right here,
不过,cellForRowAt索引路径,

1592
01:05:35,665 --> 01:05:38,666
So here's where we have to return the UITableViewCell
所以在这里我们必须返回UITableViewCell

1593
01:05:38,735 --> 01:05:40,435
that we're gonna use to draw,
我们要用来画画,

1594
01:05:40,504 --> 01:05:44,238
Now, let's go back to our Storyboard here and
现在,让我们回到我们的故事板在这里

1595
01:05:44,307 --> 01:05:48,242
let's just start out with something simple,
让我们从一些简单的开始,

1596
01:05:48,311 --> 01:05:51,579
Let's try using here a subtitle cell,
我们试着用一个副标题细胞,

1597
01:05:51,648 --> 01:05:53,048
So I'm gonna click on this cell,
所以我要点击这个单元格,

1598
01:05:53,116 --> 01:05:55,616
And will change its style from being custom
并将改变其风格定制

1599
01:05:55,685 --> 01:05:56,784
to being subtitle,
副标题,

1600
01:05:56,853 --> 01:05:57,718
So there's title and subtitle,
这是标题和副标题,

1601
01:05:57,787 --> 01:06:00,655
And I'm gonna set the title to be the text with the tweet,
我要将标题设置为文本与推特,

1602
01:06:00,724 --> 01:06:02,089
And I'm gonna set the subtitle
我要设置字幕

1603
01:06:02,158 --> 01:06:03,525
to be the person who tweeted it,
在推特上它的人,

1604
01:06:05,528 --> 01:06:07,895
So let's try that and see how that looks,
让我们试试,看看看,

1605
01:06:07,964 --> 01:06:09,597
So how am I gonna do that?
所以我要怎么做呢?

1606
01:06:09,666 --> 01:06:11,266
Two things I need to do here,
我需要做两件事,

1607
01:06:11,334 --> 01:06:14,001
One is I need to dequeue a reusable cell, and
一个是我需要出列一个可重用的细胞,和

1608
01:06:14,070 --> 01:06:19,407
I to tell iOS which prototype to use,
我告诉iOS使用哪一个原型,

1609
01:06:19,475 --> 01:06:20,742
which prototype in the Storyboard,
在故事板的原型,

1610
01:06:20,810 --> 01:06:23,377
So lets go back to our Storyboard,
我们回到我们的故事板,

1611
01:06:23,446 --> 01:06:24,879
And I only have one prototype,
我只有一个原型,

1612
01:06:24,948 --> 01:06:25,613
It's this one,
这是这一个,

1613
01:06:25,682 --> 01:06:27,048
That's the one I wanna use,
这是一个我想使用,

1614
01:06:27,117 --> 01:06:28,549
So I need to give it an identifier,
所以我需要给它一个标识符,

1615
01:06:28,618 --> 01:06:29,884
I'm gonna call it Tweet,
我要叫它推特,

1616
01:06:29,953 --> 01:06:32,386
because that's what this cell shows,
因为这是这个单元格显示,

1617
01:06:32,455 --> 01:06:33,287
It shows a tweet,
它显示了一个微博,

1618
01:06:33,356 --> 01:06:35,490
Notice that caused my warning to go away,
请注意,导致我的警告消失,

1619
01:06:35,558 --> 01:06:36,957
Because all these prototype cells
因为所有这些原型细胞

1620
01:06:37,026 --> 01:06:38,760
always need an identifier,
总是需要一个标识符,

1621
01:06:38,829 --> 01:06:40,127
And now when I go back here,
现在,当我回到这里的时候,

1622
01:06:40,196 --> 01:06:43,631
I can change this from reuseIdentifier to Tweet,
我可以改变这个从reuseIdentifier到微博,

1623
01:06:43,700 --> 01:06:47,468
Okay, so now, I am able to dequeueReusableCell
好的,现在,我能够dequeueReusableCell

1624
01:06:47,536 --> 01:06:50,071
that will be a copy of that prototype that's subtitled,
那将是一份字幕的原型,

1625
01:06:50,140 --> 01:06:52,741
So all my rows are gonna be subtitle rows,
所以我所有的行要字幕行,

1626
01:06:53,710 --> 01:06:55,076
So now I've got this cell,
现在我有这个细胞,

1627
01:06:55,145 --> 01:06:57,512
it's of type UITableViewCell by the way,
这类型的UITableViewCell顺便说一下,

1628
01:06:57,581 --> 01:06:59,781
since it's a standard type not a custom type,
因为它是一个标准的类型不是一个自定义类型,

1629
01:06:59,849 --> 01:07:00,748
How do I configure it?
我怎么配置?

1630
01:07:00,817 --> 01:07:03,785
Well, for me to configure the cells, to set the title and
嗯,对我来说,配置细胞,设置标题和

1631
01:07:03,853 --> 01:07:05,787
I need to know which Tweet it's asking me for here,
我需要知道哪些推这里问我了,

1632
01:07:05,788 --> 01:07:07,722
the subtitle,
副标题,

1633
01:07:07,791 --> 01:07:09,657
And I know which Tweet it's asking because it's
我知道这微博问,因为它是

1634
01:07:09,726 --> 01:07:11,859
saying cellForRowAt,
说cellForRowAt,

1635
01:07:11,928 --> 01:07:15,897
This is the row that's the tweet that is asking
这是一行的推特问

1636
01:07:15,966 --> 01:07:20,101
me to give it a UITableViewCell for,
我给它一个UITableViewCell,

1637
01:07:20,170 --> 01:07:25,306
So I'm gonna let tweet equal
所以我要让推特相等

1638
01:07:25,374 --> 01:07:32,046
my model sub indexPath,section and
和我的模型子indexPath,部分

1639
01:07:32,115 --> 01:07:35,550
indexPath,row,
indexPath、行

1640
01:07:35,618 --> 01:07:38,352
So I'm just getting this row in this section,
所以我刚刚这一行在本节中,

1641
01:07:38,421 --> 01:07:41,322
this gets the first array, the section,
这第一个数组,部分,

1642
01:07:41,390 --> 01:07:42,790
I'm just getting the row out of it,
我刚刚的行,

1643
01:07:42,858 --> 01:07:46,427
So now I got the tweet, so now I can just update the cell
现在我有了推特,所以现在我可以更新细胞

1644
01:07:46,496 --> 01:07:51,598
really easily, cell,textLabel,
真的很容易,细胞,textLabel,

1645
01:07:51,667 --> 01:07:53,801
It might be an optional ?,text equals,
它可能是一个可选的吗?

1646
01:07:53,870 --> 01:07:56,638
let's have that be the tweet's text,
让我们成为推特的文本,

1647
01:07:56,706 --> 01:08:00,174
This is something that you'll see in here, we go to
这是你会看到在这里,我们去

1648
01:08:00,243 --> 01:08:03,711
the Twitter, and look for the Twitter framework at Tweet,
Twitter,寻找Twitter框架在推特,

1649
01:08:03,779 --> 01:08:07,014
and you'll see that the very first one in fact, is text,
,你就会看到,第一个事实上,是文本,

1650
01:08:07,083 --> 01:08:11,018
And then we'll make this cell detailTextLabel,
然后我们会让这个细胞detailTextLabel,

1651
01:08:11,087 --> 01:08:15,589
its text will be the tweet's user's name, let's say,
它的文本将tweet的用户的名字,比方说,

1652
01:08:15,658 --> 01:08:20,261
So again, Tweet, user, username,
所以,微博、用户、用户名、

1653
01:08:20,329 --> 01:08:24,265
So, that's why I'm getting that information,
所以,这就是为什么我得到这些信息,

1654
01:08:24,334 --> 01:08:25,366
Do you understand that?
你明白吗?

1655
01:08:25,435 --> 01:08:26,934
Part of it, okay?
它的一部分,好吗?

1656
01:08:27,003 --> 01:08:28,736
So, that I'll came out of this Tweet,
所以,我会走出这个微博,

1657
01:08:28,804 --> 01:08:31,272
This is of type Tweet,
这是类型的推特,

1658
01:08:34,944 --> 01:08:35,442
Everybody got that?
大家都明白了吗?

1659
01:08:35,511 --> 01:08:40,014
All right, so is that it?
好了,是吗?

1660
01:08:40,082 --> 01:08:43,684
Do we need to do anything else to hook this thing up and
我们需要钩这个东西和做别的吗

1661
01:08:43,753 --> 01:08:44,552
make it work?
让它工作吗?

1662
01:08:44,621 --> 01:08:46,921
Turns out no,
原来没有,

1663
01:08:46,990 --> 01:08:47,956
So let's just run,
让我们来运行,

1664
01:08:51,561 --> 01:08:53,094
Okay, there it is,
好吧,在这里,

1665
01:08:53,163 --> 01:08:55,362
The world's greatest Twitter client,
世界上最伟大的Twitter客户端,

1666
01:08:55,431 --> 01:08:55,963
Look at that,
看,

1667
01:08:56,032 --> 01:08:56,965
It looks beautiful,
它看起来很漂亮,

1668
01:08:58,201 --> 01:08:58,832
No, of course, in fact,
不,当然,事实上,

1669
01:08:58,901 --> 01:09:01,469
this is the world's ugliest Twitter client right here,
这是世界上最丑的Twitter客户端,

1670
01:09:01,538 --> 01:09:02,470
But it is working,
但这是工作,

1671
01:09:02,539 --> 01:09:03,704
These are tweets,
这些都是微博,

1672
01:09:03,773 --> 01:09:06,073
But anyway, you can see here's the tweets and
但无论如何,你可以看到这里的tweet

1673
01:09:06,142 --> 01:09:09,110
here are the person who tweeted it,
这是在推特上它的人,

1674
01:09:10,446 --> 01:09:13,414
Now obviously, this is awful UI,
现在很明显,这是可怕的UI,

1675
01:09:13,483 --> 01:09:14,648
Just absolutely horrendous UI,
是绝对可怕的UI,

1676
01:09:14,717 --> 01:09:16,918
You would never have a Twitter client like this,
你永远不会有这样的Twitter客户端,

1677
01:09:16,986 --> 01:09:19,954
We want our UI in these cells to look much nicer,
我们希望我们的UI在这些细胞看起来好得多,

1678
01:09:20,023 --> 01:09:22,190
much more customized to a tweet,
更多定制的一条微博,

1679
01:09:22,259 --> 01:09:24,759
So we're gonna go back to our Storyboard here,
所以我们要回到我们这里的故事板,

1680
01:09:24,828 --> 01:09:28,963
And instead of using this awful subtitle style cell,
而不是使用这个可怕的字幕样式细胞,

1681
01:09:29,032 --> 01:09:30,631
we're gonna build a custom cell,
我们将构建一个定制的细胞,

1682
01:09:30,699 --> 01:09:35,236
And this custom cell is gonna have more good looking and
这个定制的细胞会有更多好看

1683
01:09:35,305 --> 01:09:38,672
more of the data that comes with a Tweet,
更多的数据,有一条微博,

1684
01:09:38,741 --> 01:09:39,840
So let's just build it,
让我们建立它,

1685
01:09:39,909 --> 01:09:43,611
Let's go here and make this a little bigger, make some room,
我们走吧,让这大一点,做一些房间,

1686
01:09:43,679 --> 01:09:45,312
All right, I'm gonna grab some labels out of here,
好了,我要抓住一些标签,

1687
01:09:45,381 --> 01:09:47,982
There's a label, this will maybe be,
有一个标签,这也许会,

1688
01:09:48,051 --> 01:09:49,584
let's say this is the Tweeter,
假设这是推特,

1689
01:09:49,653 --> 01:09:51,753
This is the person who's doing the Tweet,
这是做微博的人,

1690
01:09:51,821 --> 01:09:55,089
By the way, this is a case where we're showing user
顺便说一下,这是一个情况我们显示用户

1691
01:09:55,157 --> 01:09:56,190
content really,
内容真的,

1692
01:09:56,259 --> 01:09:57,625
These tweets are content,
这些微博内容,

1693
01:09:57,694 --> 01:09:59,793
They're not like the title of a button or something,
他们不喜欢一个按钮的标题,

1694
01:09:59,862 --> 01:10:03,030
it's actually the content that the user has requested to see,
它实际上是用户请求的内容看,

1695
01:10:03,099 --> 01:10:04,598
So I'm gonna use a font here,
我将使用一个字体,

1696
01:10:04,667 --> 01:10:05,400
You see this font?
你看到这个字体吗?

1697
01:10:05,468 --> 01:10:06,867
I'm not gonna use the system font,
我不会使用这个系统字体,

1698
01:10:06,936 --> 01:10:10,137
I'm going to go down and start using this text styles,
我要下来,开始使用这个文本样式,

1699
01:10:10,206 --> 01:10:12,940
So the Tweeter is going to be at the top,
推特是在顶部,

1700
01:10:13,009 --> 01:10:15,509
I'm gonna have that be a headline font,
我要有标题的字体,

1701
01:10:15,578 --> 01:10:17,378
So this is gonna be the headline font and
这是标题的字体和

1702
01:10:17,447 --> 01:10:20,415
this could change over time, okay, whatever the system
这可能随时间变化,无论系统

1703
01:10:20,483 --> 01:10:23,050
thinks headline font is and it'll be true in every app,
认为标题字体是真的,它会在每一个应用程序,

1704
01:10:23,118 --> 01:10:26,087
The headline will always be using this font in every app
标题总是会使用这种字体在每一个应用程序

1705
01:10:26,156 --> 01:10:28,389
and users could even go into settings and
甚至用户可以进入设置和

1706
01:10:28,458 --> 01:10:30,124
change the size of their fonts,
改变字体的大小,

1707
01:10:30,192 --> 01:10:31,225
If they're like me and
如果他们喜欢我

1708
01:10:31,294 --> 01:10:33,995
they're visions going they can set them bigger,
他们想象他们可以设置更大,

1709
01:10:34,064 --> 01:10:37,332
And the fonts will get bigger automatically so
和字体将自动变大

1710
01:10:37,400 --> 01:10:41,101
ther's big advantage to using these font styles,
其他的一大优势,使用这些字体样式,

1711
01:10:41,170 --> 01:10:42,703
So there's that one,
所以有这个,

1712
01:10:42,772 --> 01:10:45,138
There is the text of the tweet itself, so
微博本身的文本,所以

1713
01:10:45,207 --> 01:10:47,675
we'll just call that text,
我们只是打电话,发短信,

1714
01:10:47,744 --> 01:10:49,310
maybe a good font is body font because this is really, this
也许一个好的字体是身体字体因为这是真的,这一点

1715
01:10:49,311 --> 01:10:50,877
For this one,
为了这一个,

1716
01:10:50,947 --> 01:10:53,281
is the heart of what we're doing here, this body thing,
是我们所做的核心,这个身体的事情,

1717
01:10:53,349 --> 01:10:56,217
One thing that's kinda cool with UILabel, the text
一件事与UILabel有点酷,文本

1718
01:10:56,286 --> 01:10:58,252
in the tweet is probably gonna be multiple lines, and
微博可能会多行,和

1719
01:10:58,320 --> 01:10:59,387
it's gonna wrap,
它会包装,

1720
01:10:59,455 --> 01:11:01,389
When you have a UI label like that,
当你有一个UI这样的标签,

1721
01:11:01,457 --> 01:11:05,760
you wanna set this property lines to be zero,
你想要设置该属性为零,

1722
01:11:05,828 --> 01:11:09,230
If you have zero predefined lines then the UILabel
如果你有0然后UILabel预定义的行

1723
01:11:09,298 --> 01:11:12,199
will be however many lines it needs to be fit
然而将多行需要合适吗

1724
01:11:12,268 --> 01:11:15,136
the information with wrapping,
与包装的信息,

1725
01:11:15,205 --> 01:11:18,473
Whereas this one is line one this all one line,
而这一行一这一行,

1726
01:11:18,541 --> 01:11:22,443
And if it's too long it just gets dot dot dot at the end,
如果它太长就最后点点点,

1727
01:11:22,511 --> 01:11:23,310
all right?
好吧?

1728
01:11:23,379 --> 01:11:24,311
What else do I wanna do here?
我在这里想做什么?

1729
01:11:24,380 --> 01:11:26,547
Let's do another label here for
让我们做另一个标签

1730
01:11:26,616 --> 01:11:30,251
when the tweet was tweeted out, when it was created,
当推了推特,建立之时,

1731
01:11:30,319 --> 01:11:34,321
That one is probably something like a caption, we'll say,
一个可能是类似的标题,我们会说,

1732
01:11:34,390 --> 01:11:36,624
Small little text at the bottom,
小文本在底部,

1733
01:11:36,693 --> 01:11:40,094
We'll go ahead and center than right there,
我们将继续和中心,

1734
01:11:40,163 --> 01:11:41,895
Let's also get an image,
让我们也得到一个图片,

1735
01:11:41,964 --> 01:11:44,131
Let's go down and find the image view down here,
我们走下来,发现下面的图像视图,

1736
01:11:44,200 --> 01:11:44,832
Where is our image view?
我们的图像视图在哪里?

1737
01:11:44,901 --> 01:11:45,666
Here it is,
在这里,

1738
01:11:45,735 --> 01:11:48,202
Drag it out here, This is gonna be the profile
拖出来,这是要这个概要文件

1739
01:11:48,270 --> 01:11:49,970
image of the Tweeter,
推特的形象,

1740
01:11:50,039 --> 01:11:52,607
So whoever tweeted this will have their little image here,
这里谁会发他们的小图片,

1741
01:11:53,676 --> 01:11:54,575
This one, by the way,
这个,顺便说一下,

1742
01:11:54,643 --> 01:11:57,879
I don't know how big profile images are on Twitter,
我不知道大剖面图像在推特上,

1743
01:11:57,947 --> 01:12:00,447
And I don't care because I'm gonna make this thing
我不在乎,因为我要做这件事

1744
01:12:00,516 --> 01:12:02,216
always be a fixed size,
永远是一个固定的大小,

1745
01:12:02,285 --> 01:12:05,419
So how do we make an image like this be a fixed size
那么我们如何让这样的一个图像是一个固定大小的

1746
01:12:05,488 --> 01:12:06,153
using auto layout?
使用自动布局?

1747
01:12:06,221 --> 01:12:09,924
And it turns out what you do is you Ctrl+Drag to itself,
其实你要做的就是按Ctrl +拖,

1748
01:12:09,992 --> 01:12:11,058
And when you do,
当你做什么,

1749
01:12:11,127 --> 01:12:14,662
you'll see that you have the option to fix its width,
你会发现你可以选择修复它的宽度,

1750
01:12:14,731 --> 01:12:17,130
And you can Ctrl+Drag, and fix its height,
你可以按Ctrl +阻力,并修复它的高度,

1751
01:12:17,199 --> 01:12:18,899
You can also to both at the same time,
你也可以在同一时间,

1752
01:12:18,968 --> 01:12:21,402
And, so what width and height has it fixed it to?
,那么它固定宽度和高度了?

1753
01:12:21,470 --> 01:12:23,871
Well, we can look over here in the size inspector,
我们可以看这里尺寸检查器,

1754
01:12:23,940 --> 01:12:25,873
and see that it's fixed it to 71 by 67,
看到它的固定到71年到67年,

1755
01:12:25,941 --> 01:12:30,878
That doesn't sound very computer science-y,
这听上去并不太计算机科学,

1756
01:12:30,947 --> 01:12:34,315
I'm gonna fix it to 64 by 64,
我将修复它到64年到64年,

1757
01:12:34,384 --> 01:12:35,416
So I've made it so
所以我做了

1758
01:12:35,484 --> 01:12:38,352
this image view is always gonna be 64 by 64,
这个图像视图总是会64年到64年,

1759
01:12:38,421 --> 01:12:41,455
I don't care how big the person's actual profile image
我不在乎的人多大的实际轮廓图像

1760
01:12:41,524 --> 01:12:42,690
is, I always want it to be that way,
是,我总是想要这样,

1761
01:12:42,759 --> 01:12:44,592
Okay, so there's another little auto layout
好的,还有一个小自动布局

1762
01:12:44,660 --> 01:12:45,426
tidbit for you,
为你的花絮,

1763
01:12:47,129 --> 01:12:48,512
speaking of auto layouts, I need to lay this stuff out,
说到汽车布局,我需要把这些东西,

1764
01:12:48,513 --> 01:12:49,896
All right, so
好吧,那么

1765
01:12:49,966 --> 01:12:52,700
I kinda want it to look, eh, something like this,
我有点想要看,呃,是这样的,

1766
01:12:52,768 --> 01:12:53,801
See what I mean?
明白我的意思吗?

1767
01:12:53,870 --> 01:12:56,370
Approximately, and so I'm just gonna use stack view,
约,所以我要使用堆栈视图,

1768
01:12:56,439 --> 01:13:01,475
So we'll stack those two things together, like that,
所以我们将这两件事堆在一起,这样,

1769
01:13:01,544 --> 01:13:02,877
Look at our things here, fill and fill,
看看我们这里的东西,填补和充实,

1770
01:13:02,945 --> 01:13:04,845
That's perfectly fine,
这是非常好,

1771
01:13:04,914 --> 01:13:06,580
Let's go over here,
我们去这里,

1772
01:13:06,649 --> 01:13:07,615
Let's stack those together,
让我们堆在一起,

1773
01:13:07,683 --> 01:13:09,783
That's fill and fill,
填补和充实,

1774
01:13:09,852 --> 01:13:12,353
One thing about these two, by the way, they're gonna be
关于这两个,顺便说一下,他们会

1775
01:13:12,421 --> 01:13:16,556
sharing the space in this stack view equally,
共享空间在这个堆栈视图一样,

1776
01:13:16,625 --> 01:13:19,494
But I don't want them sharing equally,
但我不想让他们分享同样的,

1777
01:13:19,562 --> 01:13:24,065
I actually want the text to get more of this space,
我真正想要的文本来获得更多的空间,

1778
01:13:24,133 --> 01:13:26,967
So I'm gonna click on the Tweeter,
所以我要点击推特,

1779
01:13:27,036 --> 01:13:29,069
And I'm gonna go over to this size inspector,
我要去这个尺寸检查器,

1780
01:13:29,138 --> 01:13:30,404
And I'm gonna do something cool,
我要做一些很酷,

1781
01:13:30,473 --> 01:13:32,573
which is set its content hugging priority,
这是拥抱的优先级设置其内容,

1782
01:13:32,641 --> 01:13:35,209
I'm gonna set its vertical content
我要设置它的垂直内容

1783
01:13:35,278 --> 01:13:37,911
hugging priority to be higher than the other one,
拥抱的优先级高于另一个,

1784
01:13:37,980 --> 01:13:38,612
So they're both 251,
所以他们都是251,

1785
01:13:38,681 --> 01:13:41,282
You see, that one's 251, that one's 251,
你看,一个是251,这是251年,

1786
01:13:41,351 --> 01:13:43,083
So I'm gonna set this one to be 300,
所以我要设置为300,

1787
01:13:43,152 --> 01:13:44,451
just anything higher than 251,
任何高于251,

1788
01:13:44,520 --> 01:13:47,454
And that means that when the space is being allocated
这意味着当被分配的空间

1789
01:13:47,523 --> 01:13:48,389
between this tweeter and
这个推特和

1790
01:13:48,458 --> 01:13:52,360
the text, it's gonna hug the tweeter's content,
的文本,它会拥抱推特的内容,

1791
01:13:52,429 --> 01:13:55,229
And the text is gonna get all the rest,
和休息,会得到所有的文本

1792
01:13:55,298 --> 01:13:56,330
So that's a way that you can kinda,
这是一种你可以有点,

1793
01:13:56,399 --> 01:13:59,834
when you're sharing space between two things,
当你两件事情之间共享空间,

1794
01:13:59,902 --> 01:14:03,370
All right, so now let's put these two in a stack,
好了,现在让我们把这些堆栈,一分之二

1795
01:14:03,439 --> 01:14:08,142
Maybe we'll put some spacing here, something like that,
也许我们会放一些间隔,这样,

1796
01:14:08,210 --> 01:14:10,911
Alignment here, top is good, I want them both at the top,
对齐,顶部是好的,我希望他们两个在顶部,

1797
01:14:10,980 --> 01:14:14,148
I think that's good, lined up at the top,
我认为很好,排列在顶部,

1798
01:14:14,217 --> 01:14:17,451
If I like that and fill is fine, I've got this,
如果我喜欢,并填写好,我有这个,

1799
01:14:17,520 --> 01:14:19,119
Now I'm gonna do the same thing we did before,
现在我要做同样的事情,我们之前做的

1800
01:14:19,188 --> 01:14:21,355
which is I'm gonna put this in the corner,
这是我要把这个在角落里,

1801
01:14:21,423 --> 01:14:24,425
And I'm gonna Ctrl drag to the top,
我要Ctrl拖到顶部,

1802
01:14:24,494 --> 01:14:28,028
I'm gonna Ctrl drag to the leading edge,
我要Ctrl拖前缘,

1803
01:14:28,097 --> 01:14:31,098
I'm gonna Ctrl drag to the trailing edge,
我要Ctrl拖后缘,

1804
01:14:31,166 --> 01:14:34,000
And I'm gonna Ctrl drag to the bottom edge,
我要按Ctrl拖动底部边缘,

1805
01:14:34,069 --> 01:14:35,035
So I want that out there,
所以我希望,,

1806
01:14:35,104 --> 01:14:36,136
And again, the same thing,
再一次,同样的事情,

1807
01:14:36,205 --> 01:14:39,640
I'm gonna take this and change it to standard if I can,
我要把这个标准如果我可以改变它,

1808
01:14:39,709 --> 01:14:40,907
I can't, so we'll go 0,
我不能,所以我们就去0,

1809
01:14:40,976 --> 01:14:42,443
And same thing here,
这里也一样,

1810
01:14:43,546 --> 01:14:47,915
Standard if I can, can't, we'll do 0,
标准如果我能不能,我们会做0,

1811
01:14:47,984 --> 01:14:50,551
So I've made this stock view that contains all
所以我做了这个视图包含所有股票

1812
01:14:50,620 --> 01:14:51,819
the stuff fit in there,
适合的东西,

1813
01:14:51,888 --> 01:14:56,123
So I basically done the auto layout necessary to make this
所以我基本上做必要的自动布局

1814
01:14:56,192 --> 01:14:58,759
thing use the space properly,
正确地使用空间,

1815
01:14:58,828 --> 01:15:01,662
And I can still change the size of the cell, all right?
我仍然可以改变细胞的大小,对吧?

1816
01:15:01,730 --> 01:15:04,998
I can click on it and I can make it a little bit smaller
我可以点击它,我可以让它小一点

1817
01:15:05,067 --> 01:15:06,634
and all that stuff is going to, you know,
和所有这些东西,你知道,

1818
01:15:06,703 --> 01:15:08,435
stick to the edges, so that'll be fine,
坚持边,这样会很好,

1819
01:15:08,504 --> 01:15:09,836
Now, this is great,
现在,这是伟大的,

1820
01:15:09,905 --> 01:15:13,240
in fact if we go back to our table view controller and
事实上如果我们回到我们的表格视图控制器

1821
01:15:13,308 --> 01:15:17,110
if I comment out this cell configuration because we don't
如果我这个单元配置,因为我们不发表评论

1822
01:15:17,179 --> 01:15:20,848
have a subtitle so these don't make any sense any more,
有一个副标题这没有任何意义,

1823
01:15:20,917 --> 01:15:24,084
And we run, then we gonna see that our UI hopefully,
然后我们跑,我们会看到,我们的UI希望

1824
01:15:24,153 --> 01:15:26,220
if we didn't forget anything,
如果我们什么都没忘记,

1825
01:15:27,790 --> 01:15:30,791
It's going to look in some ways a little better,
它看起来在某些方面好一点,

1826
01:15:30,860 --> 01:15:32,226
Yeah, so it kinda looks better,
是的,所以它看起来更好,

1827
01:15:32,294 --> 01:15:35,496
Now, the only thing that's not better is we lost our data
现在,这不是更好的唯一的事就是我们失去了我们的数据

1828
01:15:35,565 --> 01:15:38,899
because I commented out the data loading right here,
因为我注释掉数据加载,

1829
01:15:38,968 --> 01:15:41,902
So this is what we want UI to look like basically with
这是我们想要的样子基本上的UI

1830
01:15:41,971 --> 01:15:43,403
an image here and that there,
一个完整,

1831
01:15:43,472 --> 01:15:45,472
But we need to set all this data,
但是我们需要所有这些数据集,

1832
01:15:45,541 --> 01:15:46,406
So how do we that?
那么我们如何?

1833
01:15:46,475 --> 01:15:49,109
Since this is a custom cell over here,
因为这是一个定制的细胞,

1834
01:15:49,178 --> 01:15:51,845
We have to do with a custom subclass
我们要做一个定制的子类

1835
01:15:51,914 --> 01:15:54,215
of this UI table view cell right here,
这个UI的表视图单元格,

1836
01:15:54,283 --> 01:15:55,983
So, I'm gonna create one of those, New File,
所以,我将创建一个新文件,

1837
01:15:56,052 --> 01:16:01,255
Let's go here and New File,
我们去这里,新文件,

1838
01:16:01,323 --> 01:16:03,691
Again, Cocoa Touch Class; this time though,
再次,可可触摸类;这一次,

1839
01:16:03,760 --> 01:16:07,127
it's not a TableViewController it's a TableViewCell,
TableViewCell,它不是一个表

1840
01:16:07,196 --> 01:16:09,029
I'm gonna call it TweetTableViewCell cuz
我要叫它TweetTableViewCell因为

1841
01:16:09,098 --> 01:16:10,998
it shows the tweet,
它显示了微博,

1842
01:16:11,066 --> 01:16:15,002
put in the same place as all the rest of my stuff there,
放在同一个地方我所有剩下的东西,

1843
01:16:15,070 --> 01:16:17,772
Here's my table table view cell, it gives me awakeFromNib
这是我的表的表视图单元,它给了我awakeFromNib

1844
01:16:17,840 --> 01:16:20,340
which is kinda nice but I don't need it and setSelected
挺不错,但我不需要,setSelected吗

1845
01:16:20,409 --> 01:16:22,843
I don't do anything special when my table view cell is
我不做任何特殊的当我的表视图单元格

1846
01:16:22,911 --> 01:16:25,413
selected but I could, I could draw a blue background or
选择但我可以,我可以画一个蓝色的背景或

1847
01:16:25,481 --> 01:16:28,549
something like that if I wanted, but I don't,
类似的,如果我想要,但我不,

1848
01:16:28,618 --> 01:16:30,750
So, I have this TableViewCell subclass,
所以,我有这个TableViewCell子类,

1849
01:16:30,819 --> 01:16:32,586
I'm gonna go back to my Storyboard and
我要回到我的故事板

1850
01:16:32,654 --> 01:16:35,322
make sure that I set the identity,
确保我的身份,

1851
01:16:35,391 --> 01:16:37,124
don't forget this step,
别忘了这一步,

1852
01:16:37,192 --> 01:16:40,294
Set the identity to be a TweetTableViewCell,
设置身份TweetTableViewCell,

1853
01:16:40,363 --> 01:16:41,361
If you forget this step,
如果你忘了这一步,

1854
01:16:41,430 --> 01:16:43,464
you won't be able to do any outlets or anything like that,
你不能做任何媒体或类似的东西,

1855
01:16:45,201 --> 01:16:48,269
Now, I wanna wire outlets up to this new class I
现在,我想线媒体这个新类

1856
01:16:48,337 --> 01:16:50,471
just created, so I need to get them both on screen,
刚刚创建的,所以我需要让他们两个在屏幕上,

1857
01:16:50,539 --> 01:16:52,373
I'll show you kind of a cool way to do that,
我将向您展示一种很酷的方式,

1858
01:16:52,442 --> 01:16:54,408
Let's get the assistant editor up here,
让我们的助理编辑,

1859
01:16:54,477 --> 01:16:56,377
remember I could do manual, blah, blah, blah,
记得我可以做手册,等等,等等,

1860
01:16:56,445 --> 01:16:59,680
but another way is to hold down the option key, and
但另一种方法是按住option键,和

1861
01:16:59,748 --> 01:17:02,249
just click on the thing that you want to be on the right,
点击你想要的东西在右边,

1862
01:17:02,318 --> 01:17:04,852
I think I showed this before, but option
我认为我给这个,但选项

1863
01:17:04,921 --> 01:17:08,956
clicking in the navigator will put that thing on the right,
点击在右边的导航器将那件事,

1864
01:17:09,024 --> 01:17:13,093
All right so let's move this over more, some space there,
好吧让我们移动这个多,一些空间,

1865
01:17:13,162 --> 01:17:15,196
All right, so I need to wire up outlets to these four
好了,所以我需要这四个连接插座

1866
01:17:15,264 --> 01:17:17,164
things, right, the tweet or the text or the image,
事情,推特或文本或图像,

1867
01:17:17,232 --> 01:17:18,465
So let's just do that,
让我们来做,

1868
01:17:18,534 --> 01:17:19,800
We'll go here, Ctrl+drag,
我们就去这里,Ctrl +拖,

1869
01:17:19,869 --> 01:17:24,437
screen out, I'll call this my tweet, what did I call this,
屏幕,我称之为我的推特,我称之为什么了,

1870
01:17:24,506 --> 01:17:30,177
my tweetProfileImageView,
我的tweetProfileImageView,

1871
01:17:30,246 --> 01:17:32,279
Cuz it's gonna be a UIImageView that shows
因为它会UIImageView显示

1872
01:17:32,347 --> 01:17:34,915
the Tweeter's profile,
推特的形象,

1873
01:17:34,984 --> 01:17:38,419
Let's do the little create down here,
下面让我们做小创造,

1874
01:17:38,487 --> 01:17:41,021
Ctrl+Drag, from that,
Ctrl +拖,,

1875
01:17:41,089 --> 01:17:43,924
We'll call that tweetCreatedLabel,
我们称之为tweetCreatedLabel,

1876
01:17:43,993 --> 01:17:46,693
To label it,
标签,

1877
01:17:46,762 --> 01:17:50,497
Shows when it was created; let's do out little tweeter
显示创建的时候,让我们做小的推特

1878
01:17:50,566 --> 01:17:55,269
right here and we call that our tweetUserLabel,
在这里,我们称之为tweetUserLabel

1879
01:17:55,338 --> 01:17:57,871
this is gonna show the label of the tweet
这是要给微博的标签

1880
01:17:57,940 --> 01:18:00,540
user and then we have the text right here that's gonna show
用户然后我们有在这里会显示的文本

1881
01:18:00,609 --> 01:18:02,943
the actual tweetText, tweetTextLabel,
实际tweetText tweetTextLabel,

1882
01:18:06,649 --> 01:18:09,950
So I've got these nice little outlets right here,
所以我有这些漂亮的小网点,

1883
01:18:10,018 --> 01:18:12,620
Now of course I need to be able to set these outlets with
当然我需要能够设置这些网点

1884
01:18:12,688 --> 01:18:16,323
something and here's where I need public API in my
的东西,在这里我需要在我的公共API

1885
01:18:16,392 --> 01:18:19,994
table view cell, that gives me the data I need to do that,
给我数据的表视图单元格,我需要这样做,

1886
01:18:20,062 --> 01:18:23,898
And I'm just going to have my public API be tweet,
和我要我的公共API是推特,

1887
01:18:23,966 --> 01:18:27,400
give me the Twitter,Tweet that you want and
给我推特,推特,你想

1888
01:18:27,469 --> 01:18:29,170
I'll load these babies up,
我将加载这些婴儿,

1889
01:18:30,139 --> 01:18:30,971
That's what it's saying here,
这是说,

1890
01:18:31,040 --> 01:18:33,541
Of course we need to import Twitter,
当然我们需要导入Twitter,

1891
01:18:34,676 --> 01:18:37,144
Cuz we're using it in this class,
因为我们在课上使用它,

1892
01:18:37,212 --> 01:18:40,781
And when you set this Tweet I'm just going to on didSet,
当你设置这个微博我要didSet,

1893
01:18:40,849 --> 01:18:43,150
Update my UI just like I was a controller but
更新我的用户界面就像我是一个控制器

1894
01:18:43,218 --> 01:18:46,120
I'm not, I'm not a controller, I'm a view actually,
我不是,我不是一个控制器,实际上我是一个视图,

1895
01:18:46,188 --> 01:18:49,723
It's the only time a view can have these outlets,
这是唯一一次一个视图可以有这些媒体,

1896
01:18:49,792 --> 01:18:54,095
So I need some private func to do that updateUI,
所以我需要一些私人func updateUI,

1897
01:18:56,565 --> 01:19:00,000
Now, time is running a little bit short here, so
现在,时间有点短,所以

1898
01:19:00,069 --> 01:19:02,569
I'm just going to type this in real quick
我要在快速类型

1899
01:19:02,638 --> 01:19:04,571
I believe I have tweet cell,
我相信我有推特细胞,

1900
01:19:04,640 --> 01:19:05,506
There it is, okay?
在这里,好吗?

1901
01:19:06,976 --> 01:19:07,875
But you can look at this later,
但是你可以看看这个之后,

1902
01:19:07,944 --> 01:19:10,343
But I'm just basically setting all the outlets here,
但我基本上设置这里所有的媒体,

1903
01:19:10,412 --> 01:19:13,013
See how I'm just setting these outlets like setting the tweet
看到我只是设置微博这样的设置这些媒体

1904
01:19:13,082 --> 01:19:15,282
label, text to be the tweet's text,
推特的文本标签、文本,

1905
01:19:15,350 --> 01:19:18,252
setting the user label to be the user description,
设置用户标签用户描述,

1906
01:19:18,321 --> 01:19:20,521
Notice by the way I'm blocking the main thread here,
顺便通知我阻塞主线程,

1907
01:19:22,558 --> 01:19:25,458
If this was my homework, bam I just got dinged,
如果这是我的作业,我刚升到的bam,

1908
01:19:25,527 --> 01:19:27,361
So make sure you fix this, okay?
所以一定要解决这个问题,好吗?

1909
01:19:27,429 --> 01:19:30,497
If you're gonna use my code in any way in your homework,
如果你要在你的作业中使用我的代码以任何方式,

1910
01:19:30,566 --> 01:19:31,865
which you probably want to,
你可能会想,

1911
01:19:31,933 --> 01:19:34,434
then you're gonna wanna fix this,
然后你要想解决这个问题,

1912
01:19:34,503 --> 01:19:35,669
Don't do this on the main thread,
在主线程不这样做,

1913
01:19:35,738 --> 01:19:36,904
Don't block the main thread,
不要阻塞主线程,

1914
01:19:36,972 --> 01:19:39,173
But, does anyone understand what updateUI is doing here?
但是,有人理解updateUI是什么做的吗?

1915
01:19:39,242 --> 01:19:41,041
It's just taking this Tweet that I was giving,
它只是把这个微博,我是给予,

1916
01:19:41,110 --> 01:19:42,742
and loading this up,
和加载,

1917
01:19:42,811 --> 01:19:44,544
And this is happening over and over for
这是反复发生

1918
01:19:44,613 --> 01:19:47,681
every row in the table that gets displayed,
显示表中的每一行,

1919
01:19:47,750 --> 01:19:50,550
This is happening, the copy of this class has been made and
这正在发生,这个类已经和副本

1920
01:19:50,619 --> 01:19:51,852
this is happening,
这正在发生,

1921
01:19:51,921 --> 01:19:53,720
Now, how do we set this?
现在,我们如何设置?

1922
01:19:53,789 --> 01:19:58,692
We set this back over here and our TweetTableViewController,
我们在这里设回TweetTableViewController,

1923
01:19:58,761 --> 01:20:02,429
In the same place that we configured the cell here for
在同一个地方,我们配置了细胞在这里

1924
01:20:02,498 --> 01:20:04,197
the subtitle one,
副标题,

1925
01:20:04,266 --> 01:20:07,000
And in fact, I still need the tweet, but I don't need that,
事实上,我仍然需要推特,但我不需要,

1926
01:20:07,069 --> 01:20:08,368
I'll leave those there, so
我将离开这些,所以

1927
01:20:08,437 --> 01:20:10,804
you can remember that code when you look at it later,
你可以记住代码当你看它之后,

1928
01:20:10,873 --> 01:20:13,807
But instead of setting those things, I just want
而设置的这些东西,我只是希望

1929
01:20:13,875 --> 01:20:17,277
to set that tweet, I wanna set this var right here,
设置微博,我想这里的var,

1930
01:20:17,346 --> 01:20:19,046
But for me to set the var right here,
但对我来说设置var在这里,

1931
01:20:19,115 --> 01:20:21,281
I need to get my table view to be one of these,
我需要让我的表视图是其中一个,

1932
01:20:21,350 --> 01:20:22,349
So, I need to use an as,
所以,我需要使用一个,

1933
01:20:22,418 --> 01:20:24,484
So, I'm gonna say,
所以,我想说,

1934
01:20:24,553 --> 01:20:28,655
if I can let the tweetCell equal the cell,
如果我能让tweetCell等于细胞,

1935
01:20:28,724 --> 01:20:34,494
this reusable cell that I got, as a TweetTableViewCell,
这是我得到的可重用的细胞,作为TweetTableViewCell,

1936
01:20:34,563 --> 01:20:39,600
then, I can say, cell set your tweet to be my tweet,
然后,我可以说,细胞设置你的微博我的微博,

1937
01:20:39,669 --> 01:20:44,605
That goes in this row, section, and row,
进入这一行,部分,行,

1938
01:20:44,674 --> 01:20:51,578
Now, we set the, what, sorry, tweetCell,tweet,
现在,我们设置了,,对不起,tweetCell,推特,

1939
01:20:51,646 --> 01:20:55,215
We set the class of these, of this prototype right here,
我们设置的类,这个原型,

1940
01:20:55,284 --> 01:20:57,484
the prototype for this cell,
这个细胞的原型,

1941
01:20:57,553 --> 01:20:59,018
We set it with the identity
我们把它与身份

1942
01:20:59,087 --> 01:21:01,722
inspector to be a TweetTableViewCell,
检查员TweetTableViewCell,

1943
01:21:01,790 --> 01:21:03,790
So, when we come in here, it will, in fact,
所以,当我们在这里,,事实上,

1944
01:21:03,859 --> 01:21:05,425
this as will work,
这是工作,

1945
01:21:05,494 --> 01:21:08,161
Okay, it will be a TweetTableViewCell cuz we said
好的,这将是一个TweetTableViewCell因为我们说

1946
01:21:08,230 --> 01:21:11,532
that in the Storyboard, so, it created that kind of thing,
在故事板,所以,它创造了这样的事情,

1947
01:21:11,600 --> 01:21:12,198
all right?
好吧?

1948
01:21:12,267 --> 01:21:13,634
So, let see if this works,
让我们看看这工作,

1949
01:21:18,474 --> 01:21:19,806
Okay, it is working,
好吧,这是工作,

1950
01:21:19,875 --> 01:21:22,743
Look, we've got the time the person tweeted this,
看,我们有时间发的人,

1951
01:21:22,812 --> 01:21:24,711
it's got the person who tweeted it,
有推特的人,

1952
01:21:24,780 --> 01:21:28,682
it's got the text of the tweeting, but we get no image,
它有推特的文本,但我们没有图片,

1953
01:21:28,751 --> 01:21:32,152
Why didn't we get people's images here?
为什么没有得到人们的图片吗?

1954
01:21:32,221 --> 01:21:33,520
Okay, why do you think we didn't get these,
好吧,你为什么认为我们没有得到这些,

1955
01:21:33,589 --> 01:21:35,222
these images?
这些图片吗?

1956
01:21:35,291 --> 01:21:37,657
Well, let's go look at our console,
好吧,让我们去看看我们的控制台,

1957
01:21:37,726 --> 01:21:39,058
What does it say?
它说什么了?

1958
01:21:39,127 --> 01:21:39,626
No!
不!

1959
01:21:39,695 --> 01:21:41,428
App Transport Security,
应用交通安全,

1960
01:21:41,496 --> 01:21:43,597
You recognize that from last time?
从上次你意识到吗?

1961
01:21:43,665 --> 01:21:47,601
It's because these profiles are http something not
这是因为这些概要文件的http

1962
01:21:47,669 --> 01:21:49,102
https something,
https的东西,

1963
01:21:49,171 --> 01:21:50,371
So, we know how to fix that,
因此,我们知道如何解决这个问题,

1964
01:21:50,439 --> 01:21:53,240
We'll just go back to Info,plist right here,
我们就回信息,这里的plist,

1965
01:21:53,309 --> 01:21:56,877
And add a row for App Transport Security,
应用交通安全添加一行,

1966
01:21:56,946 --> 01:22:01,348
We'll open that up, we'll add Arbitrary Loads here,
我们将敞开大门,我们将添加任意加载,

1967
01:22:01,416 --> 01:22:05,619
we'll make that be, yes, we allow arbitrary loads,
我们将是,是的,我们允许任意加载,

1968
01:22:05,688 --> 01:22:07,086
There's another problem here though,
不过,这里还有一个问题

1969
01:22:07,155 --> 01:22:08,422
Look at all these tweets,
看看这些微博,

1970
01:22:08,490 --> 01:22:11,157
Look how they're cut off, you see?
看他们是如何切断,你看到了吗?

1971
01:22:11,226 --> 01:22:14,928
Every row is the same size and it's not big enough for
每一行是相同的大小和它不是足够大

1972
01:22:14,997 --> 01:22:15,729
most of the tweets,
大多数的微博,

1973
01:22:15,798 --> 01:22:17,831
It's just dot, dot, dot, dot, dot, dot,
它只是点,点,点,点,点,点,

1974
01:22:17,900 --> 01:22:20,801
Wouldn't it be cool if these rows could be different sizes
不是很酷,如果这些行可以大小不同

1975
01:22:20,869 --> 01:22:22,969
depending on how big the tweet is?
根据推特是多大?

1976
01:22:23,038 --> 01:22:24,604
Well, of course we can do that,
当然我们能做到这一点,

1977
01:22:24,673 --> 01:22:25,672
Let's do it,
让我们做它,

1978
01:22:25,740 --> 01:22:28,508
Let's go see how this size is being said right now,
让我们去看看这个尺寸现在被说,

1979
01:22:28,577 --> 01:22:31,411
Right now, it's being said, if we go and
现在,它是说,如果我们去

1980
01:22:31,480 --> 01:22:34,782
inspect this cell in its size inspector, look,
检查这个细胞的尺寸检查器,看,

1981
01:22:34,850 --> 01:22:38,552
the row height is 96, so, every single row is 96,
行高度为96,所以,每一行是96,

1982
01:22:38,620 --> 01:22:43,156
What we wanna do is in our viewDidLoad right here,
我们要做的是在我们viewDidLoad在这里,

1983
01:22:43,225 --> 01:22:47,827
we wanna say that our tableView's row height is not
我们想说,我们的表视图的行高

1984
01:22:47,896 --> 01:22:52,432
96, it's UITableViewAutomaticDimension,
96年,UITableViewAutomaticDimension,

1985
01:22:52,501 --> 01:22:55,869
But as I said before, we also want to give it a little help
但正如我之前所说的,我们也想给它一点帮助

1986
01:22:55,938 --> 01:22:59,439
by setting its estimated row height to something,
通过设置其估计的行高,

1987
01:22:59,508 --> 01:23:00,073
And I'll tell you what,
我会告诉你,

1988
01:23:00,142 --> 01:23:01,841
let's set it to what's in the Storyboard,
让我们把它在故事板中,

1989
01:23:01,910 --> 01:23:04,811
tableView,rowHeight, okay?
tableView rowHeight,好吗?

1990
01:23:04,880 --> 01:23:06,879
So, I'm getting the rowHeight out of the Storyboard,
所以,我得到了rowHeight故事板的,

1991
01:23:06,948 --> 01:23:08,114
using it as the estimate,
使用它作为估计,

1992
01:23:08,183 --> 01:23:09,049
And then, I'm resetting
然后,我重置

1993
01:23:09,117 --> 01:23:10,918
the rowHeight to be the AutomaticDimension,
的rowHeight AutomaticDimension,

1994
01:23:17,727 --> 01:23:19,059
And sure enough, see, look,
果然,看,看,

1995
01:23:19,128 --> 01:23:20,928
this tall tweet is getting extra space and
这个高推获得额外的空间

1996
01:23:20,996 --> 01:23:23,530
some of the smaller tweets, I don't know if we have any,
一些规模较小的微博,我不知道我们有什么,

1997
01:23:23,599 --> 01:23:25,766
you can probably see it if we go like this,
你可以看到它如果我们像这样,

1998
01:23:25,835 --> 01:23:30,370
The smaller tweets get less space, okay?
较小的微博让更少的空间,好吗?

1999
01:23:30,438 --> 01:23:31,838
So, that's good,
所以,这很好,

2000
01:23:31,907 --> 01:23:35,275
We're out of time, so, if you have to go, feel free,
我们没时间了,所以,如果你有去,感觉自由,

2001
01:23:35,344 --> 01:23:38,077
The last thing I'm gonna do here in a little over time is
我要做的最后一件事就是在多一点时间

2002
01:23:38,146 --> 01:23:40,580
add a text field at the top that lets us type in what
添加一个文本字段中,让我们在什么类型

2003
01:23:40,649 --> 01:23:43,750
we wanna search for instead of always looking for Stanford,
我们想要寻找,而不是一直在寻找斯坦福大学,

2004
01:23:43,819 --> 01:23:46,420
So, we're gonna get Stanford out of there, okay?
我们会得到斯坦福出来,好吗?

2005
01:23:46,488 --> 01:23:47,387
So, how do we do that?
那么,我们如何做呢?

2006
01:23:47,455 --> 01:23:48,254
It's real easy,
这是真正的简单,

2007
01:23:48,323 --> 01:23:49,656
We have, if you remember,
如果你还记得,

2008
01:23:49,725 --> 01:23:52,225
the table view, it's got this little header view at the top,
表视图,它有这个小标题视图在顶部,

2009
01:23:52,294 --> 01:23:54,527
So, I'm just gonna take a UITextField,
所以,我只是需要一个UITextField,

2010
01:23:54,596 --> 01:23:56,396
Remember this editable text field we learned about in
记住我们学过的可编辑的文本字段

2011
01:23:56,465 --> 01:23:57,130
the last lecture?
上节课吗?

2012
01:23:57,199 --> 01:23:58,665
And I'm gonna put it on the top,
我要把它放在顶部,

2013
01:23:58,734 --> 01:24:01,601
It's a little hard, sometimes, to see where it's going,
这有点困难,有时候,看到它,

2014
01:24:01,670 --> 01:24:04,237
but when it looks like this, the width of the table, then,
但当它是这样的,桌子的宽度,然后,

2015
01:24:04,306 --> 01:24:06,139
you've got it, it's dropping it in there,
你得到了它,把它,

2016
01:24:06,208 --> 01:24:08,742
It's also a little hard to select and click on,
这也是一个很难选择和点击,

2017
01:24:08,811 --> 01:24:11,444
So, you're gonna wanna use that Ctrl + Shift + Click,
所以,你要想用Ctrl + Shift +点击,

2018
01:24:11,513 --> 01:24:13,713
And that way, you can pick either the controller, or
这样,你可以选择控制器,或

2019
01:24:13,782 --> 01:24:16,449
the table view, or in this case, the text field,
表视图,或在这种情况下,文本字段,

2020
01:24:16,518 --> 01:24:18,318
I'm gonna inspect it and change it a little bit,
我将检查它,改变它,

2021
01:24:18,387 --> 01:24:21,221
I'm just gonna make the font a little bit bigger,
我要让字体大一点,

2022
01:24:21,290 --> 01:24:22,255
we'll say 22,
我们会说22日

2023
01:24:22,324 --> 01:24:24,991
Now, notice I can also set all those text field things I was
现在,请注意我也可以设置所有这些文本字段

2024
01:24:25,060 --> 01:24:25,792
talking about,
说什么,

2025
01:24:25,861 --> 01:24:27,694
Like, I don't want it auto-correcting,
我不想让它自动更正,

2026
01:24:27,763 --> 01:24:30,931
I don't wanna say, search for hashtag SuperBowl and
我不想说,搜索标签超级碗

2027
01:24:31,000 --> 01:24:33,734
change it hashtag SuperSpaceBowl, okay?
改变标签SuperSpaceBowl,好吗?

2028
01:24:33,803 --> 01:24:35,435
So, I don't want any correction going on,
所以,我不希望任何校正,

2029
01:24:35,504 --> 01:24:36,803
Keyboard type, ooh, look,
键盘类型:哦,看,

2030
01:24:36,872 --> 01:24:38,405
there's a Twitter keyboard type,
有一个Twitter键盘类型,

2031
01:24:38,473 --> 01:24:41,275
It's probably got # and @ sign, things like that,
它可能有#和@符号,类似这样的事情,

2032
01:24:41,343 --> 01:24:42,175
The return key,
返回键,

2033
01:24:42,244 --> 01:24:44,978
that's just the key on the things says return,
这是关键的事情上说,

2034
01:24:45,047 --> 01:24:47,213
I'm searching here, so, I wanted to say search,
我在这里搜索,所以,我想说搜索,

2035
01:24:47,282 --> 01:24:50,517
So, that means the return keys gonna say, I'd search,
所以,这意味着返回键会说,我搜索,

2036
01:24:50,586 --> 01:24:52,753
Also, a little clear button would be cool,
一个清晰的按钮很酷,

2037
01:24:52,821 --> 01:24:55,455
button you can press the clear out what's going on,
按钮可以按下清除发生了什么,

2038
01:24:55,524 --> 01:24:58,524
So, you can kinda configure this in any way you want
所以,你可以配置在任何你想要的方式

2039
01:24:58,593 --> 01:24:59,859
to make it work in there,
让它在那里工作,

2040
01:24:59,928 --> 01:25:03,163
Now, normally I would run this and show you that it's there,
现在,我通常会运行这个和证明它的存在,

2041
01:25:03,231 --> 01:25:04,598
let's wire it up first, so, it actually does something,
我们先连接起来,因此,它实际上是什么,

2042
01:25:04,599 --> 01:25:05,966
but of course,
当然,

2043
01:25:06,034 --> 01:25:08,068
It's real easy to wire up a text field if you just
这是真的容易连接如果你只是一个文本字段

2044
01:25:08,136 --> 01:25:11,070
wanna hook it up to an outlet and set its delegate, and
要连接到一个出口并设置其委托,和

2045
01:25:11,139 --> 01:25:13,440
then, you can find out when the return key is pressed,
然后,您可以找到返回键被按下时,

2046
01:25:13,509 --> 01:25:14,808
So, let's do that,
所以,让我们这样做,

2047
01:25:14,876 --> 01:25:17,677
We'll go here, let's get our TweetTableViewController on
我们将在这里,让我们得到TweetTableViewController

2048
01:25:17,746 --> 01:25:18,846
screen at the same time,
与此同时,屏幕

2049
01:25:18,914 --> 01:25:21,081
We just wanna create an outlet to that thing,
我们想创建一个出口的事情,

2050
01:25:21,150 --> 01:25:23,182
I'll put it, right in here,
我把它,就在这里,

2051
01:25:23,251 --> 01:25:24,384
So, I'm just,
所以,我只是

2052
01:25:24,452 --> 01:25:28,588
again, I will probably wanna Shift + Click to select it,
再一次,我可能会想Shift +单击以选中它,

2053
01:25:28,657 --> 01:25:30,190
I, oops, picked the wrong one,
哦,我选错了,

2054
01:25:31,960 --> 01:25:34,828
So, let's Shift + Click, click this, select this,
让我们Shift +单击,单击,选择这个,

2055
01:25:34,896 --> 01:25:39,433
and Ctrl + Drag from it, and see it's a UITextField, and
和Ctrl +拖动它,看到它是一个UITextField,和

2056
01:25:39,502 --> 01:25:41,969
I'm gonna call this my searchTextField,
我要叫它searchTextField,

2057
01:25:43,138 --> 01:25:43,904
Simple as that,
简单,

2058
01:25:43,972 --> 01:25:49,742
When it's set, I'm going to set myself as its delegates,
集的时候,我要自己设置为代表,

2059
01:25:49,811 --> 01:25:53,814
searchTextField,delegate = self,
searchTextField委托=自我,

2060
01:25:53,882 --> 01:25:58,051
Of course, for me to be its delegate, I have to go
当然,对我来说它的委托,我得走了

2061
01:25:58,120 --> 01:26:02,422
up here and say yes, I am a UITextFieldDelegate,
上面说,是的,我是UITextFieldDelegate,

2062
01:26:02,490 --> 01:26:05,225
Okay, they're all the methods are optional in there, so,
好吧,它们都是可选的方法,所以,

2063
01:26:05,293 --> 01:26:08,294
I have now successfully implemented that protocol,
我已经成功地实现了协议,

2064
01:26:08,363 --> 01:26:11,298
Ooh, what happened here?
哦,发生了什么?

2065
01:26:11,367 --> 01:26:14,434
Yes, okay, so that's so I've set the delegate,
是的,好吧,这就是我设置委托,

2066
01:26:14,503 --> 01:26:16,870
Now, I'm gonna implement the delegate method I want,
现在,我要实现我想要的委托方法,

2067
01:26:16,939 --> 01:26:18,204
which is that should return,
应该返回,

2068
01:26:18,273 --> 01:26:20,440
It get sent to me when the return button is sent,
它给我发送返回按钮时,

2069
01:26:20,508 --> 01:26:21,708
So that is textField,
这是文本框,

2070
01:26:21,777 --> 01:26:24,244
notice as I type textField it shows me them all,
注意到当我类型文本框它向我展示了他们所有人,

2071
01:26:24,313 --> 01:26:27,381
and it is this one right here textFieldShouldReturn,
这个textFieldShouldReturn,

2072
01:26:27,449 --> 01:26:30,617
Let me make this bigger, bigger so
让我把这个更大,更大的

2073
01:26:30,685 --> 01:26:32,719
you can see it better,
你可以看到它更好,

2074
01:26:32,788 --> 01:26:34,254
Okay, so here should return,
好吧,这里应该返回,

2075
01:26:34,323 --> 01:26:36,756
If I get return, I'm actually gonna check to make
如果我得到回报,我要检查

2076
01:26:36,825 --> 01:26:39,259
sure I'm getting this from my searchTextField,
从我的searchTextField确定我得到这个,

2077
01:26:39,328 --> 01:26:42,128
because someday I might have other text fields and I wanna
因为有一天我可能会有其他的文本字段,我想

2078
01:26:42,197 --> 01:26:45,265
make sure I'm getting, I know which one I'm talking about,
确保我得到,我知道我说的是哪一个,

2079
01:26:45,333 --> 01:26:47,066
So textField is this argument right here, and
文本框是这个论点,

2080
01:26:47,135 --> 01:26:48,969
I'm just checking to make sure it's me,
我只是检查,以确保它是我,

2081
01:26:49,038 --> 01:26:53,173
And if that is true then I'm just gonna set my
如果这是真的,那么我就会把我

2082
01:26:53,242 --> 01:26:58,678
searchText = searchTextFields,text, okay?
searchText = searchTextFields文本?

2083
01:26:58,747 --> 01:27:00,480
Makes sense and when I set my searchText,
是有意义的,当我把searchText,

2084
01:27:00,549 --> 01:27:03,683
that's immediately going to start it going,
马上要启动它,

2085
01:27:03,752 --> 01:27:05,919
Notice that ShouldReturn also returns a Bool which is
也注意到ShouldReturn返回一个布尔值

2086
01:27:05,988 --> 01:27:08,988
whether to do what it normally does when return is pressed,
是否要做什么它通常按下返回时,

2087
01:27:09,057 --> 01:27:10,189
Which in this case is nothing,
在这种情况下,是什么,

2088
01:27:10,258 --> 01:27:11,691
cuz we don't have any target action or
因为我们没有任何行动或目标

2089
01:27:11,760 --> 01:27:13,326
anything else, but we'll return true,
别的,但我们会返回true,

2090
01:27:13,395 --> 01:27:15,996
Sure do what you normally do, now the only other thing
确定做你通常做的事情,现在唯一的另一件事

2091
01:27:16,064 --> 01:27:18,331
here is now that we have the searchTextField,
这是现在我们已经searchTextField,

2092
01:27:18,400 --> 01:27:20,433
up here when we set our searchText,
当我们设置searchText,

2093
01:27:20,502 --> 01:27:23,003
We wanna update our searchTextField,
我们想要更新searchTextField,

2094
01:27:25,374 --> 01:27:28,541
And I'll be careful here in case I'm doing it in prepare,
我会小心,以防我在准备,

2095
01:27:28,610 --> 01:27:31,711
We'll set it to the searchText that we just set it to,
我们将它设置为searchText,我们只是把它

2096
01:27:31,780 --> 01:27:33,913
Also I'm going to have my searchTextField
我要还我的searchTextField

2097
01:27:33,982 --> 01:27:37,049
resignFirstResponder here,
resignFirstResponder这里,

2098
01:27:37,118 --> 01:27:40,453
That's if somebody types something and hits go search,
如果有人的类型,点击搜索,

2099
01:27:40,522 --> 01:27:42,488
and we search for something and put it in there,
我们寻找的东西,把它放在那里,

2100
01:27:42,557 --> 01:27:43,923
I'm gonna take the keyboard away,
我要拿走键盘,

2101
01:27:43,992 --> 01:27:45,658
Cuz I just don't wanna have the keyboard blocking
因为我不想有键盘挡住

2102
01:27:45,727 --> 01:27:47,427
the results that they just asked for,
他们只是要求的结果,

2103
01:27:47,496 --> 01:27:48,761
And also someone sets it in code,
也有人在代码中设置了它,

2104
01:27:48,830 --> 01:27:50,397
I'm gonna get rid of keyboard,
我要摆脱键盘,

2105
01:27:50,465 --> 01:27:51,798
Someone might be in the middle of typing but
有人可能在打字但

2106
01:27:51,867 --> 01:27:53,400
if someone sets it in code rather than typing,
如果有人在代码中设置了它而不是打字,

2107
01:27:53,468 --> 01:27:56,769
Let's get that keyboard out of the way, all right?
让我们键盘的,对吧?

2108
01:27:56,838 --> 01:27:57,537
So let's go do that,
让我们去做,

2109
01:27:59,274 --> 01:28:01,642
Leave this code on the screen so you can see it,
离开这段代码在屏幕上你可以看到它,

2110
01:28:07,616 --> 01:28:11,451
All right, so here is our text field, it's kinda of hard to
好的,这里是我们的文本字段,它有点难

2111
01:28:11,520 --> 01:28:14,888
see under this carrier, we'll fix that in a second,
看到在这个载体,我们会解决这个问题,

2112
01:28:14,957 --> 01:28:17,224
Let's go and search for #stanford again,
让我们去寻找#斯坦福大学,

2113
01:28:17,293 --> 01:28:19,526
Oops, I'm not gonna do this, watch this,
哦,我不会这样做,看这个,

2114
01:28:19,595 --> 01:28:21,194
Okay that looked easy to type, didn't it?
好吧,看起来容易类型,不是吗?

2115
01:28:21,262 --> 01:28:22,729
Well let's go here and
我们去这里

2116
01:28:22,797 --> 01:28:28,301
say Keyboard, turn off the hardware keyboard,
说键盘,关闭硬件键盘,

2117
01:28:28,370 --> 01:28:29,635
Now when we click in here,
现在,当我们点击在这里,

2118
01:28:29,704 --> 01:28:31,037
ooh, it's a lot harder to type,
哦,这是一个很难类型,

2119
01:28:31,106 --> 01:28:35,242
#stanford, okay so now you're getting into what
#斯坦福大学,所以现在你进入

2120
01:28:35,310 --> 01:28:39,846
I'm saying about learn to type like your users will be,
我说的关于学会喜欢你的用户将类型,

2121
01:28:39,915 --> 01:28:42,582
So here I'm going to search, goes in stanford and
这里我要搜索,斯坦福大学

2122
01:28:42,651 --> 01:28:43,450
search for it,
寻找它,

2123
01:28:43,518 --> 01:28:46,619
Let's go and search for something else here,
让我们去寻找别的东西,

2124
01:28:46,688 --> 01:28:48,688
Maybe we'll search for,
也许我们会寻找,

2125
01:28:48,756 --> 01:28:53,159
this is kind of dangerous because people might say, but
这是危险的,因为人们可能会说,但是

2126
01:28:53,228 --> 01:28:59,198
Trump >> Okay,
特朗普> >好的,

2127
01:28:59,267 --> 01:29:01,468
there's some Trump ones,
有一些胜过的,

2128
01:29:03,104 --> 01:29:04,303
Now, we've done all this,
现在,我们所做的这一切,

2129
01:29:04,372 --> 01:29:05,672
I wanna fix this thing though,
我想解决这个事情,

2130
01:29:05,740 --> 01:29:08,207
where this looks really bad at the top here,
这看起来很糟糕的顶部,

2131
01:29:08,276 --> 01:29:09,910
And there's this really easy fix to that,
这很容易解决,

2132
01:29:09,978 --> 01:29:11,845
Which is I'm just going to, this is the fix,
我要,这是修复,

2133
01:29:11,913 --> 01:29:14,013
The fix is everything in the UI as you've learned,
解决办法是在UI中,你学到的一切,

2134
01:29:14,082 --> 01:29:17,917
I'm just gonna embed this in a navigation controller,
我要嵌入在导航控制器,

2135
01:29:17,986 --> 01:29:22,055
Okay, when you embed this in a navigation controller and run,
好的,当你嵌入这个导航控制器和运行,

2136
01:29:22,123 --> 01:29:25,124
you can see that it makes a nice title at the top,
你可以看到,这是一个很好的标题,

2137
01:29:25,193 --> 01:29:27,059
it moves the text field down,
它移动文本框,

2138
01:29:27,128 --> 01:29:29,429
it's just much nicer all around,
只是好得多,

2139
01:29:29,498 --> 01:29:32,164
Okay, see how it has done that from a bit down here,
好吧,看看它所做的,从下面一点,

2140
01:29:32,233 --> 01:29:34,867
One other thing I'm gonna do is put placeholder text in
另一件事我要做的是把占位符文本

2141
01:29:34,936 --> 01:29:36,502
there, I meant to show you that,
我想告诉你,,

2142
01:29:36,571 --> 01:29:40,940
Sorry, let's do that, if I go back to here click this,
对不起,我们这样做,如果我回到这里点击这个,

2143
01:29:41,009 --> 01:29:44,110
That thing in here, swipe this guide,
那件事在这里,刷本指南,

2144
01:29:44,179 --> 01:29:48,648
You can put a placeholder text like this, Twitter Search and
你可以把这样的一个占位符文本,Twitter搜索和

2145
01:29:48,717 --> 01:29:50,984
see it shows it in there, kinda like gray,
看到它显示它,有点像灰色,

2146
01:29:51,053 --> 01:29:54,421
So that when you run, it's more obvious to the user,
所以当您运行,用户更明显,

2147
01:29:54,490 --> 01:29:57,624
what is that big white space, all right?
这是什么白色的大空间,对吧?

2148
01:29:57,692 --> 01:30:00,093
Be clear to them that it's a Twitter search,
是很清楚,这是一个Twitter搜索,

2149
01:30:01,729 --> 01:30:03,796
You know all you need to know to do your homework,
你知道所有你需要知道的做你的家庭作业,

2150
01:30:03,865 --> 01:30:04,464
Good luck with it,
祝你好运,

2151
01:30:06,101 --> 01:30:16,709
>> For more, please visit us at Stanford,edu,
> >更多内容,请访问我们的斯坦福大学edu,
